
STM32_Soft_I2C_AT24CXX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dcc  08001d48  08001d48  00011d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08002b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000628  20000014  08002b30  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000063c  08002b30  0002063c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000edf5  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000219a  00000000  00000000  0002ee32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025d2  00000000  00000000  00030fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000480  00000000  00000000  000335a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b48  00000000  00000000  00033a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000033a6  00000000  00000000  00034568  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000018ae  00000000  00000000  0003790e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000391bc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000b80  00000000  00000000  00039238  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d30 	.word	0x08001d30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001d30 	.word	0x08001d30

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000152:	490d      	ldr	r1, [pc, #52]	; (8000188 <HAL_InitTick+0x3c>)
 8000154:	4a0d      	ldr	r2, [pc, #52]	; (800018c <HAL_InitTick+0x40>)
 8000156:	7809      	ldrb	r1, [r1, #0]
 8000158:	6812      	ldr	r2, [r2, #0]
 800015a:	fbb3 f3f1 	udiv	r3, r3, r1
{
 800015e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000160:	fbb2 f0f3 	udiv	r0, r2, r3
 8000164:	f000 f894 	bl	8000290 <HAL_SYSTICK_Config>
 8000168:	b908      	cbnz	r0, 800016e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2d0f      	cmp	r5, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000170:	bd38      	pop	{r3, r4, r5, pc}
 8000172:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000174:	4602      	mov	r2, r0
 8000176:	4629      	mov	r1, r5
 8000178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800017c:	f000 f852 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <HAL_InitTick+0x44>)
 8000182:	4620      	mov	r0, r4
 8000184:	601d      	str	r5, [r3, #0]
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000010 	.word	0x20000010
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fc8c 	bl	8001ac8 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000438 	.word	0x20000438
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000438 	.word	0x20000438

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80001e6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80001e8:	d002      	beq.n	80001f0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ea:	4b04      	ldr	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000200:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	4a06      	ldr	r2, [pc, #24]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000208:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800020a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020e:	400b      	ands	r3, r1
 8000210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000218:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021a:	60d3      	str	r3, [r2, #12]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b470      	push	{r4, r5, r6}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0607 	rsb	r6, r4, #7
 8000232:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000234:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000238:	bf28      	it	cs
 800023a:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023c:	2b06      	cmp	r3, #6
 800023e:	d917      	bls.n	8000270 <HAL_NVIC_SetPriority+0x4c>
 8000240:	2501      	movs	r5, #1
 8000242:	3c03      	subs	r4, #3
 8000244:	40a5      	lsls	r5, r4
 8000246:	3d01      	subs	r5, #1
 8000248:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024a:	2301      	movs	r3, #1
 800024c:	40b3      	lsls	r3, r6
 800024e:	3b01      	subs	r3, #1
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8000254:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000256:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 800025a:	db0c      	blt.n	8000276 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025c:	0109      	lsls	r1, r1, #4
 800025e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000262:	b2c9      	uxtb	r1, r1
 8000264:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000268:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800026c:	bc70      	pop	{r4, r5, r6}
 800026e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000270:	2200      	movs	r2, #0
 8000272:	4614      	mov	r4, r2
 8000274:	e7e9      	b.n	800024a <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	4b05      	ldr	r3, [pc, #20]	; (800028c <HAL_NVIC_SetPriority+0x68>)
 8000278:	f000 000f 	and.w	r0, r0, #15
 800027c:	0109      	lsls	r1, r1, #4
 800027e:	b2c9      	uxtb	r1, r1
 8000280:	4403      	add	r3, r0
 8000282:	7619      	strb	r1, [r3, #24]
 8000284:	bc70      	pop	{r4, r5, r6}
 8000286:	4770      	bx	lr
 8000288:	e000ed00 	.word	0xe000ed00
 800028c:	e000ecfc 	.word	0xe000ecfc

08000290 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000290:	3801      	subs	r0, #1
 8000292:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000296:	d20d      	bcs.n	80002b4 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000298:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029a:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800029c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029e:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	4c06      	ldr	r4, [pc, #24]	; (80002bc <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002aa:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 80002ac:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b0:	6019      	str	r1, [r3, #0]
 80002b2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002b4:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80002b6:	4770      	bx	lr
 80002b8:	e000e010 	.word	0xe000e010
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002c0:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002c2:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002c4:	6813      	ldr	r3, [r2, #0]
 80002c6:	bf0c      	ite	eq
 80002c8:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002cc:	f023 0304 	bicne.w	r3, r3, #4
 80002d0:	6013      	str	r3, [r2, #0]
 80002d2:	4770      	bx	lr
 80002d4:	e000e010 	.word	0xe000e010

080002d8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop

080002dc <HAL_SYSTICK_IRQHandler>:
{
 80002dc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002de:	f7ff fffb 	bl	80002d8 <HAL_SYSTICK_Callback>
 80002e2:	bd08      	pop	{r3, pc}

080002e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002e8:	f04f 0800 	mov.w	r8, #0
{
 80002ec:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002ee:	4643      	mov	r3, r8
{
 80002f0:	f06f 061f 	mvn.w	r6, #31
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80002f4:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 80004d4 <HAL_GPIO_Init+0x1f0>
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80002f8:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 80004d8 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80002fc:	4f6f      	ldr	r7, [pc, #444]	; (80004bc <HAL_GPIO_Init+0x1d8>)
      switch (GPIO_Init->Mode)
 80002fe:	9000      	str	r0, [sp, #0]
 8000300:	e005      	b.n	800030e <HAL_GPIO_Init+0x2a>
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000302:	3301      	adds	r3, #1
 8000304:	2b10      	cmp	r3, #16
 8000306:	f106 0604 	add.w	r6, r6, #4
 800030a:	f000 8089 	beq.w	8000420 <HAL_GPIO_Init+0x13c>
    ioposition = (0x01U << position);
 800030e:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000310:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000312:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000314:	4014      	ands	r4, r2
    if (iocurrent == ioposition)
 8000316:	42a2      	cmp	r2, r4
 8000318:	d1f3      	bne.n	8000302 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 800031a:	684d      	ldr	r5, [r1, #4]
 800031c:	2d12      	cmp	r5, #18
 800031e:	f000 80a3 	beq.w	8000468 <HAL_GPIO_Init+0x184>
 8000322:	f200 808c 	bhi.w	800043e <HAL_GPIO_Init+0x15a>
 8000326:	2d02      	cmp	r5, #2
 8000328:	f000 80a5 	beq.w	8000476 <HAL_GPIO_Init+0x192>
 800032c:	f240 8081 	bls.w	8000432 <HAL_GPIO_Init+0x14e>
 8000330:	2d03      	cmp	r5, #3
 8000332:	f000 809d 	beq.w	8000470 <HAL_GPIO_Init+0x18c>
 8000336:	2d11      	cmp	r5, #17
 8000338:	d102      	bne.n	8000340 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800033a:	68ca      	ldr	r2, [r1, #12]
 800033c:	f102 0804 	add.w	r8, r2, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000340:	2cff      	cmp	r4, #255	; 0xff
 8000342:	d870      	bhi.n	8000426 <HAL_GPIO_Init+0x142>
 8000344:	9a00      	ldr	r2, [sp, #0]
 8000346:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800034a:	4691      	mov	r9, r2
 800034c:	6812      	ldr	r2, [r2, #0]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800034e:	250f      	movs	r5, #15
 8000350:	fa05 fb0a 	lsl.w	fp, r5, sl
 8000354:	ea22 020b 	bic.w	r2, r2, fp
 8000358:	fa08 fa0a 	lsl.w	sl, r8, sl
 800035c:	ea42 020a 	orr.w	r2, r2, sl
 8000360:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000364:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000368:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800036c:	d0c9      	beq.n	8000302 <HAL_GPIO_Init+0x1e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800036e:	f8de 9018 	ldr.w	r9, [lr, #24]
 8000372:	f023 0203 	bic.w	r2, r3, #3
 8000376:	f049 0901 	orr.w	r9, r9, #1
 800037a:	f8ce 9018 	str.w	r9, [lr, #24]
 800037e:	f8de 9018 	ldr.w	r9, [lr, #24]
 8000382:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000386:	f009 0901 	and.w	r9, r9, #1
 800038a:	f8cd 900c 	str.w	r9, [sp, #12]
 800038e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000392:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000396:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800039a:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800039e:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003a2:	fa05 f509 	lsl.w	r5, r5, r9
 80003a6:	ea2b 0005 	bic.w	r0, fp, r5
 80003aa:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003ac:	9800      	ldr	r0, [sp, #0]
 80003ae:	4560      	cmp	r0, ip
 80003b0:	d077      	beq.n	80004a2 <HAL_GPIO_Init+0x1be>
 80003b2:	4d43      	ldr	r5, [pc, #268]	; (80004c0 <HAL_GPIO_Init+0x1dc>)
 80003b4:	42a8      	cmp	r0, r5
 80003b6:	d077      	beq.n	80004a8 <HAL_GPIO_Init+0x1c4>
 80003b8:	4d42      	ldr	r5, [pc, #264]	; (80004c4 <HAL_GPIO_Init+0x1e0>)
 80003ba:	42a8      	cmp	r0, r5
 80003bc:	d079      	beq.n	80004b2 <HAL_GPIO_Init+0x1ce>
 80003be:	4d42      	ldr	r5, [pc, #264]	; (80004c8 <HAL_GPIO_Init+0x1e4>)
 80003c0:	42a8      	cmp	r0, r5
 80003c2:	bf0c      	ite	eq
 80003c4:	f04f 0b03 	moveq.w	fp, #3
 80003c8:	f04f 0b04 	movne.w	fp, #4
 80003cc:	fa0b f909 	lsl.w	r9, fp, r9
 80003d0:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003d2:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003d6:	ea40 0509 	orr.w	r5, r0, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003da:	6095      	str	r5, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003dc:	683a      	ldr	r2, [r7, #0]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003de:	f103 0301 	add.w	r3, r3, #1
          SET_BIT(EXTI->IMR, iocurrent);
 80003e2:	bf14      	ite	ne
 80003e4:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003e6:	43a2      	biceq	r2, r4
 80003e8:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003ea:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ec:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003f0:	bf14      	ite	ne
 80003f2:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003f4:	43a2      	biceq	r2, r4
 80003f6:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003f8:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003fa:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003fe:	bf14      	ite	ne
 8000400:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000402:	43a2      	biceq	r2, r4
 8000404:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000406:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000408:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800040c:	bf14      	ite	ne
 800040e:	4314      	orrne	r4, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000410:	ea22 0404 	biceq.w	r4, r2, r4
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000414:	2b10      	cmp	r3, #16
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000416:	60fc      	str	r4, [r7, #12]
 8000418:	f106 0604 	add.w	r6, r6, #4
  for (position = 0U; position < GPIO_NUMBER; position++)
 800041c:	f47f af77 	bne.w	800030e <HAL_GPIO_Init+0x2a>
        }
      }
    }
  }
}
 8000420:	b005      	add	sp, #20
 8000422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000426:	9800      	ldr	r0, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000428:	46b2      	mov	sl, r6
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800042a:	6842      	ldr	r2, [r0, #4]
 800042c:	f100 0904 	add.w	r9, r0, #4
 8000430:	e78d      	b.n	800034e <HAL_GPIO_Init+0x6a>
      switch (GPIO_Init->Mode)
 8000432:	b1a5      	cbz	r5, 800045e <HAL_GPIO_Init+0x17a>
 8000434:	2d01      	cmp	r5, #1
 8000436:	d183      	bne.n	8000340 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000438:	f8d1 800c 	ldr.w	r8, [r1, #12]
          break;
 800043c:	e780      	b.n	8000340 <HAL_GPIO_Init+0x5c>
      switch (GPIO_Init->Mode)
 800043e:	4823      	ldr	r0, [pc, #140]	; (80004cc <HAL_GPIO_Init+0x1e8>)
 8000440:	4285      	cmp	r5, r0
 8000442:	d00c      	beq.n	800045e <HAL_GPIO_Init+0x17a>
 8000444:	d91b      	bls.n	800047e <HAL_GPIO_Init+0x19a>
 8000446:	4822      	ldr	r0, [pc, #136]	; (80004d0 <HAL_GPIO_Init+0x1ec>)
 8000448:	4285      	cmp	r5, r0
 800044a:	d008      	beq.n	800045e <HAL_GPIO_Init+0x17a>
 800044c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8000450:	4285      	cmp	r5, r0
 8000452:	d004      	beq.n	800045e <HAL_GPIO_Init+0x17a>
 8000454:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80004dc <HAL_GPIO_Init+0x1f8>
 8000458:	454d      	cmp	r5, r9
 800045a:	f47f af71 	bne.w	8000340 <HAL_GPIO_Init+0x5c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800045e:	688d      	ldr	r5, [r1, #8]
 8000460:	b9bd      	cbnz	r5, 8000492 <HAL_GPIO_Init+0x1ae>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000462:	f04f 0804 	mov.w	r8, #4
 8000466:	e76b      	b.n	8000340 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000468:	68ca      	ldr	r2, [r1, #12]
 800046a:	f102 080c 	add.w	r8, r2, #12
          break;
 800046e:	e767      	b.n	8000340 <HAL_GPIO_Init+0x5c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000470:	f04f 0800 	mov.w	r8, #0
 8000474:	e764      	b.n	8000340 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000476:	68ca      	ldr	r2, [r1, #12]
 8000478:	f102 0808 	add.w	r8, r2, #8
          break;
 800047c:	e760      	b.n	8000340 <HAL_GPIO_Init+0x5c>
      switch (GPIO_Init->Mode)
 800047e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80004e0 <HAL_GPIO_Init+0x1fc>
 8000482:	454d      	cmp	r5, r9
 8000484:	d0eb      	beq.n	800045e <HAL_GPIO_Init+0x17a>
 8000486:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800048a:	454d      	cmp	r5, r9
 800048c:	f47f af58 	bne.w	8000340 <HAL_GPIO_Init+0x5c>
 8000490:	e7e5      	b.n	800045e <HAL_GPIO_Init+0x17a>
            GPIOx->BSRR = ioposition;
 8000492:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000494:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 8000496:	bf0c      	ite	eq
 8000498:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 800049a:	6142      	strne	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800049c:	f04f 0808 	mov.w	r8, #8
 80004a0:	e74e      	b.n	8000340 <HAL_GPIO_Init+0x5c>
 80004a2:	f04f 0900 	mov.w	r9, #0
 80004a6:	e793      	b.n	80003d0 <HAL_GPIO_Init+0xec>
 80004a8:	f04f 0b01 	mov.w	fp, #1
 80004ac:	fa0b f909 	lsl.w	r9, fp, r9
 80004b0:	e78e      	b.n	80003d0 <HAL_GPIO_Init+0xec>
 80004b2:	f04f 0b02 	mov.w	fp, #2
 80004b6:	fa0b f909 	lsl.w	r9, fp, r9
 80004ba:	e789      	b.n	80003d0 <HAL_GPIO_Init+0xec>
 80004bc:	40010400 	.word	0x40010400
 80004c0:	40010c00 	.word	0x40010c00
 80004c4:	40011000 	.word	0x40011000
 80004c8:	40011400 	.word	0x40011400
 80004cc:	10210000 	.word	0x10210000
 80004d0:	10310000 	.word	0x10310000
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010800 	.word	0x40010800
 80004dc:	10220000 	.word	0x10220000
 80004e0:	10110000 	.word	0x10110000

080004e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004e4:	6883      	ldr	r3, [r0, #8]
 80004e6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80004e8:	bf14      	ite	ne
 80004ea:	2001      	movne	r0, #1
 80004ec:	2000      	moveq	r0, #0
 80004ee:	4770      	bx	lr

080004f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004f0:	b902      	cbnz	r2, 80004f4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004f2:	0409      	lsls	r1, r1, #16
 80004f4:	6101      	str	r1, [r0, #16]
 80004f6:	4770      	bx	lr

080004f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004fc:	6803      	ldr	r3, [r0, #0]
{
 80004fe:	b082      	sub	sp, #8
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000500:	07dd      	lsls	r5, r3, #31
{
 8000502:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000504:	d530      	bpl.n	8000568 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000506:	49ad      	ldr	r1, [pc, #692]	; (80007bc <HAL_RCC_OscConfig+0x2c4>)
 8000508:	684a      	ldr	r2, [r1, #4]
 800050a:	f002 020c 	and.w	r2, r2, #12
 800050e:	2a04      	cmp	r2, #4
 8000510:	f000 80fa 	beq.w	8000708 <HAL_RCC_OscConfig+0x210>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000514:	684a      	ldr	r2, [r1, #4]
 8000516:	f002 020c 	and.w	r2, r2, #12
 800051a:	2a08      	cmp	r2, #8
 800051c:	f000 80f0 	beq.w	8000700 <HAL_RCC_OscConfig+0x208>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000520:	6863      	ldr	r3, [r4, #4]
 8000522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000526:	f000 8174 	beq.w	8000812 <HAL_RCC_OscConfig+0x31a>
 800052a:	2b00      	cmp	r3, #0
 800052c:	f000 8104 	beq.w	8000738 <HAL_RCC_OscConfig+0x240>
 8000530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000534:	f000 81a9 	beq.w	800088a <HAL_RCC_OscConfig+0x392>
 8000538:	4ba0      	ldr	r3, [pc, #640]	; (80007bc <HAL_RCC_OscConfig+0x2c4>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000548:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800054a:	f7ff fe41 	bl	80001d0 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800054e:	4d9b      	ldr	r5, [pc, #620]	; (80007bc <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8000550:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000552:	e005      	b.n	8000560 <HAL_RCC_OscConfig+0x68>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000554:	f7ff fe3c 	bl	80001d0 <HAL_GetTick>
 8000558:	1b80      	subs	r0, r0, r6
 800055a:	2864      	cmp	r0, #100	; 0x64
 800055c:	f200 8117 	bhi.w	800078e <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000560:	682b      	ldr	r3, [r5, #0]
 8000562:	039a      	lsls	r2, r3, #14
 8000564:	d5f6      	bpl.n	8000554 <HAL_RCC_OscConfig+0x5c>
 8000566:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000568:	079f      	lsls	r7, r3, #30
 800056a:	d528      	bpl.n	80005be <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800056c:	4a93      	ldr	r2, [pc, #588]	; (80007bc <HAL_RCC_OscConfig+0x2c4>)
 800056e:	6851      	ldr	r1, [r2, #4]
 8000570:	f011 0f0c 	tst.w	r1, #12
 8000574:	f000 80a9 	beq.w	80006ca <HAL_RCC_OscConfig+0x1d2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000578:	6851      	ldr	r1, [r2, #4]
 800057a:	f001 010c 	and.w	r1, r1, #12
 800057e:	2908      	cmp	r1, #8
 8000580:	f000 809f 	beq.w	80006c2 <HAL_RCC_OscConfig+0x1ca>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000584:	6923      	ldr	r3, [r4, #16]
 8000586:	2b00      	cmp	r3, #0
 8000588:	f000 8132 	beq.w	80007f0 <HAL_RCC_OscConfig+0x2f8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800058c:	2201      	movs	r2, #1
 800058e:	4b8c      	ldr	r3, [pc, #560]	; (80007c0 <HAL_RCC_OscConfig+0x2c8>)
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000590:	4d8a      	ldr	r5, [pc, #552]	; (80007bc <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_ENABLE();
 8000592:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000594:	f7ff fe1c 	bl	80001d0 <HAL_GetTick>
 8000598:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800059a:	e005      	b.n	80005a8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800059c:	f7ff fe18 	bl	80001d0 <HAL_GetTick>
 80005a0:	1b80      	subs	r0, r0, r6
 80005a2:	2802      	cmp	r0, #2
 80005a4:	f200 80f3 	bhi.w	800078e <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005a8:	682b      	ldr	r3, [r5, #0]
 80005aa:	0798      	lsls	r0, r3, #30
 80005ac:	d5f6      	bpl.n	800059c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005ae:	682b      	ldr	r3, [r5, #0]
 80005b0:	6962      	ldr	r2, [r4, #20]
 80005b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005ba:	602b      	str	r3, [r5, #0]
 80005bc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005be:	071a      	lsls	r2, r3, #28
 80005c0:	d45d      	bmi.n	800067e <HAL_RCC_OscConfig+0x186>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005c2:	075d      	lsls	r5, r3, #29
 80005c4:	d53a      	bpl.n	800063c <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80005c6:	4b7d      	ldr	r3, [pc, #500]	; (80007bc <HAL_RCC_OscConfig+0x2c4>)
 80005c8:	69da      	ldr	r2, [r3, #28]
 80005ca:	00d0      	lsls	r0, r2, #3
 80005cc:	f100 80a6 	bmi.w	800071c <HAL_RCC_OscConfig+0x224>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80005d0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	69da      	ldr	r2, [r3, #28]
 80005d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005d8:	61da      	str	r2, [r3, #28]
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	9b00      	ldr	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80005e4:	4b77      	ldr	r3, [pc, #476]	; (80007c4 <HAL_RCC_OscConfig+0x2cc>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	05d1      	lsls	r1, r2, #23
 80005ea:	f140 80bf 	bpl.w	800076c <HAL_RCC_OscConfig+0x274>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80005ee:	68e3      	ldr	r3, [r4, #12]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	f000 8114 	beq.w	800081e <HAL_RCC_OscConfig+0x326>
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	f000 80cd 	beq.w	8000796 <HAL_RCC_OscConfig+0x29e>
 80005fc:	2b05      	cmp	r3, #5
 80005fe:	4b6f      	ldr	r3, [pc, #444]	; (80007bc <HAL_RCC_OscConfig+0x2c4>)
 8000600:	6a1a      	ldr	r2, [r3, #32]
 8000602:	f000 814f 	beq.w	80008a4 <HAL_RCC_OscConfig+0x3ac>
 8000606:	f022 0201 	bic.w	r2, r2, #1
 800060a:	621a      	str	r2, [r3, #32]
 800060c:	6a1a      	ldr	r2, [r3, #32]
 800060e:	f022 0204 	bic.w	r2, r2, #4
 8000612:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000614:	f7ff fddc 	bl	80001d0 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000618:	4e68      	ldr	r6, [pc, #416]	; (80007bc <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 800061a:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800061c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000620:	e006      	b.n	8000630 <HAL_RCC_OscConfig+0x138>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000622:	f7ff fdd5 	bl	80001d0 <HAL_GetTick>
 8000626:	eba0 0008 	sub.w	r0, r0, r8
 800062a:	42b8      	cmp	r0, r7
 800062c:	f200 80af 	bhi.w	800078e <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000630:	6a33      	ldr	r3, [r6, #32]
 8000632:	079b      	lsls	r3, r3, #30
 8000634:	d5f5      	bpl.n	8000622 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000636:	2d00      	cmp	r5, #0
 8000638:	f040 80f7 	bne.w	800082a <HAL_RCC_OscConfig+0x332>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800063c:	69e3      	ldr	r3, [r4, #28]
 800063e:	b1d3      	cbz	r3, 8000676 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000640:	4d5e      	ldr	r5, [pc, #376]	; (80007bc <HAL_RCC_OscConfig+0x2c4>)
 8000642:	686a      	ldr	r2, [r5, #4]
 8000644:	f002 020c 	and.w	r2, r2, #12
 8000648:	2a08      	cmp	r2, #8
 800064a:	d045      	beq.n	80006d8 <HAL_RCC_OscConfig+0x1e0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800064c:	2b02      	cmp	r3, #2
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800064e:	f04f 0200 	mov.w	r2, #0
 8000652:	4b5d      	ldr	r3, [pc, #372]	; (80007c8 <HAL_RCC_OscConfig+0x2d0>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000654:	f000 80ef 	beq.w	8000836 <HAL_RCC_OscConfig+0x33e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000658:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800065a:	f7ff fdb9 	bl	80001d0 <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800065e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8000660:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000662:	e005      	b.n	8000670 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000664:	f7ff fdb4 	bl	80001d0 <HAL_GetTick>
 8000668:	1b40      	subs	r0, r0, r5
 800066a:	2802      	cmp	r0, #2
 800066c:	f200 808f 	bhi.w	800078e <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000670:	6823      	ldr	r3, [r4, #0]
 8000672:	019b      	lsls	r3, r3, #6
 8000674:	d4f6      	bmi.n	8000664 <HAL_RCC_OscConfig+0x16c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000676:	2000      	movs	r0, #0
}
 8000678:	b002      	add	sp, #8
 800067a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800067e:	69a3      	ldr	r3, [r4, #24]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d02d      	beq.n	80006e0 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_LSI_ENABLE();
 8000684:	2201      	movs	r2, #1
 8000686:	4b51      	ldr	r3, [pc, #324]	; (80007cc <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000688:	4d4c      	ldr	r5, [pc, #304]	; (80007bc <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_ENABLE();
 800068a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800068c:	f7ff fda0 	bl	80001d0 <HAL_GetTick>
 8000690:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000692:	e004      	b.n	800069e <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000694:	f7ff fd9c 	bl	80001d0 <HAL_GetTick>
 8000698:	1b80      	subs	r0, r0, r6
 800069a:	2802      	cmp	r0, #2
 800069c:	d877      	bhi.n	800078e <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800069e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80006a0:	079b      	lsls	r3, r3, #30
 80006a2:	d5f7      	bpl.n	8000694 <HAL_RCC_OscConfig+0x19c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006a4:	4b4a      	ldr	r3, [pc, #296]	; (80007d0 <HAL_RCC_OscConfig+0x2d8>)
 80006a6:	4a4b      	ldr	r2, [pc, #300]	; (80007d4 <HAL_RCC_OscConfig+0x2dc>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	fba2 2303 	umull	r2, r3, r2, r3
 80006ae:	0a5b      	lsrs	r3, r3, #9
 80006b0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80006b2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80006b4:	9b01      	ldr	r3, [sp, #4]
 80006b6:	1e5a      	subs	r2, r3, #1
 80006b8:	9201      	str	r2, [sp, #4]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1f9      	bne.n	80006b2 <HAL_RCC_OscConfig+0x1ba>
 80006be:	6823      	ldr	r3, [r4, #0]
 80006c0:	e77f      	b.n	80005c2 <HAL_RCC_OscConfig+0xca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006c2:	6852      	ldr	r2, [r2, #4]
 80006c4:	03d6      	lsls	r6, r2, #15
 80006c6:	f53f af5d 	bmi.w	8000584 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006ca:	4a3c      	ldr	r2, [pc, #240]	; (80007bc <HAL_RCC_OscConfig+0x2c4>)
 80006cc:	6812      	ldr	r2, [r2, #0]
 80006ce:	0795      	lsls	r5, r2, #30
 80006d0:	d526      	bpl.n	8000720 <HAL_RCC_OscConfig+0x228>
 80006d2:	6922      	ldr	r2, [r4, #16]
 80006d4:	2a01      	cmp	r2, #1
 80006d6:	d023      	beq.n	8000720 <HAL_RCC_OscConfig+0x228>
        return HAL_ERROR;
 80006d8:	2001      	movs	r0, #1
}
 80006da:	b002      	add	sp, #8
 80006dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80006e0:	4a3a      	ldr	r2, [pc, #232]	; (80007cc <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006e2:	4d36      	ldr	r5, [pc, #216]	; (80007bc <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_DISABLE();
 80006e4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80006e6:	f7ff fd73 	bl	80001d0 <HAL_GetTick>
 80006ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006ec:	e004      	b.n	80006f8 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006ee:	f7ff fd6f 	bl	80001d0 <HAL_GetTick>
 80006f2:	1b80      	subs	r0, r0, r6
 80006f4:	2802      	cmp	r0, #2
 80006f6:	d84a      	bhi.n	800078e <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80006fa:	079f      	lsls	r7, r3, #30
 80006fc:	d4f7      	bmi.n	80006ee <HAL_RCC_OscConfig+0x1f6>
 80006fe:	e7de      	b.n	80006be <HAL_RCC_OscConfig+0x1c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000700:	684a      	ldr	r2, [r1, #4]
 8000702:	03d0      	lsls	r0, r2, #15
 8000704:	f57f af0c 	bpl.w	8000520 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000708:	4a2c      	ldr	r2, [pc, #176]	; (80007bc <HAL_RCC_OscConfig+0x2c4>)
 800070a:	6812      	ldr	r2, [r2, #0]
 800070c:	0391      	lsls	r1, r2, #14
 800070e:	f57f af2b 	bpl.w	8000568 <HAL_RCC_OscConfig+0x70>
 8000712:	6862      	ldr	r2, [r4, #4]
 8000714:	2a00      	cmp	r2, #0
 8000716:	f47f af27 	bne.w	8000568 <HAL_RCC_OscConfig+0x70>
 800071a:	e7dd      	b.n	80006d8 <HAL_RCC_OscConfig+0x1e0>
    FlagStatus       pwrclkchanged = RESET;
 800071c:	2500      	movs	r5, #0
 800071e:	e761      	b.n	80005e4 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000720:	4926      	ldr	r1, [pc, #152]	; (80007bc <HAL_RCC_OscConfig+0x2c4>)
 8000722:	6960      	ldr	r0, [r4, #20]
 8000724:	680a      	ldr	r2, [r1, #0]
 8000726:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800072a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800072e:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000730:	071a      	lsls	r2, r3, #28
 8000732:	f57f af46 	bpl.w	80005c2 <HAL_RCC_OscConfig+0xca>
 8000736:	e7a2      	b.n	800067e <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000738:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800073c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000740:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000742:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000744:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000750:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000752:	f7ff fd3d 	bl	80001d0 <HAL_GetTick>
 8000756:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000758:	e004      	b.n	8000764 <HAL_RCC_OscConfig+0x26c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800075a:	f7ff fd39 	bl	80001d0 <HAL_GetTick>
 800075e:	1b80      	subs	r0, r0, r6
 8000760:	2864      	cmp	r0, #100	; 0x64
 8000762:	d814      	bhi.n	800078e <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000764:	682b      	ldr	r3, [r5, #0]
 8000766:	039b      	lsls	r3, r3, #14
 8000768:	d4f7      	bmi.n	800075a <HAL_RCC_OscConfig+0x262>
 800076a:	e6fc      	b.n	8000566 <HAL_RCC_OscConfig+0x6e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800076c:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800076e:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000774:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000776:	f7ff fd2b 	bl	80001d0 <HAL_GetTick>
 800077a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800077c:	6833      	ldr	r3, [r6, #0]
 800077e:	05da      	lsls	r2, r3, #23
 8000780:	f53f af35 	bmi.w	80005ee <HAL_RCC_OscConfig+0xf6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000784:	f7ff fd24 	bl	80001d0 <HAL_GetTick>
 8000788:	1bc0      	subs	r0, r0, r7
 800078a:	2864      	cmp	r0, #100	; 0x64
 800078c:	d9f6      	bls.n	800077c <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 800078e:	2003      	movs	r0, #3
}
 8000790:	b002      	add	sp, #8
 8000792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000796:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800079a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800079e:	6a1a      	ldr	r2, [r3, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007a0:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a2:	f022 0201 	bic.w	r2, r2, #1
 80007a6:	621a      	str	r2, [r3, #32]
 80007a8:	6a1a      	ldr	r2, [r3, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007aa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007ae:	f022 0204 	bic.w	r2, r2, #4
 80007b2:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 80007b4:	f7ff fd0c 	bl	80001d0 <HAL_GetTick>
 80007b8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007ba:	e012      	b.n	80007e2 <HAL_RCC_OscConfig+0x2ea>
 80007bc:	40021000 	.word	0x40021000
 80007c0:	42420000 	.word	0x42420000
 80007c4:	40007000 	.word	0x40007000
 80007c8:	42420060 	.word	0x42420060
 80007cc:	42420480 	.word	0x42420480
 80007d0:	20000010 	.word	0x20000010
 80007d4:	10624dd3 	.word	0x10624dd3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007d8:	f7ff fcfa 	bl	80001d0 <HAL_GetTick>
 80007dc:	1bc0      	subs	r0, r0, r7
 80007de:	4540      	cmp	r0, r8
 80007e0:	d8d5      	bhi.n	800078e <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007e2:	6a33      	ldr	r3, [r6, #32]
 80007e4:	0798      	lsls	r0, r3, #30
 80007e6:	d4f7      	bmi.n	80007d8 <HAL_RCC_OscConfig+0x2e0>
    if(pwrclkchanged == SET)
 80007e8:	2d00      	cmp	r5, #0
 80007ea:	f43f af27 	beq.w	800063c <HAL_RCC_OscConfig+0x144>
 80007ee:	e01c      	b.n	800082a <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_HSI_DISABLE();
 80007f0:	4a34      	ldr	r2, [pc, #208]	; (80008c4 <HAL_RCC_OscConfig+0x3cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007f2:	4d35      	ldr	r5, [pc, #212]	; (80008c8 <HAL_RCC_OscConfig+0x3d0>)
        __HAL_RCC_HSI_DISABLE();
 80007f4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80007f6:	f7ff fceb 	bl	80001d0 <HAL_GetTick>
 80007fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007fc:	e004      	b.n	8000808 <HAL_RCC_OscConfig+0x310>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007fe:	f7ff fce7 	bl	80001d0 <HAL_GetTick>
 8000802:	1b80      	subs	r0, r0, r6
 8000804:	2802      	cmp	r0, #2
 8000806:	d8c2      	bhi.n	800078e <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000808:	682b      	ldr	r3, [r5, #0]
 800080a:	0799      	lsls	r1, r3, #30
 800080c:	d4f7      	bmi.n	80007fe <HAL_RCC_OscConfig+0x306>
 800080e:	6823      	ldr	r3, [r4, #0]
 8000810:	e6d5      	b.n	80005be <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000812:	4a2d      	ldr	r2, [pc, #180]	; (80008c8 <HAL_RCC_OscConfig+0x3d0>)
 8000814:	6813      	ldr	r3, [r2, #0]
 8000816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	e695      	b.n	800054a <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800081e:	4a2a      	ldr	r2, [pc, #168]	; (80008c8 <HAL_RCC_OscConfig+0x3d0>)
 8000820:	6a13      	ldr	r3, [r2, #32]
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6213      	str	r3, [r2, #32]
 8000828:	e6f4      	b.n	8000614 <HAL_RCC_OscConfig+0x11c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800082a:	4a27      	ldr	r2, [pc, #156]	; (80008c8 <HAL_RCC_OscConfig+0x3d0>)
 800082c:	69d3      	ldr	r3, [r2, #28]
 800082e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000832:	61d3      	str	r3, [r2, #28]
 8000834:	e702      	b.n	800063c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_PLL_DISABLE();
 8000836:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000838:	f7ff fcca 	bl	80001d0 <HAL_GetTick>
 800083c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800083e:	e004      	b.n	800084a <HAL_RCC_OscConfig+0x352>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000840:	f7ff fcc6 	bl	80001d0 <HAL_GetTick>
 8000844:	1b80      	subs	r0, r0, r6
 8000846:	2802      	cmp	r0, #2
 8000848:	d8a1      	bhi.n	800078e <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800084a:	682b      	ldr	r3, [r5, #0]
 800084c:	0199      	lsls	r1, r3, #6
 800084e:	d4f7      	bmi.n	8000840 <HAL_RCC_OscConfig+0x348>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000850:	6a22      	ldr	r2, [r4, #32]
 8000852:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000856:	d02d      	beq.n	80008b4 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_PLL_ENABLE();
 8000858:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <HAL_RCC_OscConfig+0x3d0>)
 800085c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800085e:	6859      	ldr	r1, [r3, #4]
 8000860:	4302      	orrs	r2, r0
 8000862:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8000866:	4819      	ldr	r0, [pc, #100]	; (80008cc <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000868:	430a      	orrs	r2, r1
 800086a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800086c:	6005      	str	r5, [r0, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800086e:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8000870:	f7ff fcae 	bl	80001d0 <HAL_GetTick>
 8000874:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000876:	e004      	b.n	8000882 <HAL_RCC_OscConfig+0x38a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000878:	f7ff fcaa 	bl	80001d0 <HAL_GetTick>
 800087c:	1b40      	subs	r0, r0, r5
 800087e:	2802      	cmp	r0, #2
 8000880:	d885      	bhi.n	800078e <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000882:	6823      	ldr	r3, [r4, #0]
 8000884:	019a      	lsls	r2, r3, #6
 8000886:	d5f7      	bpl.n	8000878 <HAL_RCC_OscConfig+0x380>
 8000888:	e6f5      	b.n	8000676 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800088a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800088e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	e652      	b.n	800054a <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008a4:	f042 0204 	orr.w	r2, r2, #4
 80008a8:	621a      	str	r2, [r3, #32]
 80008aa:	6a1a      	ldr	r2, [r3, #32]
 80008ac:	f042 0201 	orr.w	r2, r2, #1
 80008b0:	621a      	str	r2, [r3, #32]
 80008b2:	e6af      	b.n	8000614 <HAL_RCC_OscConfig+0x11c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80008b4:	686b      	ldr	r3, [r5, #4]
 80008b6:	68a1      	ldr	r1, [r4, #8]
 80008b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80008bc:	430b      	orrs	r3, r1
 80008be:	606b      	str	r3, [r5, #4]
 80008c0:	e7ca      	b.n	8000858 <HAL_RCC_OscConfig+0x360>
 80008c2:	bf00      	nop
 80008c4:	42420000 	.word	0x42420000
 80008c8:	40021000 	.word	0x40021000
 80008cc:	42420060 	.word	0x42420060

080008d0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008d0:	4a65      	ldr	r2, [pc, #404]	; (8000a68 <HAL_RCC_ClockConfig+0x198>)
 80008d2:	6813      	ldr	r3, [r2, #0]
 80008d4:	f003 0307 	and.w	r3, r3, #7
 80008d8:	428b      	cmp	r3, r1
 80008da:	d20b      	bcs.n	80008f4 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008dc:	6813      	ldr	r3, [r2, #0]
 80008de:	f023 0307 	bic.w	r3, r3, #7
 80008e2:	430b      	orrs	r3, r1
 80008e4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008e6:	6813      	ldr	r3, [r2, #0]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	4299      	cmp	r1, r3
 80008ee:	d001      	beq.n	80008f4 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 80008f0:	2001      	movs	r0, #1
}
 80008f2:	4770      	bx	lr
{
 80008f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008f8:	6803      	ldr	r3, [r0, #0]
{
 80008fa:	b086      	sub	sp, #24
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008fc:	079a      	lsls	r2, r3, #30
 80008fe:	d506      	bpl.n	800090e <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000900:	4c5a      	ldr	r4, [pc, #360]	; (8000a6c <HAL_RCC_ClockConfig+0x19c>)
 8000902:	6885      	ldr	r5, [r0, #8]
 8000904:	6862      	ldr	r2, [r4, #4]
 8000906:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800090a:	432a      	orrs	r2, r5
 800090c:	6062      	str	r2, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800090e:	07db      	lsls	r3, r3, #31
 8000910:	4606      	mov	r6, r0
 8000912:	460c      	mov	r4, r1
 8000914:	d524      	bpl.n	8000960 <HAL_RCC_ClockConfig+0x90>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000916:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000918:	4b54      	ldr	r3, [pc, #336]	; (8000a6c <HAL_RCC_ClockConfig+0x19c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800091a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800091c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800091e:	f000 8092 	beq.w	8000a46 <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000922:	2a02      	cmp	r2, #2
 8000924:	f000 8087 	beq.w	8000a36 <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000928:	0798      	lsls	r0, r3, #30
 800092a:	d529      	bpl.n	8000980 <HAL_RCC_ClockConfig+0xb0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800092c:	4d4f      	ldr	r5, [pc, #316]	; (8000a6c <HAL_RCC_ClockConfig+0x19c>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800092e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000932:	686b      	ldr	r3, [r5, #4]
 8000934:	f023 0303 	bic.w	r3, r3, #3
 8000938:	4313      	orrs	r3, r2
 800093a:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800093c:	f7ff fc48 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000940:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000942:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000944:	2b01      	cmp	r3, #1
 8000946:	d065      	beq.n	8000a14 <HAL_RCC_ClockConfig+0x144>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000948:	2b02      	cmp	r3, #2
 800094a:	d105      	bne.n	8000958 <HAL_RCC_ClockConfig+0x88>
 800094c:	e06d      	b.n	8000a2a <HAL_RCC_ClockConfig+0x15a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800094e:	f7ff fc3f 	bl	80001d0 <HAL_GetTick>
 8000952:	1bc0      	subs	r0, r0, r7
 8000954:	4540      	cmp	r0, r8
 8000956:	d872      	bhi.n	8000a3e <HAL_RCC_ClockConfig+0x16e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000958:	686b      	ldr	r3, [r5, #4]
 800095a:	f013 0f0c 	tst.w	r3, #12
 800095e:	d1f6      	bne.n	800094e <HAL_RCC_ClockConfig+0x7e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000960:	4a41      	ldr	r2, [pc, #260]	; (8000a68 <HAL_RCC_ClockConfig+0x198>)
 8000962:	6813      	ldr	r3, [r2, #0]
 8000964:	f003 0307 	and.w	r3, r3, #7
 8000968:	429c      	cmp	r4, r3
 800096a:	d20d      	bcs.n	8000988 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800096c:	6813      	ldr	r3, [r2, #0]
 800096e:	f023 0307 	bic.w	r3, r3, #7
 8000972:	4323      	orrs	r3, r4
 8000974:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000976:	6813      	ldr	r3, [r2, #0]
 8000978:	f003 0307 	and.w	r3, r3, #7
 800097c:	429c      	cmp	r4, r3
 800097e:	d003      	beq.n	8000988 <HAL_RCC_ClockConfig+0xb8>
      return HAL_ERROR;
 8000980:	2001      	movs	r0, #1
}
 8000982:	b006      	add	sp, #24
 8000984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000988:	6833      	ldr	r3, [r6, #0]
 800098a:	0759      	lsls	r1, r3, #29
 800098c:	d506      	bpl.n	800099c <HAL_RCC_ClockConfig+0xcc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800098e:	4937      	ldr	r1, [pc, #220]	; (8000a6c <HAL_RCC_ClockConfig+0x19c>)
 8000990:	68f0      	ldr	r0, [r6, #12]
 8000992:	684a      	ldr	r2, [r1, #4]
 8000994:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000998:	4302      	orrs	r2, r0
 800099a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800099c:	071a      	lsls	r2, r3, #28
 800099e:	d507      	bpl.n	80009b0 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80009a0:	4a32      	ldr	r2, [pc, #200]	; (8000a6c <HAL_RCC_ClockConfig+0x19c>)
 80009a2:	6931      	ldr	r1, [r6, #16]
 80009a4:	6853      	ldr	r3, [r2, #4]
 80009a6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80009aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80009ae:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80009b0:	2601      	movs	r6, #1
 80009b2:	2502      	movs	r5, #2
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009b4:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <HAL_RCC_ClockConfig+0x1a0>)
 80009b6:	af06      	add	r7, sp, #24
 80009b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ba:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80009be:	4c2b      	ldr	r4, [pc, #172]	; (8000a6c <HAL_RCC_ClockConfig+0x19c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80009c0:	f88d 6004 	strb.w	r6, [sp, #4]
 80009c4:	f88d 5005 	strb.w	r5, [sp, #5]
  tmpreg = RCC->CFGR;
 80009c8:	6862      	ldr	r2, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80009ca:	f002 030c 	and.w	r3, r2, #12
 80009ce:	2b08      	cmp	r3, #8
 80009d0:	d10a      	bne.n	80009e8 <HAL_RCC_ClockConfig+0x118>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80009d2:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80009d6:	443b      	add	r3, r7
 80009d8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80009dc:	03d3      	lsls	r3, r2, #15
 80009de:	d436      	bmi.n	8000a4e <HAL_RCC_ClockConfig+0x17e>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <HAL_RCC_ClockConfig+0x1a4>)
 80009e2:	fb03 f301 	mul.w	r3, r3, r1
 80009e6:	e000      	b.n	80009ea <HAL_RCC_ClockConfig+0x11a>
      sysclockfreq = HSE_VALUE;
 80009e8:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <HAL_RCC_ClockConfig+0x1a8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80009ea:	4a20      	ldr	r2, [pc, #128]	; (8000a6c <HAL_RCC_ClockConfig+0x19c>)
 80009ec:	4823      	ldr	r0, [pc, #140]	; (8000a7c <HAL_RCC_ClockConfig+0x1ac>)
 80009ee:	6852      	ldr	r2, [r2, #4]
 80009f0:	4923      	ldr	r1, [pc, #140]	; (8000a80 <HAL_RCC_ClockConfig+0x1b0>)
 80009f2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80009f6:	5c82      	ldrb	r2, [r0, r2]
  HAL_InitTick (TICK_INT_PRIORITY);
 80009f8:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80009fa:	40d3      	lsrs	r3, r2
 80009fc:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80009fe:	f7ff fba5 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000a02:	2000      	movs	r0, #0
}
 8000a04:	b006      	add	sp, #24
 8000a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a0a:	f7ff fbe1 	bl	80001d0 <HAL_GetTick>
 8000a0e:	1bc0      	subs	r0, r0, r7
 8000a10:	4540      	cmp	r0, r8
 8000a12:	d814      	bhi.n	8000a3e <HAL_RCC_ClockConfig+0x16e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a14:	686b      	ldr	r3, [r5, #4]
 8000a16:	f003 030c 	and.w	r3, r3, #12
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d1f5      	bne.n	8000a0a <HAL_RCC_ClockConfig+0x13a>
 8000a1e:	e79f      	b.n	8000960 <HAL_RCC_ClockConfig+0x90>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a20:	f7ff fbd6 	bl	80001d0 <HAL_GetTick>
 8000a24:	1bc0      	subs	r0, r0, r7
 8000a26:	4540      	cmp	r0, r8
 8000a28:	d809      	bhi.n	8000a3e <HAL_RCC_ClockConfig+0x16e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a2a:	686b      	ldr	r3, [r5, #4]
 8000a2c:	f003 030c 	and.w	r3, r3, #12
 8000a30:	2b08      	cmp	r3, #8
 8000a32:	d1f5      	bne.n	8000a20 <HAL_RCC_ClockConfig+0x150>
 8000a34:	e794      	b.n	8000960 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a36:	019d      	lsls	r5, r3, #6
 8000a38:	f53f af78 	bmi.w	800092c <HAL_RCC_ClockConfig+0x5c>
 8000a3c:	e7a0      	b.n	8000980 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000a3e:	2003      	movs	r0, #3
}
 8000a40:	b006      	add	sp, #24
 8000a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a46:	039f      	lsls	r7, r3, #14
 8000a48:	f53f af70 	bmi.w	800092c <HAL_RCC_ClockConfig+0x5c>
 8000a4c:	e798      	b.n	8000980 <HAL_RCC_ClockConfig+0xb0>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a4e:	6862      	ldr	r2, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_RCC_ClockConfig+0x1a8>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a52:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a56:	fb03 f301 	mul.w	r3, r3, r1
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a5a:	443a      	add	r2, r7
 8000a5c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a60:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a64:	e7c1      	b.n	80009ea <HAL_RCC_ClockConfig+0x11a>
 8000a66:	bf00      	nop
 8000a68:	40022000 	.word	0x40022000
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	08001d48 	.word	0x08001d48
 8000a74:	003d0900 	.word	0x003d0900
 8000a78:	007a1200 	.word	0x007a1200
 8000a7c:	08002adc 	.word	0x08002adc
 8000a80:	20000010 	.word	0x20000010

08000a84 <HAL_RCC_GetSysClockFreq>:
{
 8000a84:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a86:	2601      	movs	r6, #1
 8000a88:	2502      	movs	r5, #2
{
 8000a8a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_RCC_GetSysClockFreq+0x60>)
 8000a8e:	f10d 0e18 	add.w	lr, sp, #24
 8000a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a94:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8000a98:	4c13      	ldr	r4, [pc, #76]	; (8000ae8 <HAL_RCC_GetSysClockFreq+0x64>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a9a:	f88d 6004 	strb.w	r6, [sp, #4]
 8000a9e:	f88d 5005 	strb.w	r5, [sp, #5]
  tmpreg = RCC->CFGR;
 8000aa2:	6863      	ldr	r3, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000aa4:	f003 020c 	and.w	r2, r3, #12
 8000aa8:	2a08      	cmp	r2, #8
 8000aaa:	d10b      	bne.n	8000ac4 <HAL_RCC_GetSysClockFreq+0x40>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000aac:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000ab0:	4472      	add	r2, lr
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ab2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ab4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ab8:	d407      	bmi.n	8000aca <HAL_RCC_GetSysClockFreq+0x46>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <HAL_RCC_GetSysClockFreq+0x68>)
 8000abc:	fb00 f002 	mul.w	r0, r0, r2
}
 8000ac0:	b006      	add	sp, #24
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
      sysclockfreq = HSE_VALUE;
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <HAL_RCC_GetSysClockFreq+0x6c>)
}
 8000ac6:	b006      	add	sp, #24
 8000ac8:	bd70      	pop	{r4, r5, r6, pc}
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000aca:	6863      	ldr	r3, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ace:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ad2:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ad6:	4473      	add	r3, lr
 8000ad8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000adc:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000ae0:	b006      	add	sp, #24
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
 8000ae4:	08001d48 	.word	0x08001d48
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	003d0900 	.word	0x003d0900
 8000af0:	007a1200 	.word	0x007a1200

08000af4 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8000af4:	4b01      	ldr	r3, [pc, #4]	; (8000afc <HAL_RCC_GetHCLKFreq+0x8>)
}
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000010 	.word	0x20000010

08000b00 <AT24CXX_Read_Buffer>:
	HAL_Delay(5);/*Memory Programming Time approx 5ms*//*3ms for BL24CXX */
	return AT24CXX_OK;
}

uint8_t AT24CXX_Read_Buffer(uint16_t Address, uint8_t *buf, uint16_t len)
{
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	4605      	mov	r5, r0
 8000b04:	460c      	mov	r4, r1
 8000b06:	4616      	mov	r6, r2

	if (Soft_I2C_Start() == Soft_I2C_ERR)/*generate star condition*/
 8000b08:	f000 fa18 	bl	8000f3c <Soft_I2C_Start>
 8000b0c:	2801      	cmp	r0, #1
 8000b0e:	d025      	beq.n	8000b5c <AT24CXX_Read_Buffer+0x5c>
	{
		Soft_I2C_Stop();
		return AT24CXX_ERR;
	}

	if (Soft_I2C_Send_Byte(AT24CXX_EEPROM_ADDR + 0) == Soft_I2C_ERR)/*Send device address + write bit */
 8000b10:	20a6      	movs	r0, #166	; 0xa6
 8000b12:	f000 faa3 	bl	800105c <Soft_I2C_Send_Byte>
 8000b16:	2801      	cmp	r0, #1
 8000b18:	d01e      	beq.n	8000b58 <AT24CXX_Read_Buffer+0x58>
		if (Soft_I2C_Send_Byte((Address >> 8)) == Soft_I2C_ERR)
		{
			return AT24CXX_ERR;
		}
	}
	if (Soft_I2C_Send_Byte(Address) == Soft_I2C_ERR)/*send register address to write*/
 8000b1a:	b2e8      	uxtb	r0, r5
 8000b1c:	f000 fa9e 	bl	800105c <Soft_I2C_Send_Byte>
 8000b20:	2801      	cmp	r0, #1
 8000b22:	d019      	beq.n	8000b58 <AT24CXX_Read_Buffer+0x58>
	{
		return AT24CXX_ERR;
	}

	if (Soft_I2C_Start() == Soft_I2C_ERR) //repeated start
 8000b24:	f000 fa0a 	bl	8000f3c <Soft_I2C_Start>
 8000b28:	2801      	cmp	r0, #1
 8000b2a:	d017      	beq.n	8000b5c <AT24CXX_Read_Buffer+0x5c>
	{
		Soft_I2C_Stop();
		return AT24CXX_ERR;
	}

	if (Soft_I2C_Send_Byte(AT24CXX_EEPROM_ADDR + 1) == Soft_I2C_ERR) //read bit
 8000b2c:	20a7      	movs	r0, #167	; 0xa7
 8000b2e:	f000 fa95 	bl	800105c <Soft_I2C_Send_Byte>
 8000b32:	2801      	cmp	r0, #1
 8000b34:	d010      	beq.n	8000b58 <AT24CXX_Read_Buffer+0x58>
	{
		return AT24CXX_ERR;
	}

	while (len--)
 8000b36:	1e75      	subs	r5, r6, #1
 8000b38:	b2ad      	uxth	r5, r5
 8000b3a:	b14e      	cbz	r6, 8000b50 <AT24CXX_Read_Buffer+0x50>
 8000b3c:	4425      	add	r5, r4
 8000b3e:	3c01      	subs	r4, #1
	{
		*buf++ = Soft_I2C_Receive_Byte();
 8000b40:	f000 fb00 	bl	8001144 <Soft_I2C_Receive_Byte>
 8000b44:	f804 0f01 	strb.w	r0, [r4, #1]!

		if (len == 0)
 8000b48:	42ac      	cmp	r4, r5
 8000b4a:	d10b      	bne.n	8000b64 <AT24CXX_Read_Buffer+0x64>
		{
			Soft_I2C_NACK();
 8000b4c:	f000 fa64 	bl	8001018 <Soft_I2C_NACK>
		{
			Soft_I2C_ACK();
		}
	}

	Soft_I2C_Stop();
 8000b50:	f000 fa1e 	bl	8000f90 <Soft_I2C_Stop>

	return AT24CXX_OK;
 8000b54:	2000      	movs	r0, #0

}
 8000b56:	bd70      	pop	{r4, r5, r6, pc}
		return AT24CXX_ERR;
 8000b58:	2001      	movs	r0, #1
 8000b5a:	bd70      	pop	{r4, r5, r6, pc}
		Soft_I2C_Stop();
 8000b5c:	f000 fa18 	bl	8000f90 <Soft_I2C_Stop>
		return AT24CXX_ERR;
 8000b60:	2001      	movs	r0, #1
 8000b62:	bd70      	pop	{r4, r5, r6, pc}
			Soft_I2C_ACK();
 8000b64:	f000 fa36 	bl	8000fd4 <Soft_I2C_ACK>
 8000b68:	e7ea      	b.n	8000b40 <AT24CXX_Read_Buffer+0x40>
 8000b6a:	bf00      	nop

08000b6c <AT24CXX_Write_Buffer>:

/*this function can write any number of bytes in arbitary location*/
uint8_t AT24CXX_Write_Buffer(uint16_t Address, uint8_t *buf, uint16_t len)
{
 8000b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t index;
	uint16_t page_counter, byte_counter;

	byte_counter = (AT24CXX_PAGE_LENGTH - (Address % AT24CXX_PAGE_LENGTH));
 8000b70:	f000 0907 	and.w	r9, r0, #7
 8000b74:	f1c9 0908 	rsb	r9, r9, #8
 8000b78:	fa1f f989 	uxth.w	r9, r9
	if (len < byte_counter)
 8000b7c:	4591      	cmp	r9, r2
{
 8000b7e:	b083      	sub	sp, #12
	if (len < byte_counter)
 8000b80:	f200 8086 	bhi.w	8000c90 <AT24CXX_Write_Buffer+0x124>
 8000b84:	468a      	mov	sl, r1
 8000b86:	4616      	mov	r6, r2
 8000b88:	4680      	mov	r8, r0
	if (Soft_I2C_Start() == Soft_I2C_ERR)/*generate star condition*/
 8000b8a:	f000 f9d7 	bl	8000f3c <Soft_I2C_Start>
 8000b8e:	2801      	cmp	r0, #1
 8000b90:	d078      	beq.n	8000c84 <AT24CXX_Write_Buffer+0x118>
	if (Soft_I2C_Send_Byte(AT24CXX_EEPROM_ADDR + 0) == Soft_I2C_ERR)/*Send device address + write bit */
 8000b92:	20a6      	movs	r0, #166	; 0xa6
 8000b94:	f000 fa62 	bl	800105c <Soft_I2C_Send_Byte>
 8000b98:	2801      	cmp	r0, #1
 8000b9a:	d06f      	beq.n	8000c7c <AT24CXX_Write_Buffer+0x110>
	if (Soft_I2C_Send_Byte(Address) == Soft_I2C_ERR)/*send register address to write*/
 8000b9c:	fa5f f088 	uxtb.w	r0, r8
 8000ba0:	f000 fa5c 	bl	800105c <Soft_I2C_Send_Byte>
 8000ba4:	2801      	cmp	r0, #1
 8000ba6:	d069      	beq.n	8000c7c <AT24CXX_Write_Buffer+0x110>
 8000ba8:	4654      	mov	r4, sl
 8000baa:	eb0a 0509 	add.w	r5, sl, r9
 8000bae:	e005      	b.n	8000bbc <AT24CXX_Write_Buffer+0x50>
		if (Soft_I2C_Send_Byte(*buf++) == Soft_I2C_ERR)/*write data to address*/
 8000bb0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000bb4:	f000 fa52 	bl	800105c <Soft_I2C_Send_Byte>
 8000bb8:	2801      	cmp	r0, #1
 8000bba:	d05f      	beq.n	8000c7c <AT24CXX_Write_Buffer+0x110>
	while (len--)
 8000bbc:	42ac      	cmp	r4, r5
 8000bbe:	d1f7      	bne.n	8000bb0 <AT24CXX_Write_Buffer+0x44>
	if (AT24CXX_Write_Page(Address, buf, byte_counter) == AT24CXX_ERR)
	{
		return AT24CXX_ERR;
	}

	page_counter = ((len - byte_counter) / AT24CXX_PAGE_LENGTH);
 8000bc0:	eba6 0309 	sub.w	r3, r6, r9
 8000bc4:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	fa1f f78b 	uxth.w	r7, fp
	Soft_I2C_Stop();
 8000bce:	f000 f9df 	bl	8000f90 <Soft_I2C_Stop>
	HAL_Delay(5);/*Memory Programming Time approx 5ms*//*3ms for BL24CXX */
 8000bd2:	2005      	movs	r0, #5
 8000bd4:	f7ff fb02 	bl	80001dc <HAL_Delay>

	for (index = 0; index < (page_counter); index++)
 8000bd8:	2f00      	cmp	r7, #0
 8000bda:	d062      	beq.n	8000ca2 <AT24CXX_Write_Buffer+0x136>
 8000bdc:	2500      	movs	r5, #0
 8000bde:	44c8      	add	r8, r9
 8000be0:	fa1f f888 	uxth.w	r8, r8
	if (Soft_I2C_Start() == Soft_I2C_ERR)/*generate star condition*/
 8000be4:	f000 f9aa 	bl	8000f3c <Soft_I2C_Start>
 8000be8:	2801      	cmp	r0, #1
 8000bea:	d04b      	beq.n	8000c84 <AT24CXX_Write_Buffer+0x118>
	if (Soft_I2C_Send_Byte(AT24CXX_EEPROM_ADDR + 0) == Soft_I2C_ERR)/*Send device address + write bit */
 8000bec:	20a6      	movs	r0, #166	; 0xa6
 8000bee:	f000 fa35 	bl	800105c <Soft_I2C_Send_Byte>
 8000bf2:	2801      	cmp	r0, #1
 8000bf4:	d042      	beq.n	8000c7c <AT24CXX_Write_Buffer+0x110>
	if (Soft_I2C_Send_Byte(Address) == Soft_I2C_ERR)/*send register address to write*/
 8000bf6:	eb08 00c5 	add.w	r0, r8, r5, lsl #3
 8000bfa:	b2c0      	uxtb	r0, r0
 8000bfc:	f000 fa2e 	bl	800105c <Soft_I2C_Send_Byte>
 8000c00:	2801      	cmp	r0, #1
 8000c02:	d03b      	beq.n	8000c7c <AT24CXX_Write_Buffer+0x110>
	{
		if (AT24CXX_Write_Page(
 8000c04:	4626      	mov	r6, r4
 8000c06:	3408      	adds	r4, #8
		if (Soft_I2C_Send_Byte(*buf++) == Soft_I2C_ERR)/*write data to address*/
 8000c08:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000c0c:	f000 fa26 	bl	800105c <Soft_I2C_Send_Byte>
 8000c10:	2801      	cmp	r0, #1
 8000c12:	d033      	beq.n	8000c7c <AT24CXX_Write_Buffer+0x110>
	while (len--)
 8000c14:	42a6      	cmp	r6, r4
 8000c16:	d1f7      	bne.n	8000c08 <AT24CXX_Write_Buffer+0x9c>
	Soft_I2C_Stop();
 8000c18:	f000 f9ba 	bl	8000f90 <Soft_I2C_Stop>
 8000c1c:	3501      	adds	r5, #1
	HAL_Delay(5);/*Memory Programming Time approx 5ms*//*3ms for BL24CXX */
 8000c1e:	2005      	movs	r0, #5
 8000c20:	f7ff fadc 	bl	80001dc <HAL_Delay>
	for (index = 0; index < (page_counter); index++)
 8000c24:	b2ab      	uxth	r3, r5
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d8dc      	bhi.n	8000be4 <AT24CXX_Write_Buffer+0x78>
			return AT24CXX_ERR;
		}
	}

	if (AT24CXX_Write_Page(
			(Address + byte_counter + (page_counter * AT24CXX_PAGE_LENGTH)),
 8000c2a:	00fd      	lsls	r5, r7, #3
	if (AT24CXX_Write_Page(
 8000c2c:	9b01      	ldr	r3, [sp, #4]
			(Address + byte_counter + (page_counter * AT24CXX_PAGE_LENGTH)),
 8000c2e:	b2ad      	uxth	r5, r5
	if (AT24CXX_Write_Page(
 8000c30:	1b58      	subs	r0, r3, r5
 8000c32:	b284      	uxth	r4, r0
	if (len == 0u)
 8000c34:	b36c      	cbz	r4, 8000c92 <AT24CXX_Write_Buffer+0x126>
	if (Soft_I2C_Start() == Soft_I2C_ERR)/*generate star condition*/
 8000c36:	f000 f981 	bl	8000f3c <Soft_I2C_Start>
 8000c3a:	2801      	cmp	r0, #1
 8000c3c:	d022      	beq.n	8000c84 <AT24CXX_Write_Buffer+0x118>
	if (Soft_I2C_Send_Byte(AT24CXX_EEPROM_ADDR + 0) == Soft_I2C_ERR)/*Send device address + write bit */
 8000c3e:	20a6      	movs	r0, #166	; 0xa6
 8000c40:	f000 fa0c 	bl	800105c <Soft_I2C_Send_Byte>
 8000c44:	2801      	cmp	r0, #1
 8000c46:	d019      	beq.n	8000c7c <AT24CXX_Write_Buffer+0x110>
	if (AT24CXX_Write_Page(
 8000c48:	eb05 0008 	add.w	r0, r5, r8
	if (Soft_I2C_Send_Byte(Address) == Soft_I2C_ERR)/*send register address to write*/
 8000c4c:	b2c0      	uxtb	r0, r0
 8000c4e:	f000 fa05 	bl	800105c <Soft_I2C_Send_Byte>
 8000c52:	2801      	cmp	r0, #1
 8000c54:	d012      	beq.n	8000c7c <AT24CXX_Write_Buffer+0x110>
			(buf + byte_counter + (page_counter * AT24CXX_PAGE_LENGTH)),
 8000c56:	fa1f fb8b 	uxth.w	fp, fp
 8000c5a:	eb09 09cb 	add.w	r9, r9, fp, lsl #3
	while (len--)
 8000c5e:	3c01      	subs	r4, #1
	if (AT24CXX_Write_Page(
 8000c60:	44d1      	add	r9, sl
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	444c      	add	r4, r9
 8000c66:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8000c6a:	e001      	b.n	8000c70 <AT24CXX_Write_Buffer+0x104>
	while (len--)
 8000c6c:	45a1      	cmp	r9, r4
 8000c6e:	d012      	beq.n	8000c96 <AT24CXX_Write_Buffer+0x12a>
		if (Soft_I2C_Send_Byte(*buf++) == Soft_I2C_ERR)/*write data to address*/
 8000c70:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 8000c74:	f000 f9f2 	bl	800105c <Soft_I2C_Send_Byte>
 8000c78:	2801      	cmp	r0, #1
 8000c7a:	d1f7      	bne.n	8000c6c <AT24CXX_Write_Buffer+0x100>
		return AT24CXX_ERR;
 8000c7c:	2001      	movs	r0, #1
			(len - byte_counter - (page_counter * AT24CXX_PAGE_LENGTH))) == AT24CXX_ERR)
	{
		return AT24CXX_ERR;
	}
	return AT24CXX_OK;
}
 8000c7e:	b003      	add	sp, #12
 8000c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Soft_I2C_Stop();
 8000c84:	f000 f984 	bl	8000f90 <Soft_I2C_Stop>
		return AT24CXX_ERR;
 8000c88:	2001      	movs	r0, #1
}
 8000c8a:	b003      	add	sp, #12
 8000c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (len == 0u)
 8000c90:	b95a      	cbnz	r2, 8000caa <AT24CXX_Write_Buffer+0x13e>
	return AT24CXX_OK;
 8000c92:	2000      	movs	r0, #0
 8000c94:	e7f9      	b.n	8000c8a <AT24CXX_Write_Buffer+0x11e>
	Soft_I2C_Stop();
 8000c96:	f000 f97b 	bl	8000f90 <Soft_I2C_Stop>
	HAL_Delay(5);/*Memory Programming Time approx 5ms*//*3ms for BL24CXX */
 8000c9a:	2005      	movs	r0, #5
 8000c9c:	f7ff fa9e 	bl	80001dc <HAL_Delay>
 8000ca0:	e7f7      	b.n	8000c92 <AT24CXX_Write_Buffer+0x126>
 8000ca2:	44c8      	add	r8, r9
 8000ca4:	fa1f f888 	uxth.w	r8, r8
 8000ca8:	e7bf      	b.n	8000c2a <AT24CXX_Write_Buffer+0xbe>
	if (len == 0u)
 8000caa:	4691      	mov	r9, r2
 8000cac:	e76a      	b.n	8000b84 <AT24CXX_Write_Buffer+0x18>
 8000cae:	bf00      	nop

08000cb0 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_GPIO_Init+0x40>)
{
 8000cb2:	b084      	sub	sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	699a      	ldr	r2, [r3, #24]
 8000cb6:	f042 0210 	orr.w	r2, r2, #16
 8000cba:	619a      	str	r2, [r3, #24]
 8000cbc:	699a      	ldr	r2, [r3, #24]
 8000cbe:	f002 0210 	and.w	r2, r2, #16
 8000cc2:	9201      	str	r2, [sp, #4]
 8000cc4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	699a      	ldr	r2, [r3, #24]
 8000cc8:	f042 0220 	orr.w	r2, r2, #32
 8000ccc:	619a      	str	r2, [r3, #24]
 8000cce:	699a      	ldr	r2, [r3, #24]
 8000cd0:	f002 0220 	and.w	r2, r2, #32
 8000cd4:	9202      	str	r2, [sp, #8]
 8000cd6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	699a      	ldr	r2, [r3, #24]
 8000cda:	f042 0204 	orr.w	r2, r2, #4
 8000cde:	619a      	str	r2, [r3, #24]
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	9303      	str	r3, [sp, #12]
 8000ce8:	9b03      	ldr	r3, [sp, #12]

}
 8000cea:	b004      	add	sp, #16
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000cf4:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf6:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cfc:	2500      	movs	r5, #0
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d00:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 8000d04:	b091      	sub	sp, #68	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d06:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d08:	9206      	str	r2, [sp, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0a:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0c:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0e:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d10:	9508      	str	r5, [sp, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d12:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d14:	910f      	str	r1, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d16:	f7ff fbef 	bl	80004f8 <HAL_RCC_OscConfig>
 8000d1a:	b100      	cbz	r0, 8000d1e <SystemClock_Config+0x2a>
 8000d1c:	e7fe      	b.n	8000d1c <SystemClock_Config+0x28>
 8000d1e:	4603      	mov	r3, r0
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d20:	f44f 6280 	mov.w	r2, #1024	; 0x400
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d24:	250f      	movs	r5, #15
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d26:	4621      	mov	r1, r4
 8000d28:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2c:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2e:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d30:	9501      	str	r5, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d32:	9204      	str	r2, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d34:	f7ff fdcc 	bl	80008d0 <HAL_RCC_ClockConfig>
 8000d38:	4604      	mov	r4, r0
 8000d3a:	b100      	cbz	r0, 8000d3e <SystemClock_Config+0x4a>
 8000d3c:	e7fe      	b.n	8000d3c <SystemClock_Config+0x48>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000d3e:	f7ff fed9 	bl	8000af4 <HAL_RCC_GetHCLKFreq>
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <SystemClock_Config+0x70>)
 8000d44:	fba3 3000 	umull	r3, r0, r3, r0
 8000d48:	0980      	lsrs	r0, r0, #6
 8000d4a:	f7ff faa1 	bl	8000290 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000d4e:	2004      	movs	r0, #4
 8000d50:	f7ff fab6 	bl	80002c0 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000d54:	4622      	mov	r2, r4
 8000d56:	4621      	mov	r1, r4
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d5c:	f7ff fa62 	bl	8000224 <HAL_NVIC_SetPriority>
}
 8000d60:	b011      	add	sp, #68	; 0x44
 8000d62:	bd30      	pop	{r4, r5, pc}
 8000d64:	10624dd3 	.word	0x10624dd3

08000d68 <main>:
{
 8000d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d6c:	b082      	sub	sp, #8
	HAL_Init();
 8000d6e:	f7ff fa11 	bl	8000194 <HAL_Init>
	ssd1306_Init();
 8000d72:	2500      	movs	r5, #0
	SystemClock_Config();
 8000d74:	f7ff ffbe 	bl	8000cf4 <SystemClock_Config>
 8000d78:	4c41      	ldr	r4, [pc, #260]	; (8000e80 <main+0x118>)
	MX_GPIO_Init();
 8000d7a:	f7ff ff99 	bl	8000cb0 <MX_GPIO_Init>
			ssd1306_WriteString("NO:", Font_11x18, White);
 8000d7e:	4e41      	ldr	r6, [pc, #260]	; (8000e84 <main+0x11c>)
	Soft_I2C_Init();
 8000d80:	f000 f890 	bl	8000ea4 <Soft_I2C_Init>
			ssd1306_WriteString("At:", Font_11x18, White);
 8000d84:	4f40      	ldr	r7, [pc, #256]	; (8000e88 <main+0x120>)
	ssd1306_Init();
 8000d86:	f000 fbb7 	bl	80014f8 <ssd1306_Init>
 8000d8a:	e017      	b.n	8000dbc <main+0x54>
			ssd1306_SetCursor(0, 30);
 8000d8c:	211e      	movs	r1, #30
 8000d8e:	f000 fe95 	bl	8001abc <ssd1306_SetCursor>
			ssd1306_WriteString("At:", Font_11x18, White);
 8000d92:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000d96:	2301      	movs	r3, #1
 8000d98:	4638      	mov	r0, r7
			ssd1306_WriteString("NO:", Font_11x18, White);
 8000d9a:	f000 fe73 	bl	8001a84 <ssd1306_WriteString>
			ssd1306_WriteString(temp, Font_11x18, White);
 8000d9e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000da2:	2301      	movs	r3, #1
 8000da4:	4668      	mov	r0, sp
 8000da6:	f000 fe6d 	bl	8001a84 <ssd1306_WriteString>
 8000daa:	3502      	adds	r5, #2
			ssd1306_UpdateScreen();
 8000dac:	f000 fb52 	bl	8001454 <ssd1306_UpdateScreen>
			HAL_Delay(10);
 8000db0:	200a      	movs	r0, #10
 8000db2:	f7ff fa13 	bl	80001dc <HAL_Delay>
	for (uint16_t i = 0; i < 128; i++)
 8000db6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000dba:	d012      	beq.n	8000de2 <main+0x7a>
		itoa(i<<1 ,temp, 16);
 8000dbc:	2210      	movs	r2, #16
 8000dbe:	4669      	mov	r1, sp
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	f000 ff6b 	bl	8001c9c <itoa>
		if(Soft_I2C_Scan(i<<1)==Soft_I2C_OK)
 8000dc6:	b2e8      	uxtb	r0, r5
 8000dc8:	f000 fadc 	bl	8001384 <Soft_I2C_Scan>
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	d0dd      	beq.n	8000d8c <main+0x24>
			ssd1306_SetCursor(0, 0);
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	f000 fe72 	bl	8001abc <ssd1306_SetCursor>
			ssd1306_WriteString("NO:", Font_11x18, White);
 8000dd8:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000ddc:	2301      	movs	r3, #1
 8000dde:	4630      	mov	r0, r6
 8000de0:	e7db      	b.n	8000d9a <main+0x32>
 8000de2:	4e2a      	ldr	r6, [pc, #168]	; (8000e8c <main+0x124>)
	ssd1306_Init();
 8000de4:	2500      	movs	r5, #0
 8000de6:	4633      	mov	r3, r6
		write_buffer[i]=i;
 8000de8:	f803 5f01 	strb.w	r5, [r3, #1]!
 8000dec:	3501      	adds	r5, #1
	for (uint16_t i = 0; i <= 255; i++)
 8000dee:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000df2:	d1f9      	bne.n	8000de8 <main+0x80>
 8000df4:	4f26      	ldr	r7, [pc, #152]	; (8000e90 <main+0x128>)
	AT24CXX_Write_Buffer(0x00,write_buffer,256);
 8000df6:	462a      	mov	r2, r5
 8000df8:	4926      	ldr	r1, [pc, #152]	; (8000e94 <main+0x12c>)
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff feb6 	bl	8000b6c <AT24CXX_Write_Buffer>
	AT24CXX_Read_Buffer(0x00,compare_buffer,256);
 8000e00:	462a      	mov	r2, r5
 8000e02:	4639      	mov	r1, r7
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff fe7b 	bl	8000b00 <AT24CXX_Read_Buffer>
 8000e0a:	463d      	mov	r5, r7
			ssd1306_WriteString("OK:", Font_11x18, White);
 8000e0c:	f8df a088 	ldr.w	sl, [pc, #136]	; 8000e98 <main+0x130>
			ssd1306_WriteString("Error:", Font_11x18, White);
 8000e10:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8000e9c <main+0x134>
 8000e14:	f507 7880 	add.w	r8, r7, #256	; 0x100
		itoa(i, temp, 10);
 8000e18:	220a      	movs	r2, #10
 8000e1a:	4669      	mov	r1, sp
 8000e1c:	1be8      	subs	r0, r5, r7
 8000e1e:	f000 ff3d 	bl	8001c9c <itoa>
		if(write_buffer[i]!=compare_buffer[i])
 8000e22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000e26:	f816 2f01 	ldrb.w	r2, [r6, #1]!
			ssd1306_SetCursor(0, 30);
 8000e2a:	211e      	movs	r1, #30
		if(write_buffer[i]!=compare_buffer[i])
 8000e2c:	429a      	cmp	r2, r3
			ssd1306_SetCursor(0, 30);
 8000e2e:	f04f 0000 	mov.w	r0, #0
		if(write_buffer[i]!=compare_buffer[i])
 8000e32:	d012      	beq.n	8000e5a <main+0xf2>
			ssd1306_SetCursor(0, 30);
 8000e34:	f000 fe42 	bl	8001abc <ssd1306_SetCursor>
			ssd1306_WriteString("Error:", Font_11x18, White);
 8000e38:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	4648      	mov	r0, r9
 8000e40:	f000 fe20 	bl	8001a84 <ssd1306_WriteString>
			ssd1306_WriteString(temp, Font_11x18, White);
 8000e44:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000e48:	2301      	movs	r3, #1
 8000e4a:	4668      	mov	r0, sp
 8000e4c:	f000 fe1a 	bl	8001a84 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000e50:	f000 fb00 	bl	8001454 <ssd1306_UpdateScreen>
	for(uint16_t i=0;i<=255;i++)
 8000e54:	4545      	cmp	r5, r8
 8000e56:	d1df      	bne.n	8000e18 <main+0xb0>
 8000e58:	e7fe      	b.n	8000e58 <main+0xf0>
			ssd1306_SetCursor(0, 30);
 8000e5a:	f000 fe2f 	bl	8001abc <ssd1306_SetCursor>
			ssd1306_WriteString("OK:", Font_11x18, White);
 8000e5e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000e62:	2301      	movs	r3, #1
 8000e64:	4650      	mov	r0, sl
 8000e66:	f000 fe0d 	bl	8001a84 <ssd1306_WriteString>
			ssd1306_WriteString(temp, Font_11x18, White);
 8000e6a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000e6e:	2301      	movs	r3, #1
 8000e70:	4668      	mov	r0, sp
 8000e72:	f000 fe07 	bl	8001a84 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000e76:	f000 faed 	bl	8001454 <ssd1306_UpdateScreen>
	for(uint16_t i=0;i<=255;i++)
 8000e7a:	4545      	cmp	r5, r8
 8000e7c:	d1cc      	bne.n	8000e18 <main+0xb0>
 8000e7e:	e7eb      	b.n	8000e58 <main+0xf0>
 8000e80:	20000008 	.word	0x20000008
 8000e84:	08002ab8 	.word	0x08002ab8
 8000e88:	08002ab4 	.word	0x08002ab4
 8000e8c:	2000043b 	.word	0x2000043b
 8000e90:	2000053c 	.word	0x2000053c
 8000e94:	2000043c 	.word	0x2000043c
 8000e98:	08002ac4 	.word	0x08002ac4
 8000e9c:	08002abc 	.word	0x08002abc

08000ea0 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8000ea0:	e7fe      	b.n	8000ea0 <_Error_Handler>
 8000ea2:	bf00      	nop

08000ea4 <Soft_I2C_Init>:
void Soft_I2C_Init(void)
{
	GPIO_InitTypeDef GPIO_Init;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <Soft_I2C_Init+0x90>)
{
 8000ea6:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000ea8:	699a      	ldr	r2, [r3, #24]
{
 8000eaa:	b088      	sub	sp, #32
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000eac:	f042 0210 	orr.w	r2, r2, #16
 8000eb0:	619a      	str	r2, [r3, #24]
 8000eb2:	6999      	ldr	r1, [r3, #24]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;
	SDA_High();
 8000eb4:	4c20      	ldr	r4, [pc, #128]	; (8000f38 <Soft_I2C_Init+0x94>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000eb6:	f001 0110 	and.w	r1, r1, #16
 8000eba:	9100      	str	r1, [sp, #0]
 8000ebc:	9900      	ldr	r1, [sp, #0]
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000ebe:	699d      	ldr	r5, [r3, #24]
	SDA_High();
 8000ec0:	4620      	mov	r0, r4
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000ec2:	f045 0520 	orr.w	r5, r5, #32
 8000ec6:	619d      	str	r5, [r3, #24]
 8000ec8:	699e      	ldr	r6, [r3, #24]
	SDA_High();
 8000eca:	2201      	movs	r2, #1
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000ecc:	f006 0620 	and.w	r6, r6, #32
 8000ed0:	9601      	str	r6, [sp, #4]
 8000ed2:	9e01      	ldr	r6, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000ed4:	699e      	ldr	r6, [r3, #24]
	SDA_High();
 8000ed6:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000ed8:	f046 0604 	orr.w	r6, r6, #4
 8000edc:	619e      	str	r6, [r3, #24]
 8000ede:	699e      	ldr	r6, [r3, #24]

	GPIO_Init.Mode = GPIO_MODE_OUTPUT_OD;
	GPIO_Init.Pull = GPIO_PULLUP;
	GPIO_Init.Speed = GPIO_SPEED_FREQ_MEDIUM;

	GPIO_Init.Pin = Soft_I2C_SDA_Pin;
 8000ee0:	ad08      	add	r5, sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000ee2:	f006 0604 	and.w	r6, r6, #4
 8000ee6:	9602      	str	r6, [sp, #8]
 8000ee8:	9e02      	ldr	r6, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8000eea:	699e      	ldr	r6, [r3, #24]
 8000eec:	f046 0608 	orr.w	r6, r6, #8
 8000ef0:	619e      	str	r6, [r3, #24]
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0308 	and.w	r3, r3, #8
 8000ef8:	9303      	str	r3, [sp, #12]
 8000efa:	9b03      	ldr	r3, [sp, #12]
	SDA_High();
 8000efc:	f7ff faf8 	bl	80004f0 <HAL_GPIO_WritePin>
	SCL_High();
 8000f00:	4620      	mov	r0, r4
 8000f02:	2201      	movs	r2, #1
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	f7ff faf3 	bl	80004f0 <HAL_GPIO_WritePin>
	GPIO_Init.Pin = Soft_I2C_SDA_Pin;
 8000f0a:	2180      	movs	r1, #128	; 0x80
	GPIO_Init.Mode = GPIO_MODE_OUTPUT_OD;
 8000f0c:	2211      	movs	r2, #17
	GPIO_Init.Pull = GPIO_PULLUP;
 8000f0e:	2301      	movs	r3, #1
	GPIO_Init.Pin = Soft_I2C_SDA_Pin;
 8000f10:	f845 1d10 	str.w	r1, [r5, #-16]!
	HAL_GPIO_Init(Soft_I2C_SDA_Port, &GPIO_Init);
 8000f14:	4629      	mov	r1, r5
 8000f16:	4620      	mov	r0, r4
	GPIO_Init.Mode = GPIO_MODE_OUTPUT_OD;
 8000f18:	9205      	str	r2, [sp, #20]
	GPIO_Init.Pull = GPIO_PULLUP;
 8000f1a:	9306      	str	r3, [sp, #24]
	GPIO_Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f1c:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(Soft_I2C_SDA_Port, &GPIO_Init);
 8000f1e:	f7ff f9e1 	bl	80002e4 <HAL_GPIO_Init>

	GPIO_Init.Pin = Soft_I2C_SCL_Pin;
 8000f22:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(Soft_I2C_SCL_Port, &GPIO_Init);
 8000f24:	4629      	mov	r1, r5
 8000f26:	4620      	mov	r0, r4
	GPIO_Init.Pin = Soft_I2C_SCL_Pin;
 8000f28:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(Soft_I2C_SCL_Port, &GPIO_Init);
 8000f2a:	f7ff f9db 	bl	80002e4 <HAL_GPIO_Init>
}
 8000f2e:	b008      	add	sp, #32
 8000f30:	bd70      	pop	{r4, r5, r6, pc}
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010c00 	.word	0x40010c00

08000f3c <Soft_I2C_Start>:

uint8_t Soft_I2C_Start(void)
{
 8000f3c:	b510      	push	{r4, lr}
	SDA_High();
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	4812      	ldr	r0, [pc, #72]	; (8000f8c <Soft_I2C_Start+0x50>)
 8000f44:	f7ff fad4 	bl	80004f0 <HAL_GPIO_WritePin>

void Soft_I2C_Delay()
{
	//approx 275khz scl clock on 72Mhz

	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000f48:	f7ff fd9c 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 8000f4c:	2140      	movs	r1, #64	; 0x40
 8000f4e:	2201      	movs	r2, #1
 8000f50:	480e      	ldr	r0, [pc, #56]	; (8000f8c <Soft_I2C_Start+0x50>)
 8000f52:	f7ff facd 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000f56:	f7ff fd95 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	if (!SDA_Read())
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <Soft_I2C_Start+0x50>)
 8000f5e:	f7ff fac1 	bl	80004e4 <HAL_GPIO_ReadPin>
 8000f62:	b908      	cbnz	r0, 8000f68 <Soft_I2C_Start+0x2c>
		return Soft_I2C_ERR;
 8000f64:	2001      	movs	r0, #1
 8000f66:	bd10      	pop	{r4, pc}
	SDA_Low();
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <Soft_I2C_Start+0x50>)
 8000f6e:	f7ff fabf 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000f72:	f7ff fd87 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	if (SDA_Read())
 8000f76:	2180      	movs	r1, #128	; 0x80
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <Soft_I2C_Start+0x50>)
 8000f7a:	f7ff fab3 	bl	80004e4 <HAL_GPIO_ReadPin>
 8000f7e:	4604      	mov	r4, r0
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d1ef      	bne.n	8000f64 <Soft_I2C_Start+0x28>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000f84:	f7ff fd7e 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	return Soft_I2C_OK;
 8000f88:	4620      	mov	r0, r4
}
 8000f8a:	bd10      	pop	{r4, pc}
 8000f8c:	40010c00 	.word	0x40010c00

08000f90 <Soft_I2C_Stop>:
{
 8000f90:	b510      	push	{r4, lr}
	SCL_Low();
 8000f92:	4c0f      	ldr	r4, [pc, #60]	; (8000fd0 <Soft_I2C_Stop+0x40>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	4620      	mov	r0, r4
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	f7ff faa9 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000f9e:	f7ff fd71 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_Low();
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	f7ff faa2 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000fac:	f7ff fd6a 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2140      	movs	r1, #64	; 0x40
 8000fb6:	f7ff fa9b 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000fba:	f7ff fd63 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_High();
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	f7ff fa94 	bl	80004f0 <HAL_GPIO_WritePin>
}
 8000fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000fcc:	f7ff bd5a 	b.w	8000a84 <HAL_RCC_GetSysClockFreq>
 8000fd0:	40010c00 	.word	0x40010c00

08000fd4 <Soft_I2C_ACK>:
{
 8000fd4:	b510      	push	{r4, lr}
	SCL_Low();
 8000fd6:	4c0f      	ldr	r4, [pc, #60]	; (8001014 <Soft_I2C_ACK+0x40>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4620      	mov	r0, r4
 8000fdc:	2140      	movs	r1, #64	; 0x40
 8000fde:	f7ff fa87 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000fe2:	f7ff fd4f 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_Low();
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	f7ff fa80 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000ff0:	f7ff fd48 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2140      	movs	r1, #64	; 0x40
 8000ffa:	f7ff fa79 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000ffe:	f7ff fd41 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_Low();
 8001002:	4620      	mov	r0, r4
 8001004:	2200      	movs	r2, #0
 8001006:	2140      	movs	r1, #64	; 0x40
 8001008:	f7ff fa72 	bl	80004f0 <HAL_GPIO_WritePin>
}
 800100c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001010:	f7ff bd38 	b.w	8000a84 <HAL_RCC_GetSysClockFreq>
 8001014:	40010c00 	.word	0x40010c00

08001018 <Soft_I2C_NACK>:
{
 8001018:	b510      	push	{r4, lr}
	SCL_Low();
 800101a:	4c0f      	ldr	r4, [pc, #60]	; (8001058 <Soft_I2C_NACK+0x40>)
 800101c:	2200      	movs	r2, #0
 800101e:	4620      	mov	r0, r4
 8001020:	2140      	movs	r1, #64	; 0x40
 8001022:	f7ff fa65 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001026:	f7ff fd2d 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_High();
 800102a:	4620      	mov	r0, r4
 800102c:	2201      	movs	r2, #1
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	f7ff fa5e 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001034:	f7ff fd26 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 8001038:	4620      	mov	r0, r4
 800103a:	2201      	movs	r2, #1
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	f7ff fa57 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001042:	f7ff fd1f 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_Low();
 8001046:	4620      	mov	r0, r4
 8001048:	2200      	movs	r2, #0
 800104a:	2140      	movs	r1, #64	; 0x40
 800104c:	f7ff fa50 	bl	80004f0 <HAL_GPIO_WritePin>
}
 8001050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001054:	f7ff bd16 	b.w	8000a84 <HAL_RCC_GetSysClockFreq>
 8001058:	40010c00 	.word	0x40010c00

0800105c <Soft_I2C_Send_Byte>:
{
 800105c:	b570      	push	{r4, r5, r6, lr}
	SCL_Low();
 800105e:	2200      	movs	r2, #0
 8001060:	2140      	movs	r1, #64	; 0x40
{
 8001062:	4604      	mov	r4, r0
	SCL_Low();
 8001064:	4836      	ldr	r0, [pc, #216]	; (8001140 <Soft_I2C_Send_Byte+0xe4>)
 8001066:	f7ff fa43 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800106a:	2508      	movs	r5, #8
 800106c:	f7ff fd0a 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
			SDA_Low();
 8001070:	4e33      	ldr	r6, [pc, #204]	; (8001140 <Soft_I2C_Send_Byte+0xe4>)
		if (byte & 0x80)
 8001072:	0623      	lsls	r3, r4, #24
			SDA_High();
 8001074:	bf4c      	ite	mi
 8001076:	2201      	movmi	r2, #1
			SDA_Low();
 8001078:	2200      	movpl	r2, #0
 800107a:	2180      	movs	r1, #128	; 0x80
 800107c:	4630      	mov	r0, r6
 800107e:	f7ff fa37 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001082:	f7ff fcff 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
		SCL_High();
 8001086:	2201      	movs	r2, #1
 8001088:	2140      	movs	r1, #64	; 0x40
 800108a:	4630      	mov	r0, r6
 800108c:	f7ff fa30 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001090:	f7ff fcf8 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
		SCL_Low();
 8001094:	2200      	movs	r2, #0
 8001096:	2140      	movs	r1, #64	; 0x40
 8001098:	4630      	mov	r0, r6
 800109a:	f7ff fa29 	bl	80004f0 <HAL_GPIO_WritePin>
 800109e:	1e6b      	subs	r3, r5, #1
		byte <<= 1;
 80010a0:	0064      	lsls	r4, r4, #1
	while (count--)
 80010a2:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
		byte <<= 1;
 80010a6:	b2e4      	uxtb	r4, r4
	while (count--)
 80010a8:	d1e3      	bne.n	8001072 <Soft_I2C_Send_Byte+0x16>
	SCL_Low();
 80010aa:	2200      	movs	r2, #0
 80010ac:	2140      	movs	r1, #64	; 0x40
 80010ae:	4824      	ldr	r0, [pc, #144]	; (8001140 <Soft_I2C_Send_Byte+0xe4>)
 80010b0:	f7ff fa1e 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80010b4:	f7ff fce6 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_High();
 80010b8:	2201      	movs	r2, #1
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	4820      	ldr	r0, [pc, #128]	; (8001140 <Soft_I2C_Send_Byte+0xe4>)
 80010be:	f7ff fa17 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80010c2:	f7ff fcdf 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 80010c6:	2201      	movs	r2, #1
 80010c8:	2140      	movs	r1, #64	; 0x40
 80010ca:	481d      	ldr	r0, [pc, #116]	; (8001140 <Soft_I2C_Send_Byte+0xe4>)
 80010cc:	f7ff fa10 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80010d0:	f241 3488 	movw	r4, #5000	; 0x1388
 80010d4:	f7ff fcd6 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	while (SDA_Read())
 80010d8:	4e19      	ldr	r6, [pc, #100]	; (8001140 <Soft_I2C_Send_Byte+0xe4>)
 80010da:	e000      	b.n	80010de <Soft_I2C_Send_Byte+0x82>
		if (timeOut == 0)
 80010dc:	b18c      	cbz	r4, 8001102 <Soft_I2C_Send_Byte+0xa6>
	while (SDA_Read())
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	4630      	mov	r0, r6
 80010e2:	f7ff f9ff 	bl	80004e4 <HAL_GPIO_ReadPin>
 80010e6:	3c01      	subs	r4, #1
 80010e8:	4605      	mov	r5, r0
 80010ea:	b2a4      	uxth	r4, r4
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d1f5      	bne.n	80010dc <Soft_I2C_Send_Byte+0x80>
	SCL_Low();
 80010f0:	4602      	mov	r2, r0
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	4812      	ldr	r0, [pc, #72]	; (8001140 <Soft_I2C_Send_Byte+0xe4>)
 80010f6:	f7ff f9fb 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80010fa:	f7ff fcc3 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	return Soft_I2C_OK;
 80010fe:	4628      	mov	r0, r5
}
 8001100:	bd70      	pop	{r4, r5, r6, pc}
	SCL_Low();
 8001102:	4622      	mov	r2, r4
 8001104:	2140      	movs	r1, #64	; 0x40
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <Soft_I2C_Send_Byte+0xe4>)
 8001108:	f7ff f9f2 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800110c:	f7ff fcba 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_Low();
 8001110:	4622      	mov	r2, r4
 8001112:	2180      	movs	r1, #128	; 0x80
 8001114:	480a      	ldr	r0, [pc, #40]	; (8001140 <Soft_I2C_Send_Byte+0xe4>)
 8001116:	f7ff f9eb 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800111a:	f7ff fcb3 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 800111e:	2201      	movs	r2, #1
 8001120:	2140      	movs	r1, #64	; 0x40
 8001122:	4807      	ldr	r0, [pc, #28]	; (8001140 <Soft_I2C_Send_Byte+0xe4>)
 8001124:	f7ff f9e4 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001128:	f7ff fcac 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_High();
 800112c:	2201      	movs	r2, #1
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <Soft_I2C_Send_Byte+0xe4>)
 8001132:	f7ff f9dd 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001136:	f7ff fca5 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
		return Soft_I2C_ERR;
 800113a:	2001      	movs	r0, #1
 800113c:	bd70      	pop	{r4, r5, r6, pc}
 800113e:	bf00      	nop
 8001140:	40010c00 	.word	0x40010c00

08001144 <Soft_I2C_Receive_Byte>:
{
 8001144:	b570      	push	{r4, r5, r6, lr}
	SDA_High();
 8001146:	2201      	movs	r2, #1
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	4814      	ldr	r0, [pc, #80]	; (800119c <Soft_I2C_Receive_Byte+0x58>)
 800114c:	f7ff f9d0 	bl	80004f0 <HAL_GPIO_WritePin>
 8001150:	2408      	movs	r4, #8
	uint8_t ReceivedByte = 0;
 8001152:	2500      	movs	r5, #0
		SCL_Low();
 8001154:	4e11      	ldr	r6, [pc, #68]	; (800119c <Soft_I2C_Receive_Byte+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	4630      	mov	r0, r6
 800115c:	f7ff f9c8 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001160:	f7ff fc90 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
		SCL_High();
 8001164:	2201      	movs	r2, #1
 8001166:	2140      	movs	r1, #64	; 0x40
 8001168:	4630      	mov	r0, r6
 800116a:	f7ff f9c1 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800116e:	f7ff fc89 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
		if (SDA_Read())
 8001172:	2180      	movs	r1, #128	; 0x80
 8001174:	4630      	mov	r0, r6
 8001176:	f7ff f9b5 	bl	80004e4 <HAL_GPIO_ReadPin>
		ReceivedByte <<= 1;
 800117a:	006d      	lsls	r5, r5, #1
 800117c:	b2ed      	uxtb	r5, r5
 800117e:	1e62      	subs	r2, r4, #1
		if (SDA_Read())
 8001180:	b108      	cbz	r0, 8001186 <Soft_I2C_Receive_Byte+0x42>
			ReceivedByte |= 0x01;
 8001182:	f045 0501 	orr.w	r5, r5, #1
	while (i--)
 8001186:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
 800118a:	d1e4      	bne.n	8001156 <Soft_I2C_Receive_Byte+0x12>
	SCL_Low();
 800118c:	4622      	mov	r2, r4
 800118e:	2140      	movs	r1, #64	; 0x40
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <Soft_I2C_Receive_Byte+0x58>)
 8001192:	f7ff f9ad 	bl	80004f0 <HAL_GPIO_WritePin>
}
 8001196:	4628      	mov	r0, r5
 8001198:	bd70      	pop	{r4, r5, r6, pc}
 800119a:	bf00      	nop
 800119c:	40010c00 	.word	0x40010c00

080011a0 <Soft_I2C_Write_Byte>:
{
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	4604      	mov	r4, r0
 80011a4:	460e      	mov	r6, r1
	SDA_High();
 80011a6:	4837      	ldr	r0, [pc, #220]	; (8001284 <Soft_I2C_Write_Byte+0xe4>)
 80011a8:	2180      	movs	r1, #128	; 0x80
{
 80011aa:	4615      	mov	r5, r2
	SDA_High();
 80011ac:	2201      	movs	r2, #1
 80011ae:	f7ff f99f 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80011b2:	f7ff fc67 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 80011b6:	2140      	movs	r1, #64	; 0x40
 80011b8:	2201      	movs	r2, #1
 80011ba:	4832      	ldr	r0, [pc, #200]	; (8001284 <Soft_I2C_Write_Byte+0xe4>)
 80011bc:	f7ff f998 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80011c0:	f7ff fc60 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	if (!SDA_Read())
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	482f      	ldr	r0, [pc, #188]	; (8001284 <Soft_I2C_Write_Byte+0xe4>)
 80011c8:	f7ff f98c 	bl	80004e4 <HAL_GPIO_ReadPin>
 80011cc:	b9e8      	cbnz	r0, 800120a <Soft_I2C_Write_Byte+0x6a>
	SCL_Low();
 80011ce:	2200      	movs	r2, #0
 80011d0:	2140      	movs	r1, #64	; 0x40
 80011d2:	482c      	ldr	r0, [pc, #176]	; (8001284 <Soft_I2C_Write_Byte+0xe4>)
 80011d4:	f7ff f98c 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80011d8:	f7ff fc54 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_Low();
 80011dc:	2200      	movs	r2, #0
 80011de:	2180      	movs	r1, #128	; 0x80
 80011e0:	4828      	ldr	r0, [pc, #160]	; (8001284 <Soft_I2C_Write_Byte+0xe4>)
 80011e2:	f7ff f985 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80011e6:	f7ff fc4d 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 80011ea:	2201      	movs	r2, #1
 80011ec:	2140      	movs	r1, #64	; 0x40
 80011ee:	4825      	ldr	r0, [pc, #148]	; (8001284 <Soft_I2C_Write_Byte+0xe4>)
 80011f0:	f7ff f97e 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80011f4:	f7ff fc46 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_High();
 80011f8:	2201      	movs	r2, #1
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	4821      	ldr	r0, [pc, #132]	; (8001284 <Soft_I2C_Write_Byte+0xe4>)
 80011fe:	f7ff f977 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001202:	f7ff fc3f 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
		return Soft_I2C_ERR;
 8001206:	2001      	movs	r0, #1
}
 8001208:	bd70      	pop	{r4, r5, r6, pc}
	SDA_Low();
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	2200      	movs	r2, #0
 800120e:	481d      	ldr	r0, [pc, #116]	; (8001284 <Soft_I2C_Write_Byte+0xe4>)
 8001210:	f7ff f96e 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001214:	f7ff fc36 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	if (SDA_Read())
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	481a      	ldr	r0, [pc, #104]	; (8001284 <Soft_I2C_Write_Byte+0xe4>)
 800121c:	f7ff f962 	bl	80004e4 <HAL_GPIO_ReadPin>
 8001220:	2800      	cmp	r0, #0
 8001222:	d1d4      	bne.n	80011ce <Soft_I2C_Write_Byte+0x2e>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001224:	f7ff fc2e 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	if (Soft_I2C_Send_Byte(slaveAddr) == Soft_I2C_ERR)
 8001228:	4620      	mov	r0, r4
 800122a:	f7ff ff17 	bl	800105c <Soft_I2C_Send_Byte>
 800122e:	2801      	cmp	r0, #1
 8001230:	d0e9      	beq.n	8001206 <Soft_I2C_Write_Byte+0x66>
	if (Soft_I2C_Send_Byte(regAddr) == Soft_I2C_ERR)
 8001232:	4630      	mov	r0, r6
 8001234:	f7ff ff12 	bl	800105c <Soft_I2C_Send_Byte>
 8001238:	2801      	cmp	r0, #1
 800123a:	d0e4      	beq.n	8001206 <Soft_I2C_Write_Byte+0x66>
	if (byte)
 800123c:	b125      	cbz	r5, 8001248 <Soft_I2C_Write_Byte+0xa8>
		if (Soft_I2C_Send_Byte(*byte) == Soft_I2C_ERR)
 800123e:	7828      	ldrb	r0, [r5, #0]
 8001240:	f7ff ff0c 	bl	800105c <Soft_I2C_Send_Byte>
 8001244:	2801      	cmp	r0, #1
 8001246:	d0de      	beq.n	8001206 <Soft_I2C_Write_Byte+0x66>
	SCL_Low();
 8001248:	2200      	movs	r2, #0
 800124a:	2140      	movs	r1, #64	; 0x40
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <Soft_I2C_Write_Byte+0xe4>)
 800124e:	f7ff f94f 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001252:	f7ff fc17 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_Low();
 8001256:	2200      	movs	r2, #0
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	480a      	ldr	r0, [pc, #40]	; (8001284 <Soft_I2C_Write_Byte+0xe4>)
 800125c:	f7ff f948 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001260:	f7ff fc10 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 8001264:	2201      	movs	r2, #1
 8001266:	2140      	movs	r1, #64	; 0x40
 8001268:	4806      	ldr	r0, [pc, #24]	; (8001284 <Soft_I2C_Write_Byte+0xe4>)
 800126a:	f7ff f941 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800126e:	f7ff fc09 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_High();
 8001272:	2201      	movs	r2, #1
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	4803      	ldr	r0, [pc, #12]	; (8001284 <Soft_I2C_Write_Byte+0xe4>)
 8001278:	f7ff f93a 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800127c:	f7ff fc02 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	return Soft_I2C_OK;
 8001280:	2000      	movs	r0, #0
 8001282:	bd70      	pop	{r4, r5, r6, pc}
 8001284:	40010c00 	.word	0x40010c00

08001288 <Soft_I2C_Write_Bytes>:
{
 8001288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800128a:	4605      	mov	r5, r0
 800128c:	460f      	mov	r7, r1
	SDA_High();
 800128e:	483c      	ldr	r0, [pc, #240]	; (8001380 <Soft_I2C_Write_Bytes+0xf8>)
 8001290:	2180      	movs	r1, #128	; 0x80
{
 8001292:	4614      	mov	r4, r2
	SDA_High();
 8001294:	2201      	movs	r2, #1
{
 8001296:	461e      	mov	r6, r3
	SDA_High();
 8001298:	f7ff f92a 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800129c:	f7ff fbf2 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 80012a0:	2140      	movs	r1, #64	; 0x40
 80012a2:	2201      	movs	r2, #1
 80012a4:	4836      	ldr	r0, [pc, #216]	; (8001380 <Soft_I2C_Write_Bytes+0xf8>)
 80012a6:	f7ff f923 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80012aa:	f7ff fbeb 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	if (!SDA_Read())
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	4833      	ldr	r0, [pc, #204]	; (8001380 <Soft_I2C_Write_Bytes+0xf8>)
 80012b2:	f7ff f917 	bl	80004e4 <HAL_GPIO_ReadPin>
 80012b6:	b9e8      	cbnz	r0, 80012f4 <Soft_I2C_Write_Bytes+0x6c>
	SCL_Low();
 80012b8:	2200      	movs	r2, #0
 80012ba:	2140      	movs	r1, #64	; 0x40
 80012bc:	4830      	ldr	r0, [pc, #192]	; (8001380 <Soft_I2C_Write_Bytes+0xf8>)
 80012be:	f7ff f917 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80012c2:	f7ff fbdf 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_Low();
 80012c6:	2200      	movs	r2, #0
 80012c8:	2180      	movs	r1, #128	; 0x80
 80012ca:	482d      	ldr	r0, [pc, #180]	; (8001380 <Soft_I2C_Write_Bytes+0xf8>)
 80012cc:	f7ff f910 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80012d0:	f7ff fbd8 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 80012d4:	2201      	movs	r2, #1
 80012d6:	2140      	movs	r1, #64	; 0x40
 80012d8:	4829      	ldr	r0, [pc, #164]	; (8001380 <Soft_I2C_Write_Bytes+0xf8>)
 80012da:	f7ff f909 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80012de:	f7ff fbd1 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_High();
 80012e2:	2201      	movs	r2, #1
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	4826      	ldr	r0, [pc, #152]	; (8001380 <Soft_I2C_Write_Bytes+0xf8>)
 80012e8:	f7ff f902 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80012ec:	f7ff fbca 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
		return Soft_I2C_ERR;
 80012f0:	2001      	movs	r0, #1
}
 80012f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SDA_Low();
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	2200      	movs	r2, #0
 80012f8:	4821      	ldr	r0, [pc, #132]	; (8001380 <Soft_I2C_Write_Bytes+0xf8>)
 80012fa:	f7ff f8f9 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80012fe:	f7ff fbc1 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	if (SDA_Read())
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	481e      	ldr	r0, [pc, #120]	; (8001380 <Soft_I2C_Write_Bytes+0xf8>)
 8001306:	f7ff f8ed 	bl	80004e4 <HAL_GPIO_ReadPin>
 800130a:	2800      	cmp	r0, #0
 800130c:	d1d4      	bne.n	80012b8 <Soft_I2C_Write_Bytes+0x30>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800130e:	f7ff fbb9 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	if (Soft_I2C_Send_Byte(slaveAddr) == Soft_I2C_ERR)
 8001312:	4628      	mov	r0, r5
 8001314:	f7ff fea2 	bl	800105c <Soft_I2C_Send_Byte>
 8001318:	2801      	cmp	r0, #1
 800131a:	d0e9      	beq.n	80012f0 <Soft_I2C_Write_Bytes+0x68>
	if (Soft_I2C_Send_Byte(regAddr) == Soft_I2C_ERR)
 800131c:	4638      	mov	r0, r7
 800131e:	f7ff fe9d 	bl	800105c <Soft_I2C_Send_Byte>
 8001322:	2801      	cmp	r0, #1
 8001324:	d0e4      	beq.n	80012f0 <Soft_I2C_Write_Bytes+0x68>
	while (num--)
 8001326:	1e75      	subs	r5, r6, #1
 8001328:	b2ed      	uxtb	r5, r5
 800132a:	b15e      	cbz	r6, 8001344 <Soft_I2C_Write_Bytes+0xbc>
 800132c:	4425      	add	r5, r4
 800132e:	3c01      	subs	r4, #1
		if (Soft_I2C_Send_Byte(*buf++) == Soft_I2C_ERR)
 8001330:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001334:	f7ff fe92 	bl	800105c <Soft_I2C_Send_Byte>
 8001338:	2801      	cmp	r0, #1
 800133a:	d0d9      	beq.n	80012f0 <Soft_I2C_Write_Bytes+0x68>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800133c:	f7ff fba2 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	while (num--)
 8001340:	42a5      	cmp	r5, r4
 8001342:	d1f5      	bne.n	8001330 <Soft_I2C_Write_Bytes+0xa8>
	SCL_Low();
 8001344:	2200      	movs	r2, #0
 8001346:	2140      	movs	r1, #64	; 0x40
 8001348:	480d      	ldr	r0, [pc, #52]	; (8001380 <Soft_I2C_Write_Bytes+0xf8>)
 800134a:	f7ff f8d1 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800134e:	f7ff fb99 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_Low();
 8001352:	2200      	movs	r2, #0
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	480a      	ldr	r0, [pc, #40]	; (8001380 <Soft_I2C_Write_Bytes+0xf8>)
 8001358:	f7ff f8ca 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800135c:	f7ff fb92 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 8001360:	2201      	movs	r2, #1
 8001362:	2140      	movs	r1, #64	; 0x40
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <Soft_I2C_Write_Bytes+0xf8>)
 8001366:	f7ff f8c3 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800136a:	f7ff fb8b 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_High();
 800136e:	2201      	movs	r2, #1
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	4803      	ldr	r0, [pc, #12]	; (8001380 <Soft_I2C_Write_Bytes+0xf8>)
 8001374:	f7ff f8bc 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001378:	f7ff fb84 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	return Soft_I2C_OK;
 800137c:	2000      	movs	r0, #0
 800137e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001380:	40010c00 	.word	0x40010c00

08001384 <Soft_I2C_Scan>:
{
 8001384:	b538      	push	{r3, r4, r5, lr}
	SDA_High();
 8001386:	2201      	movs	r2, #1
 8001388:	2180      	movs	r1, #128	; 0x80
{
 800138a:	4605      	mov	r5, r0
	SDA_High();
 800138c:	4830      	ldr	r0, [pc, #192]	; (8001450 <Soft_I2C_Scan+0xcc>)
 800138e:	f7ff f8af 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001392:	f7ff fb77 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 8001396:	2140      	movs	r1, #64	; 0x40
 8001398:	2201      	movs	r2, #1
 800139a:	482d      	ldr	r0, [pc, #180]	; (8001450 <Soft_I2C_Scan+0xcc>)
 800139c:	f7ff f8a8 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80013a0:	f7ff fb70 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	if (!SDA_Read())
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	482a      	ldr	r0, [pc, #168]	; (8001450 <Soft_I2C_Scan+0xcc>)
 80013a8:	f7ff f89c 	bl	80004e4 <HAL_GPIO_ReadPin>
 80013ac:	b9e8      	cbnz	r0, 80013ea <Soft_I2C_Scan+0x66>
	SCL_Low();
 80013ae:	2200      	movs	r2, #0
 80013b0:	2140      	movs	r1, #64	; 0x40
 80013b2:	4827      	ldr	r0, [pc, #156]	; (8001450 <Soft_I2C_Scan+0xcc>)
 80013b4:	f7ff f89c 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80013b8:	f7ff fb64 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_Low();
 80013bc:	2200      	movs	r2, #0
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	4823      	ldr	r0, [pc, #140]	; (8001450 <Soft_I2C_Scan+0xcc>)
 80013c2:	f7ff f895 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80013c6:	f7ff fb5d 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 80013ca:	2201      	movs	r2, #1
 80013cc:	2140      	movs	r1, #64	; 0x40
 80013ce:	4820      	ldr	r0, [pc, #128]	; (8001450 <Soft_I2C_Scan+0xcc>)
 80013d0:	f7ff f88e 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80013d4:	f7ff fb56 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_High();
 80013d8:	2201      	movs	r2, #1
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	481c      	ldr	r0, [pc, #112]	; (8001450 <Soft_I2C_Scan+0xcc>)
 80013de:	f7ff f887 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80013e2:	f7ff fb4f 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
		return Soft_I2C_ERR;
 80013e6:	2001      	movs	r0, #1
}
 80013e8:	bd38      	pop	{r3, r4, r5, pc}
	SDA_Low();
 80013ea:	2200      	movs	r2, #0
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	4818      	ldr	r0, [pc, #96]	; (8001450 <Soft_I2C_Scan+0xcc>)
 80013f0:	f7ff f87e 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 80013f4:	f7ff fb46 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	if (SDA_Read())
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	4815      	ldr	r0, [pc, #84]	; (8001450 <Soft_I2C_Scan+0xcc>)
 80013fc:	f7ff f872 	bl	80004e4 <HAL_GPIO_ReadPin>
 8001400:	4604      	mov	r4, r0
 8001402:	2800      	cmp	r0, #0
 8001404:	d1d3      	bne.n	80013ae <Soft_I2C_Scan+0x2a>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001406:	f7ff fb3d 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	if (Soft_I2C_Send_Byte(slaveAddr) == Soft_I2C_ERR)
 800140a:	4628      	mov	r0, r5
 800140c:	f7ff fe26 	bl	800105c <Soft_I2C_Send_Byte>
 8001410:	2801      	cmp	r0, #1
 8001412:	d0e9      	beq.n	80013e8 <Soft_I2C_Scan+0x64>
	SCL_Low();
 8001414:	4622      	mov	r2, r4
 8001416:	2140      	movs	r1, #64	; 0x40
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <Soft_I2C_Scan+0xcc>)
 800141a:	f7ff f869 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800141e:	f7ff fb31 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_Low();
 8001422:	4622      	mov	r2, r4
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	480a      	ldr	r0, [pc, #40]	; (8001450 <Soft_I2C_Scan+0xcc>)
 8001428:	f7ff f862 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800142c:	f7ff fb2a 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SCL_High();
 8001430:	2201      	movs	r2, #1
 8001432:	2140      	movs	r1, #64	; 0x40
 8001434:	4806      	ldr	r0, [pc, #24]	; (8001450 <Soft_I2C_Scan+0xcc>)
 8001436:	f7ff f85b 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 800143a:	f7ff fb23 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	SDA_High();
 800143e:	2201      	movs	r2, #1
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <Soft_I2C_Scan+0xcc>)
 8001444:	f7ff f854 	bl	80004f0 <HAL_GPIO_WritePin>
	uint32_t Ticks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001448:	f7ff fb1c 	bl	8000a84 <HAL_RCC_GetSysClockFreq>
	return Soft_I2C_OK;
 800144c:	4620      	mov	r0, r4
 800144e:	bd38      	pop	{r3, r4, r5, pc}
 8001450:	40010c00 	.word	0x40010c00

08001454 <ssd1306_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void ssd1306_UpdateScreen(void) 
{
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	24b0      	movs	r4, #176	; 0xb0
 8001458:	b083      	sub	sp, #12
    if(Soft_I2C_Write_Byte(SSD1306_I2C_ADDR,0x00,&command)==Soft_I2C_ERR)
 800145a:	2600      	movs	r6, #0
 800145c:	4d24      	ldr	r5, [pc, #144]	; (80014f0 <ssd1306_UpdateScreen+0x9c>)
    	_Error_Handler(__FILE__, __LINE__);
 800145e:	4f25      	ldr	r7, [pc, #148]	; (80014f4 <ssd1306_UpdateScreen+0xa0>)
 8001460:	e022      	b.n	80014a8 <ssd1306_UpdateScreen+0x54>
    if(Soft_I2C_Write_Byte(SSD1306_I2C_ADDR,0x00,&command)==Soft_I2C_ERR)
 8001462:	f10d 0206 	add.w	r2, sp, #6
 8001466:	2100      	movs	r1, #0
 8001468:	2078      	movs	r0, #120	; 0x78
 800146a:	f88d 6006 	strb.w	r6, [sp, #6]
 800146e:	f7ff fe97 	bl	80011a0 <Soft_I2C_Write_Byte>
 8001472:	2801      	cmp	r0, #1
 8001474:	d02c      	beq.n	80014d0 <ssd1306_UpdateScreen+0x7c>
 8001476:	2310      	movs	r3, #16
 8001478:	f10d 0205 	add.w	r2, sp, #5
 800147c:	2100      	movs	r1, #0
 800147e:	2078      	movs	r0, #120	; 0x78
 8001480:	f88d 3005 	strb.w	r3, [sp, #5]
 8001484:	f7ff fe8c 	bl	80011a0 <Soft_I2C_Write_Byte>
 8001488:	2801      	cmp	r0, #1
 800148a:	d01c      	beq.n	80014c6 <ssd1306_UpdateScreen+0x72>
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		// We schrijven alles map per map weg
	    if(Soft_I2C_Write_Bytes(SSD1306_I2C_ADDR,0x40,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH)==Soft_I2C_ERR)
 800148c:	462a      	mov	r2, r5
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	2140      	movs	r1, #64	; 0x40
 8001492:	2078      	movs	r0, #120	; 0x78
 8001494:	f7ff fef8 	bl	8001288 <Soft_I2C_Write_Bytes>
 8001498:	2801      	cmp	r0, #1
 800149a:	f105 0580 	add.w	r5, r5, #128	; 0x80
 800149e:	d01c      	beq.n	80014da <ssd1306_UpdateScreen+0x86>
 80014a0:	3401      	adds	r4, #1
 80014a2:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 8; i++) {
 80014a4:	2cb8      	cmp	r4, #184	; 0xb8
 80014a6:	d020      	beq.n	80014ea <ssd1306_UpdateScreen+0x96>
    if(Soft_I2C_Write_Byte(SSD1306_I2C_ADDR,0x00,&command)==Soft_I2C_ERR)
 80014a8:	f10d 0207 	add.w	r2, sp, #7
 80014ac:	2100      	movs	r1, #0
 80014ae:	2078      	movs	r0, #120	; 0x78
 80014b0:	f88d 4007 	strb.w	r4, [sp, #7]
 80014b4:	f7ff fe74 	bl	80011a0 <Soft_I2C_Write_Byte>
 80014b8:	2801      	cmp	r0, #1
 80014ba:	d1d2      	bne.n	8001462 <ssd1306_UpdateScreen+0xe>
    	_Error_Handler(__FILE__, __LINE__);
 80014bc:	2114      	movs	r1, #20
 80014be:	4638      	mov	r0, r7
 80014c0:	f7ff fcee 	bl	8000ea0 <_Error_Handler>
 80014c4:	e7cd      	b.n	8001462 <ssd1306_UpdateScreen+0xe>
 80014c6:	2114      	movs	r1, #20
 80014c8:	4638      	mov	r0, r7
 80014ca:	f7ff fce9 	bl	8000ea0 <_Error_Handler>
 80014ce:	e7dd      	b.n	800148c <ssd1306_UpdateScreen+0x38>
 80014d0:	2114      	movs	r1, #20
 80014d2:	4638      	mov	r0, r7
 80014d4:	f7ff fce4 	bl	8000ea0 <_Error_Handler>
 80014d8:	e7cd      	b.n	8001476 <ssd1306_UpdateScreen+0x22>
 80014da:	3401      	adds	r4, #1
	    {
	    	_Error_Handler(__FILE__, __LINE__);
 80014dc:	216d      	movs	r1, #109	; 0x6d
 80014de:	4638      	mov	r0, r7
 80014e0:	b2e4      	uxtb	r4, r4
 80014e2:	f7ff fcdd 	bl	8000ea0 <_Error_Handler>
	for (i = 0; i < 8; i++) {
 80014e6:	2cb8      	cmp	r4, #184	; 0xb8
 80014e8:	d1de      	bne.n	80014a8 <ssd1306_UpdateScreen+0x54>
	    }
	}
}
 80014ea:	b003      	add	sp, #12
 80014ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000038 	.word	0x20000038
 80014f4:	08002ac8 	.word	0x08002ac8

080014f8 <ssd1306_Init>:
{	
 80014f8:	23ae      	movs	r3, #174	; 0xae
 80014fa:	b510      	push	{r4, lr}
 80014fc:	b088      	sub	sp, #32
 80014fe:	aa08      	add	r2, sp, #32
 8001500:	f802 3d01 	strb.w	r3, [r2, #-1]!
    if(Soft_I2C_Write_Byte(SSD1306_I2C_ADDR,0x00,&command)==Soft_I2C_ERR)
 8001504:	2100      	movs	r1, #0
 8001506:	2078      	movs	r0, #120	; 0x78
 8001508:	f7ff fe4a 	bl	80011a0 <Soft_I2C_Write_Byte>
 800150c:	2801      	cmp	r0, #1
 800150e:	f000 8131 	beq.w	8001774 <ssd1306_Init+0x27c>
 8001512:	2320      	movs	r3, #32
 8001514:	eb0d 0203 	add.w	r2, sp, r3
 8001518:	f802 3d02 	strb.w	r3, [r2, #-2]!
 800151c:	2100      	movs	r1, #0
 800151e:	2078      	movs	r0, #120	; 0x78
 8001520:	f7ff fe3e 	bl	80011a0 <Soft_I2C_Write_Byte>
 8001524:	2801      	cmp	r0, #1
 8001526:	f000 81ac 	beq.w	8001882 <ssd1306_Init+0x38a>
 800152a:	2310      	movs	r3, #16
 800152c:	aa08      	add	r2, sp, #32
 800152e:	f802 3d03 	strb.w	r3, [r2, #-3]!
 8001532:	2100      	movs	r1, #0
 8001534:	2078      	movs	r0, #120	; 0x78
 8001536:	f7ff fe33 	bl	80011a0 <Soft_I2C_Write_Byte>
 800153a:	2801      	cmp	r0, #1
 800153c:	f000 819c 	beq.w	8001878 <ssd1306_Init+0x380>
 8001540:	23b0      	movs	r3, #176	; 0xb0
 8001542:	aa08      	add	r2, sp, #32
 8001544:	f802 3d04 	strb.w	r3, [r2, #-4]!
 8001548:	2100      	movs	r1, #0
 800154a:	2078      	movs	r0, #120	; 0x78
 800154c:	f7ff fe28 	bl	80011a0 <Soft_I2C_Write_Byte>
 8001550:	2801      	cmp	r0, #1
 8001552:	f000 818c 	beq.w	800186e <ssd1306_Init+0x376>
 8001556:	23c8      	movs	r3, #200	; 0xc8
 8001558:	aa08      	add	r2, sp, #32
 800155a:	f802 3d05 	strb.w	r3, [r2, #-5]!
 800155e:	2100      	movs	r1, #0
 8001560:	2078      	movs	r0, #120	; 0x78
 8001562:	f7ff fe1d 	bl	80011a0 <Soft_I2C_Write_Byte>
 8001566:	2801      	cmp	r0, #1
 8001568:	f000 817c 	beq.w	8001864 <ssd1306_Init+0x36c>
 800156c:	2100      	movs	r1, #0
 800156e:	aa08      	add	r2, sp, #32
 8001570:	f802 1d06 	strb.w	r1, [r2, #-6]!
 8001574:	2078      	movs	r0, #120	; 0x78
 8001576:	f7ff fe13 	bl	80011a0 <Soft_I2C_Write_Byte>
 800157a:	2801      	cmp	r0, #1
 800157c:	f000 816d 	beq.w	800185a <ssd1306_Init+0x362>
 8001580:	2310      	movs	r3, #16
 8001582:	aa08      	add	r2, sp, #32
 8001584:	f802 3d07 	strb.w	r3, [r2, #-7]!
 8001588:	2100      	movs	r1, #0
 800158a:	2078      	movs	r0, #120	; 0x78
 800158c:	f7ff fe08 	bl	80011a0 <Soft_I2C_Write_Byte>
 8001590:	2801      	cmp	r0, #1
 8001592:	f000 815d 	beq.w	8001850 <ssd1306_Init+0x358>
 8001596:	2340      	movs	r3, #64	; 0x40
 8001598:	aa08      	add	r2, sp, #32
 800159a:	f802 3d08 	strb.w	r3, [r2, #-8]!
 800159e:	2100      	movs	r1, #0
 80015a0:	2078      	movs	r0, #120	; 0x78
 80015a2:	f7ff fdfd 	bl	80011a0 <Soft_I2C_Write_Byte>
 80015a6:	2801      	cmp	r0, #1
 80015a8:	f000 814d 	beq.w	8001846 <ssd1306_Init+0x34e>
 80015ac:	2381      	movs	r3, #129	; 0x81
 80015ae:	aa08      	add	r2, sp, #32
 80015b0:	f802 3d09 	strb.w	r3, [r2, #-9]!
 80015b4:	2100      	movs	r1, #0
 80015b6:	2078      	movs	r0, #120	; 0x78
 80015b8:	f7ff fdf2 	bl	80011a0 <Soft_I2C_Write_Byte>
 80015bc:	2801      	cmp	r0, #1
 80015be:	f000 813d 	beq.w	800183c <ssd1306_Init+0x344>
 80015c2:	23ff      	movs	r3, #255	; 0xff
 80015c4:	aa08      	add	r2, sp, #32
 80015c6:	f802 3d0a 	strb.w	r3, [r2, #-10]!
 80015ca:	2100      	movs	r1, #0
 80015cc:	2078      	movs	r0, #120	; 0x78
 80015ce:	f7ff fde7 	bl	80011a0 <Soft_I2C_Write_Byte>
 80015d2:	2801      	cmp	r0, #1
 80015d4:	f000 812d 	beq.w	8001832 <ssd1306_Init+0x33a>
 80015d8:	23a1      	movs	r3, #161	; 0xa1
 80015da:	aa08      	add	r2, sp, #32
 80015dc:	f802 3d0b 	strb.w	r3, [r2, #-11]!
 80015e0:	2100      	movs	r1, #0
 80015e2:	2078      	movs	r0, #120	; 0x78
 80015e4:	f7ff fddc 	bl	80011a0 <Soft_I2C_Write_Byte>
 80015e8:	2801      	cmp	r0, #1
 80015ea:	f000 811d 	beq.w	8001828 <ssd1306_Init+0x330>
 80015ee:	23a6      	movs	r3, #166	; 0xa6
 80015f0:	aa08      	add	r2, sp, #32
 80015f2:	f802 3d0c 	strb.w	r3, [r2, #-12]!
 80015f6:	2100      	movs	r1, #0
 80015f8:	2078      	movs	r0, #120	; 0x78
 80015fa:	f7ff fdd1 	bl	80011a0 <Soft_I2C_Write_Byte>
 80015fe:	2801      	cmp	r0, #1
 8001600:	f000 810d 	beq.w	800181e <ssd1306_Init+0x326>
 8001604:	23a8      	movs	r3, #168	; 0xa8
 8001606:	aa08      	add	r2, sp, #32
 8001608:	f802 3d0d 	strb.w	r3, [r2, #-13]!
 800160c:	2100      	movs	r1, #0
 800160e:	2078      	movs	r0, #120	; 0x78
 8001610:	f7ff fdc6 	bl	80011a0 <Soft_I2C_Write_Byte>
 8001614:	2801      	cmp	r0, #1
 8001616:	f000 80fd 	beq.w	8001814 <ssd1306_Init+0x31c>
 800161a:	233f      	movs	r3, #63	; 0x3f
 800161c:	aa08      	add	r2, sp, #32
 800161e:	f802 3d0e 	strb.w	r3, [r2, #-14]!
 8001622:	2100      	movs	r1, #0
 8001624:	2078      	movs	r0, #120	; 0x78
 8001626:	f7ff fdbb 	bl	80011a0 <Soft_I2C_Write_Byte>
 800162a:	2801      	cmp	r0, #1
 800162c:	f000 80ed 	beq.w	800180a <ssd1306_Init+0x312>
 8001630:	23a4      	movs	r3, #164	; 0xa4
 8001632:	aa08      	add	r2, sp, #32
 8001634:	f802 3d0f 	strb.w	r3, [r2, #-15]!
 8001638:	2100      	movs	r1, #0
 800163a:	2078      	movs	r0, #120	; 0x78
 800163c:	f7ff fdb0 	bl	80011a0 <Soft_I2C_Write_Byte>
 8001640:	2801      	cmp	r0, #1
 8001642:	f000 80dd 	beq.w	8001800 <ssd1306_Init+0x308>
 8001646:	23d3      	movs	r3, #211	; 0xd3
 8001648:	aa08      	add	r2, sp, #32
 800164a:	f802 3d10 	strb.w	r3, [r2, #-16]!
 800164e:	2100      	movs	r1, #0
 8001650:	2078      	movs	r0, #120	; 0x78
 8001652:	f7ff fda5 	bl	80011a0 <Soft_I2C_Write_Byte>
 8001656:	2801      	cmp	r0, #1
 8001658:	f000 80cd 	beq.w	80017f6 <ssd1306_Init+0x2fe>
 800165c:	2100      	movs	r1, #0
 800165e:	aa08      	add	r2, sp, #32
 8001660:	f802 1d11 	strb.w	r1, [r2, #-17]!
 8001664:	2078      	movs	r0, #120	; 0x78
 8001666:	f7ff fd9b 	bl	80011a0 <Soft_I2C_Write_Byte>
 800166a:	2801      	cmp	r0, #1
 800166c:	f000 80be 	beq.w	80017ec <ssd1306_Init+0x2f4>
 8001670:	23d5      	movs	r3, #213	; 0xd5
 8001672:	aa08      	add	r2, sp, #32
 8001674:	f802 3d12 	strb.w	r3, [r2, #-18]!
 8001678:	2100      	movs	r1, #0
 800167a:	2078      	movs	r0, #120	; 0x78
 800167c:	f7ff fd90 	bl	80011a0 <Soft_I2C_Write_Byte>
 8001680:	2801      	cmp	r0, #1
 8001682:	f000 80ae 	beq.w	80017e2 <ssd1306_Init+0x2ea>
 8001686:	23f0      	movs	r3, #240	; 0xf0
 8001688:	aa08      	add	r2, sp, #32
 800168a:	f802 3d13 	strb.w	r3, [r2, #-19]!
 800168e:	2100      	movs	r1, #0
 8001690:	2078      	movs	r0, #120	; 0x78
 8001692:	f7ff fd85 	bl	80011a0 <Soft_I2C_Write_Byte>
 8001696:	2801      	cmp	r0, #1
 8001698:	f000 809e 	beq.w	80017d8 <ssd1306_Init+0x2e0>
 800169c:	23d9      	movs	r3, #217	; 0xd9
 800169e:	aa08      	add	r2, sp, #32
 80016a0:	f802 3d14 	strb.w	r3, [r2, #-20]!
 80016a4:	2100      	movs	r1, #0
 80016a6:	2078      	movs	r0, #120	; 0x78
 80016a8:	f7ff fd7a 	bl	80011a0 <Soft_I2C_Write_Byte>
 80016ac:	2801      	cmp	r0, #1
 80016ae:	f000 808e 	beq.w	80017ce <ssd1306_Init+0x2d6>
 80016b2:	2322      	movs	r3, #34	; 0x22
 80016b4:	aa08      	add	r2, sp, #32
 80016b6:	f802 3d15 	strb.w	r3, [r2, #-21]!
 80016ba:	2100      	movs	r1, #0
 80016bc:	2078      	movs	r0, #120	; 0x78
 80016be:	f7ff fd6f 	bl	80011a0 <Soft_I2C_Write_Byte>
 80016c2:	2801      	cmp	r0, #1
 80016c4:	d07e      	beq.n	80017c4 <ssd1306_Init+0x2cc>
 80016c6:	23da      	movs	r3, #218	; 0xda
 80016c8:	aa08      	add	r2, sp, #32
 80016ca:	f802 3d16 	strb.w	r3, [r2, #-22]!
 80016ce:	2100      	movs	r1, #0
 80016d0:	2078      	movs	r0, #120	; 0x78
 80016d2:	f7ff fd65 	bl	80011a0 <Soft_I2C_Write_Byte>
 80016d6:	2801      	cmp	r0, #1
 80016d8:	d06f      	beq.n	80017ba <ssd1306_Init+0x2c2>
 80016da:	2312      	movs	r3, #18
 80016dc:	aa08      	add	r2, sp, #32
 80016de:	f802 3d17 	strb.w	r3, [r2, #-23]!
 80016e2:	2100      	movs	r1, #0
 80016e4:	2078      	movs	r0, #120	; 0x78
 80016e6:	f7ff fd5b 	bl	80011a0 <Soft_I2C_Write_Byte>
 80016ea:	2801      	cmp	r0, #1
 80016ec:	d060      	beq.n	80017b0 <ssd1306_Init+0x2b8>
 80016ee:	23db      	movs	r3, #219	; 0xdb
 80016f0:	aa08      	add	r2, sp, #32
 80016f2:	f802 3d18 	strb.w	r3, [r2, #-24]!
 80016f6:	2100      	movs	r1, #0
 80016f8:	2078      	movs	r0, #120	; 0x78
 80016fa:	f7ff fd51 	bl	80011a0 <Soft_I2C_Write_Byte>
 80016fe:	2801      	cmp	r0, #1
 8001700:	d051      	beq.n	80017a6 <ssd1306_Init+0x2ae>
 8001702:	2320      	movs	r3, #32
 8001704:	eb0d 0203 	add.w	r2, sp, r3
 8001708:	f802 3d19 	strb.w	r3, [r2, #-25]!
 800170c:	2100      	movs	r1, #0
 800170e:	2078      	movs	r0, #120	; 0x78
 8001710:	f7ff fd46 	bl	80011a0 <Soft_I2C_Write_Byte>
 8001714:	2801      	cmp	r0, #1
 8001716:	d041      	beq.n	800179c <ssd1306_Init+0x2a4>
 8001718:	238d      	movs	r3, #141	; 0x8d
 800171a:	aa08      	add	r2, sp, #32
 800171c:	f802 3d1a 	strb.w	r3, [r2, #-26]!
 8001720:	2100      	movs	r1, #0
 8001722:	2078      	movs	r0, #120	; 0x78
 8001724:	f7ff fd3c 	bl	80011a0 <Soft_I2C_Write_Byte>
 8001728:	2801      	cmp	r0, #1
 800172a:	d032      	beq.n	8001792 <ssd1306_Init+0x29a>
 800172c:	2414      	movs	r4, #20
 800172e:	aa08      	add	r2, sp, #32
 8001730:	f802 4d1b 	strb.w	r4, [r2, #-27]!
 8001734:	2100      	movs	r1, #0
 8001736:	2078      	movs	r0, #120	; 0x78
 8001738:	f7ff fd32 	bl	80011a0 <Soft_I2C_Write_Byte>
 800173c:	2801      	cmp	r0, #1
 800173e:	d023      	beq.n	8001788 <ssd1306_Init+0x290>
 8001740:	23af      	movs	r3, #175	; 0xaf
 8001742:	aa08      	add	r2, sp, #32
 8001744:	f802 3d1c 	strb.w	r3, [r2, #-28]!
 8001748:	2100      	movs	r1, #0
 800174a:	2078      	movs	r0, #120	; 0x78
 800174c:	f7ff fd28 	bl	80011a0 <Soft_I2C_Write_Byte>
 8001750:	2801      	cmp	r0, #1
 8001752:	d014      	beq.n	800177e <ssd1306_Init+0x286>
 8001754:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001758:	2100      	movs	r1, #0
 800175a:	484c      	ldr	r0, [pc, #304]	; (800188c <ssd1306_Init+0x394>)
 800175c:	f000 faa0 	bl	8001ca0 <memset>
	ssd1306_UpdateScreen();
 8001760:	f7ff fe78 	bl	8001454 <ssd1306_UpdateScreen>
	SSD1306.Initialized = 1;
 8001764:	2201      	movs	r2, #1
	SSD1306.CurrentX = 0;
 8001766:	2100      	movs	r1, #0
}
 8001768:	4610      	mov	r0, r2
	SSD1306.CurrentX = 0;
 800176a:	4b49      	ldr	r3, [pc, #292]	; (8001890 <ssd1306_Init+0x398>)
 800176c:	6019      	str	r1, [r3, #0]
	SSD1306.Initialized = 1;
 800176e:	715a      	strb	r2, [r3, #5]
}
 8001770:	b008      	add	sp, #32
 8001772:	bd10      	pop	{r4, pc}
    	_Error_Handler(__FILE__, __LINE__);
 8001774:	2114      	movs	r1, #20
 8001776:	4847      	ldr	r0, [pc, #284]	; (8001894 <ssd1306_Init+0x39c>)
 8001778:	f7ff fb92 	bl	8000ea0 <_Error_Handler>
 800177c:	e6c9      	b.n	8001512 <ssd1306_Init+0x1a>
 800177e:	2114      	movs	r1, #20
 8001780:	4844      	ldr	r0, [pc, #272]	; (8001894 <ssd1306_Init+0x39c>)
 8001782:	f7ff fb8d 	bl	8000ea0 <_Error_Handler>
 8001786:	e7e5      	b.n	8001754 <ssd1306_Init+0x25c>
 8001788:	4621      	mov	r1, r4
 800178a:	4842      	ldr	r0, [pc, #264]	; (8001894 <ssd1306_Init+0x39c>)
 800178c:	f7ff fb88 	bl	8000ea0 <_Error_Handler>
 8001790:	e7d6      	b.n	8001740 <ssd1306_Init+0x248>
 8001792:	2114      	movs	r1, #20
 8001794:	483f      	ldr	r0, [pc, #252]	; (8001894 <ssd1306_Init+0x39c>)
 8001796:	f7ff fb83 	bl	8000ea0 <_Error_Handler>
 800179a:	e7c7      	b.n	800172c <ssd1306_Init+0x234>
 800179c:	2114      	movs	r1, #20
 800179e:	483d      	ldr	r0, [pc, #244]	; (8001894 <ssd1306_Init+0x39c>)
 80017a0:	f7ff fb7e 	bl	8000ea0 <_Error_Handler>
 80017a4:	e7b8      	b.n	8001718 <ssd1306_Init+0x220>
 80017a6:	2114      	movs	r1, #20
 80017a8:	483a      	ldr	r0, [pc, #232]	; (8001894 <ssd1306_Init+0x39c>)
 80017aa:	f7ff fb79 	bl	8000ea0 <_Error_Handler>
 80017ae:	e7a8      	b.n	8001702 <ssd1306_Init+0x20a>
 80017b0:	2114      	movs	r1, #20
 80017b2:	4838      	ldr	r0, [pc, #224]	; (8001894 <ssd1306_Init+0x39c>)
 80017b4:	f7ff fb74 	bl	8000ea0 <_Error_Handler>
 80017b8:	e799      	b.n	80016ee <ssd1306_Init+0x1f6>
 80017ba:	2114      	movs	r1, #20
 80017bc:	4835      	ldr	r0, [pc, #212]	; (8001894 <ssd1306_Init+0x39c>)
 80017be:	f7ff fb6f 	bl	8000ea0 <_Error_Handler>
 80017c2:	e78a      	b.n	80016da <ssd1306_Init+0x1e2>
 80017c4:	2114      	movs	r1, #20
 80017c6:	4833      	ldr	r0, [pc, #204]	; (8001894 <ssd1306_Init+0x39c>)
 80017c8:	f7ff fb6a 	bl	8000ea0 <_Error_Handler>
 80017cc:	e77b      	b.n	80016c6 <ssd1306_Init+0x1ce>
 80017ce:	2114      	movs	r1, #20
 80017d0:	4830      	ldr	r0, [pc, #192]	; (8001894 <ssd1306_Init+0x39c>)
 80017d2:	f7ff fb65 	bl	8000ea0 <_Error_Handler>
 80017d6:	e76c      	b.n	80016b2 <ssd1306_Init+0x1ba>
 80017d8:	2114      	movs	r1, #20
 80017da:	482e      	ldr	r0, [pc, #184]	; (8001894 <ssd1306_Init+0x39c>)
 80017dc:	f7ff fb60 	bl	8000ea0 <_Error_Handler>
 80017e0:	e75c      	b.n	800169c <ssd1306_Init+0x1a4>
 80017e2:	2114      	movs	r1, #20
 80017e4:	482b      	ldr	r0, [pc, #172]	; (8001894 <ssd1306_Init+0x39c>)
 80017e6:	f7ff fb5b 	bl	8000ea0 <_Error_Handler>
 80017ea:	e74c      	b.n	8001686 <ssd1306_Init+0x18e>
 80017ec:	2114      	movs	r1, #20
 80017ee:	4829      	ldr	r0, [pc, #164]	; (8001894 <ssd1306_Init+0x39c>)
 80017f0:	f7ff fb56 	bl	8000ea0 <_Error_Handler>
 80017f4:	e73c      	b.n	8001670 <ssd1306_Init+0x178>
 80017f6:	2114      	movs	r1, #20
 80017f8:	4826      	ldr	r0, [pc, #152]	; (8001894 <ssd1306_Init+0x39c>)
 80017fa:	f7ff fb51 	bl	8000ea0 <_Error_Handler>
 80017fe:	e72d      	b.n	800165c <ssd1306_Init+0x164>
 8001800:	2114      	movs	r1, #20
 8001802:	4824      	ldr	r0, [pc, #144]	; (8001894 <ssd1306_Init+0x39c>)
 8001804:	f7ff fb4c 	bl	8000ea0 <_Error_Handler>
 8001808:	e71d      	b.n	8001646 <ssd1306_Init+0x14e>
 800180a:	2114      	movs	r1, #20
 800180c:	4821      	ldr	r0, [pc, #132]	; (8001894 <ssd1306_Init+0x39c>)
 800180e:	f7ff fb47 	bl	8000ea0 <_Error_Handler>
 8001812:	e70d      	b.n	8001630 <ssd1306_Init+0x138>
 8001814:	2114      	movs	r1, #20
 8001816:	481f      	ldr	r0, [pc, #124]	; (8001894 <ssd1306_Init+0x39c>)
 8001818:	f7ff fb42 	bl	8000ea0 <_Error_Handler>
 800181c:	e6fd      	b.n	800161a <ssd1306_Init+0x122>
 800181e:	2114      	movs	r1, #20
 8001820:	481c      	ldr	r0, [pc, #112]	; (8001894 <ssd1306_Init+0x39c>)
 8001822:	f7ff fb3d 	bl	8000ea0 <_Error_Handler>
 8001826:	e6ed      	b.n	8001604 <ssd1306_Init+0x10c>
 8001828:	2114      	movs	r1, #20
 800182a:	481a      	ldr	r0, [pc, #104]	; (8001894 <ssd1306_Init+0x39c>)
 800182c:	f7ff fb38 	bl	8000ea0 <_Error_Handler>
 8001830:	e6dd      	b.n	80015ee <ssd1306_Init+0xf6>
 8001832:	2114      	movs	r1, #20
 8001834:	4817      	ldr	r0, [pc, #92]	; (8001894 <ssd1306_Init+0x39c>)
 8001836:	f7ff fb33 	bl	8000ea0 <_Error_Handler>
 800183a:	e6cd      	b.n	80015d8 <ssd1306_Init+0xe0>
 800183c:	2114      	movs	r1, #20
 800183e:	4815      	ldr	r0, [pc, #84]	; (8001894 <ssd1306_Init+0x39c>)
 8001840:	f7ff fb2e 	bl	8000ea0 <_Error_Handler>
 8001844:	e6bd      	b.n	80015c2 <ssd1306_Init+0xca>
 8001846:	2114      	movs	r1, #20
 8001848:	4812      	ldr	r0, [pc, #72]	; (8001894 <ssd1306_Init+0x39c>)
 800184a:	f7ff fb29 	bl	8000ea0 <_Error_Handler>
 800184e:	e6ad      	b.n	80015ac <ssd1306_Init+0xb4>
 8001850:	2114      	movs	r1, #20
 8001852:	4810      	ldr	r0, [pc, #64]	; (8001894 <ssd1306_Init+0x39c>)
 8001854:	f7ff fb24 	bl	8000ea0 <_Error_Handler>
 8001858:	e69d      	b.n	8001596 <ssd1306_Init+0x9e>
 800185a:	2114      	movs	r1, #20
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <ssd1306_Init+0x39c>)
 800185e:	f7ff fb1f 	bl	8000ea0 <_Error_Handler>
 8001862:	e68d      	b.n	8001580 <ssd1306_Init+0x88>
 8001864:	2114      	movs	r1, #20
 8001866:	480b      	ldr	r0, [pc, #44]	; (8001894 <ssd1306_Init+0x39c>)
 8001868:	f7ff fb1a 	bl	8000ea0 <_Error_Handler>
 800186c:	e67e      	b.n	800156c <ssd1306_Init+0x74>
 800186e:	2114      	movs	r1, #20
 8001870:	4808      	ldr	r0, [pc, #32]	; (8001894 <ssd1306_Init+0x39c>)
 8001872:	f7ff fb15 	bl	8000ea0 <_Error_Handler>
 8001876:	e66e      	b.n	8001556 <ssd1306_Init+0x5e>
 8001878:	2114      	movs	r1, #20
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <ssd1306_Init+0x39c>)
 800187c:	f7ff fb10 	bl	8000ea0 <_Error_Handler>
 8001880:	e65e      	b.n	8001540 <ssd1306_Init+0x48>
 8001882:	2114      	movs	r1, #20
 8001884:	4803      	ldr	r0, [pc, #12]	; (8001894 <ssd1306_Init+0x39c>)
 8001886:	f7ff fb0b 	bl	8000ea0 <_Error_Handler>
 800188a:	e64e      	b.n	800152a <ssd1306_Init+0x32>
 800188c:	20000038 	.word	0x20000038
 8001890:	20000030 	.word	0x20000030
 8001894:	08002ac8 	.word	0x08002ac8

08001898 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800189c:	b089      	sub	sp, #36	; 0x24
 800189e:	ac08      	add	r4, sp, #32
 80018a0:	e904 0006 	stmdb	r4, {r1, r2}
	uint32_t i, b, j;
	
	// Kijken of er nog plaats is op deze lijn
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80018a4:	4a75      	ldr	r2, [pc, #468]	; (8001a7c <ssd1306_WriteChar+0x1e4>)
 80018a6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80018aa:	8814      	ldrh	r4, [r2, #0]
{
 80018ac:	9004      	str	r0, [sp, #16]
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80018ae:	1862      	adds	r2, r4, r1
 80018b0:	2a7f      	cmp	r2, #127	; 0x7f
 80018b2:	9205      	str	r2, [sp, #20]
 80018b4:	dc76      	bgt.n	80019a4 <ssd1306_WriteChar+0x10c>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80018b6:	4871      	ldr	r0, [pc, #452]	; (8001a7c <ssd1306_WriteChar+0x1e4>)
 80018b8:	f89d 2019 	ldrb.w	r2, [sp, #25]
 80018bc:	8840      	ldrh	r0, [r0, #2]
 80018be:	9200      	str	r2, [sp, #0]
 80018c0:	4605      	mov	r5, r0
 80018c2:	9001      	str	r0, [sp, #4]
 80018c4:	4610      	mov	r0, r2
 80018c6:	18aa      	adds	r2, r5, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80018c8:	2a3f      	cmp	r2, #63	; 0x3f
 80018ca:	dc6b      	bgt.n	80019a4 <ssd1306_WriteChar+0x10c>
		// Er is geen plaats meer
		return 0;
	}
	
	// We gaan door het font
	for (i = 0; i < Font.FontHeight; i++)
 80018cc:	4602      	mov	r2, r0
 80018ce:	2800      	cmp	r0, #0
 80018d0:	d060      	beq.n	8001994 <ssd1306_WriteChar+0xfc>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80018d2:	2b00      	cmp	r3, #0
		color = (SSD1306_COLOR)!color;
 80018d4:	f04f 0c00 	mov.w	ip, #0
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80018d8:	bf14      	ite	ne
 80018da:	2200      	movne	r2, #0
 80018dc:	2201      	moveq	r2, #1
	if (SSD1306.Inverted) 
 80018de:	4d67      	ldr	r5, [pc, #412]	; (8001a7c <ssd1306_WriteChar+0x1e4>)
		color = (SSD1306_COLOR)!color;
 80018e0:	bf08      	it	eq
 80018e2:	2000      	moveq	r0, #0
	if (SSD1306.Inverted) 
 80018e4:	792d      	ldrb	r5, [r5, #4]
		color = (SSD1306_COLOR)!color;
 80018e6:	bf18      	it	ne
 80018e8:	2001      	movne	r0, #1
 80018ea:	4565      	cmp	r5, ip
 80018ec:	bf14      	ite	ne
 80018ee:	4613      	movne	r3, r2
 80018f0:	4610      	moveq	r0, r2
 80018f2:	9303      	str	r3, [sp, #12]
 80018f4:	9b04      	ldr	r3, [sp, #16]
 80018f6:	9a07      	ldr	r2, [sp, #28]
 80018f8:	f1a3 0920 	sub.w	r9, r3, #32
 80018fc:	9b00      	ldr	r3, [sp, #0]
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018fe:	f8df e180 	ldr.w	lr, [pc, #384]	; 8001a80 <ssd1306_WriteChar+0x1e8>
 8001902:	fb03 f909 	mul.w	r9, r3, r9
 8001906:	9002      	str	r0, [sp, #8]
 8001908:	b2e3      	uxtb	r3, r4
 800190a:	eb02 0949 	add.w	r9, r2, r9, lsl #1
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800190e:	f839 0b02 	ldrh.w	r0, [r9], #2
		for (j = 0; j < Font.FontWidth; j++)
 8001912:	2900      	cmp	r1, #0
 8001914:	d039      	beq.n	800198a <ssd1306_WriteChar+0xf2>
 8001916:	9a01      	ldr	r2, [sp, #4]
 8001918:	eb0c 0402 	add.w	r4, ip, r2
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800191c:	2201      	movs	r2, #1
 800191e:	b2e4      	uxtb	r4, r4
 8001920:	f004 0707 	and.w	r7, r4, #7
 8001924:	fa02 f707 	lsl.w	r7, r2, r7
 8001928:	b27f      	sxtb	r7, r7
 800192a:	08e2      	lsrs	r2, r4, #3
 800192c:	2c3f      	cmp	r4, #63	; 0x3f
 800192e:	ea6f 0807 	mvn.w	r8, r7
 8001932:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 8001936:	d828      	bhi.n	800198a <ssd1306_WriteChar+0xf2>
 8001938:	9c03      	ldr	r4, [sp, #12]
 800193a:	2c01      	cmp	r4, #1
 800193c:	9c02      	ldr	r4, [sp, #8]
 800193e:	d035      	beq.n	80019ac <ssd1306_WriteChar+0x114>
 8001940:	2c00      	cmp	r4, #0
 8001942:	d159      	bne.n	80019f8 <ssd1306_WriteChar+0x160>
 8001944:	4626      	mov	r6, r4
 8001946:	e00a      	b.n	800195e <ssd1306_WriteChar+0xc6>
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001948:	0624      	lsls	r4, r4, #24
 800194a:	d405      	bmi.n	8001958 <ssd1306_WriteChar+0xc0>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800194c:	f81e 400a 	ldrb.w	r4, [lr, sl]
 8001950:	ea08 0404 	and.w	r4, r8, r4
 8001954:	f80e 400a 	strb.w	r4, [lr, sl]
		for (j = 0; j < Font.FontWidth; j++)
 8001958:	3601      	adds	r6, #1
 800195a:	42b1      	cmp	r1, r6
 800195c:	d015      	beq.n	800198a <ssd1306_WriteChar+0xf2>
 800195e:	199c      	adds	r4, r3, r6
 8001960:	4625      	mov	r5, r4
			if ((b << j) & 0x8000) 
 8001962:	fa00 f706 	lsl.w	r7, r0, r6
 8001966:	b2e4      	uxtb	r4, r4
 8001968:	043f      	lsls	r7, r7, #16
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800196a:	eb04 0a02 	add.w	sl, r4, r2
 800196e:	b2ed      	uxtb	r5, r5
			if ((b << j) & 0x8000) 
 8001970:	d5ea      	bpl.n	8001948 <ssd1306_WriteChar+0xb0>
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001972:	062f      	lsls	r7, r5, #24
 8001974:	d4f0      	bmi.n	8001958 <ssd1306_WriteChar+0xc0>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001976:	4415      	add	r5, r2
 8001978:	f81e 4005 	ldrb.w	r4, [lr, r5]
		for (j = 0; j < Font.FontWidth; j++)
 800197c:	3601      	adds	r6, #1
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800197e:	ea08 0404 	and.w	r4, r8, r4
		for (j = 0; j < Font.FontWidth; j++)
 8001982:	42b1      	cmp	r1, r6
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001984:	f80e 4005 	strb.w	r4, [lr, r5]
		for (j = 0; j < Font.FontWidth; j++)
 8001988:	d1e9      	bne.n	800195e <ssd1306_WriteChar+0xc6>
	for (i = 0; i < Font.FontHeight; i++)
 800198a:	9a00      	ldr	r2, [sp, #0]
 800198c:	f10c 0c01 	add.w	ip, ip, #1
 8001990:	4594      	cmp	ip, r2
 8001992:	d1bc      	bne.n	800190e <ssd1306_WriteChar+0x76>
			}
		}
	}
	
	// De huidige positie is nu verplaatst
	SSD1306.CurrentX += Font.FontWidth;
 8001994:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <ssd1306_WriteChar+0x1e4>)
 8001996:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	
	// We geven het geschreven char terug voor validatie
	return ch;
 800199a:	9804      	ldr	r0, [sp, #16]
	SSD1306.CurrentX += Font.FontWidth;
 800199c:	801a      	strh	r2, [r3, #0]
}
 800199e:	b009      	add	sp, #36	; 0x24
 80019a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 80019a4:	2000      	movs	r0, #0
}
 80019a6:	b009      	add	sp, #36	; 0x24
 80019a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019ac:	2c00      	cmp	r4, #0
 80019ae:	d144      	bne.n	8001a3a <ssd1306_WriteChar+0x1a2>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019b0:	4626      	mov	r6, r4
 80019b2:	199c      	adds	r4, r3, r6
 80019b4:	4625      	mov	r5, r4
			if ((b << j) & 0x8000) 
 80019b6:	fa00 fa06 	lsl.w	sl, r0, r6
 80019ba:	b2e4      	uxtb	r4, r4
 80019bc:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80019c0:	eb04 0b02 	add.w	fp, r4, r2
 80019c4:	b2ed      	uxtb	r5, r5
			if ((b << j) & 0x8000) 
 80019c6:	d00a      	beq.n	80019de <ssd1306_WriteChar+0x146>
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80019c8:	0625      	lsls	r5, r4, #24
 80019ca:	d404      	bmi.n	80019d6 <ssd1306_WriteChar+0x13e>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80019cc:	f81e 400b 	ldrb.w	r4, [lr, fp]
 80019d0:	433c      	orrs	r4, r7
 80019d2:	f80e 400b 	strb.w	r4, [lr, fp]
		for (j = 0; j < Font.FontWidth; j++)
 80019d6:	3601      	adds	r6, #1
 80019d8:	42b1      	cmp	r1, r6
 80019da:	d1ea      	bne.n	80019b2 <ssd1306_WriteChar+0x11a>
 80019dc:	e7d5      	b.n	800198a <ssd1306_WriteChar+0xf2>
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80019de:	062c      	lsls	r4, r5, #24
 80019e0:	d4f9      	bmi.n	80019d6 <ssd1306_WriteChar+0x13e>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019e2:	4415      	add	r5, r2
 80019e4:	f81e 4005 	ldrb.w	r4, [lr, r5]
		for (j = 0; j < Font.FontWidth; j++)
 80019e8:	3601      	adds	r6, #1
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019ea:	ea08 0404 	and.w	r4, r8, r4
		for (j = 0; j < Font.FontWidth; j++)
 80019ee:	42b1      	cmp	r1, r6
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019f0:	f80e 4005 	strb.w	r4, [lr, r5]
		for (j = 0; j < Font.FontWidth; j++)
 80019f4:	d1dd      	bne.n	80019b2 <ssd1306_WriteChar+0x11a>
 80019f6:	e7c8      	b.n	800198a <ssd1306_WriteChar+0xf2>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019f8:	2500      	movs	r5, #0
 80019fa:	e00a      	b.n	8001a12 <ssd1306_WriteChar+0x17a>
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80019fc:	0626      	lsls	r6, r4, #24
 80019fe:	d405      	bmi.n	8001a0c <ssd1306_WriteChar+0x174>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a00:	f81e 400b 	ldrb.w	r4, [lr, fp]
 8001a04:	ea08 0404 	and.w	r4, r8, r4
 8001a08:	f80e 400b 	strb.w	r4, [lr, fp]
		for (j = 0; j < Font.FontWidth; j++)
 8001a0c:	3501      	adds	r5, #1
 8001a0e:	42a9      	cmp	r1, r5
 8001a10:	d0bb      	beq.n	800198a <ssd1306_WriteChar+0xf2>
 8001a12:	195c      	adds	r4, r3, r5
 8001a14:	4626      	mov	r6, r4
			if ((b << j) & 0x8000) 
 8001a16:	fa00 fa05 	lsl.w	sl, r0, r5
 8001a1a:	b2e4      	uxtb	r4, r4
 8001a1c:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a20:	eb04 0b02 	add.w	fp, r4, r2
 8001a24:	b2f6      	uxtb	r6, r6
			if ((b << j) & 0x8000) 
 8001a26:	d1e9      	bne.n	80019fc <ssd1306_WriteChar+0x164>
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001a28:	0634      	lsls	r4, r6, #24
 8001a2a:	d4ef      	bmi.n	8001a0c <ssd1306_WriteChar+0x174>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a2c:	4416      	add	r6, r2
 8001a2e:	f81e 4006 	ldrb.w	r4, [lr, r6]
 8001a32:	433c      	orrs	r4, r7
 8001a34:	f80e 4006 	strb.w	r4, [lr, r6]
 8001a38:	e7e8      	b.n	8001a0c <ssd1306_WriteChar+0x174>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a3a:	2500      	movs	r5, #0
 8001a3c:	e009      	b.n	8001a52 <ssd1306_WriteChar+0x1ba>
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001a3e:	0626      	lsls	r6, r4, #24
 8001a40:	d404      	bmi.n	8001a4c <ssd1306_WriteChar+0x1b4>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a42:	f81e 400a 	ldrb.w	r4, [lr, sl]
 8001a46:	433c      	orrs	r4, r7
 8001a48:	f80e 400a 	strb.w	r4, [lr, sl]
		for (j = 0; j < Font.FontWidth; j++)
 8001a4c:	3501      	adds	r5, #1
 8001a4e:	42a9      	cmp	r1, r5
 8001a50:	d09b      	beq.n	800198a <ssd1306_WriteChar+0xf2>
 8001a52:	195c      	adds	r4, r3, r5
 8001a54:	4626      	mov	r6, r4
			if ((b << j) & 0x8000) 
 8001a56:	fa00 f805 	lsl.w	r8, r0, r5
 8001a5a:	b2e4      	uxtb	r4, r4
 8001a5c:	f418 4f00 	tst.w	r8, #32768	; 0x8000
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a60:	eb04 0a02 	add.w	sl, r4, r2
 8001a64:	b2f6      	uxtb	r6, r6
			if ((b << j) & 0x8000) 
 8001a66:	d0ea      	beq.n	8001a3e <ssd1306_WriteChar+0x1a6>
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001a68:	0634      	lsls	r4, r6, #24
 8001a6a:	d4ef      	bmi.n	8001a4c <ssd1306_WriteChar+0x1b4>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a6c:	4416      	add	r6, r2
 8001a6e:	f81e 4006 	ldrb.w	r4, [lr, r6]
 8001a72:	433c      	orrs	r4, r7
 8001a74:	f80e 4006 	strb.w	r4, [lr, r6]
 8001a78:	e7e8      	b.n	8001a4c <ssd1306_WriteChar+0x1b4>
 8001a7a:	bf00      	nop
 8001a7c:	20000030 	.word	0x20000030
 8001a80:	20000038 	.word	0x20000038

08001a84 <ssd1306_WriteString>:
// 	str => string om op het scherm te schrijven
//	Font => Het font dat gebruikt moet worden
//	color => Black or White
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	4604      	mov	r4, r0
	// We schrijven alle char tot een nulbyte
	while (*str) 
 8001a88:	7800      	ldrb	r0, [r0, #0]
{
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	e88d 0006 	stmia.w	sp, {r1, r2}
	while (*str) 
 8001a90:	b180      	cbz	r0, 8001ab4 <ssd1306_WriteString+0x30>
 8001a92:	466d      	mov	r5, sp
 8001a94:	461e      	mov	r6, r3
 8001a96:	e002      	b.n	8001a9e <ssd1306_WriteString+0x1a>
 8001a98:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001a9c:	b150      	cbz	r0, 8001ab4 <ssd1306_WriteString+0x30>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001a9e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001aa2:	4633      	mov	r3, r6
 8001aa4:	f7ff fef8 	bl	8001898 <ssd1306_WriteChar>
 8001aa8:	7823      	ldrb	r3, [r4, #0]
 8001aaa:	4298      	cmp	r0, r3
 8001aac:	d0f4      	beq.n	8001a98 <ssd1306_WriteString+0x14>
		str++;
	}
	
	// Alles gelukt, we sturen dus 0 terug
	return *str;
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd70      	pop	{r4, r5, r6, pc}
{
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	b002      	add	sp, #8
 8001aba:	bd70      	pop	{r4, r5, r6, pc}

08001abc <ssd1306_SetCursor>:
//	Zet de cursor op een coordinaat
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001abc:	4b01      	ldr	r3, [pc, #4]	; (8001ac4 <ssd1306_SetCursor+0x8>)
 8001abe:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001ac0:	8059      	strh	r1, [r3, #2]
 8001ac2:	4770      	bx	lr
 8001ac4:	20000030 	.word	0x20000030

08001ac8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac8:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <HAL_MspInit+0x88>)
{
 8001aca:	b500      	push	{lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001acc:	699a      	ldr	r2, [r3, #24]
{
 8001ace:	b083      	sub	sp, #12
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad0:	f042 0201 	orr.w	r2, r2, #1
 8001ad4:	619a      	str	r2, [r3, #24]
 8001ad6:	699b      	ldr	r3, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad8:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae2:	f7fe fb8d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f06f 000b 	mvn.w	r0, #11
 8001aec:	4611      	mov	r1, r2
 8001aee:	f7fe fb99 	bl	8000224 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	f06f 000a 	mvn.w	r0, #10
 8001af8:	4611      	mov	r1, r2
 8001afa:	f7fe fb93 	bl	8000224 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	f06f 0009 	mvn.w	r0, #9
 8001b04:	4611      	mov	r1, r2
 8001b06:	f7fe fb8d 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f06f 0004 	mvn.w	r0, #4
 8001b10:	4611      	mov	r1, r2
 8001b12:	f7fe fb87 	bl	8000224 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	f06f 0003 	mvn.w	r0, #3
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	f7fe fb81 	bl	8000224 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f06f 0001 	mvn.w	r0, #1
 8001b28:	4611      	mov	r1, r2
 8001b2a:	f7fe fb7b 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b34:	4611      	mov	r1, r2
 8001b36:	f7fe fb75 	bl	8000224 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b3a:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <HAL_MspInit+0x8c>)
 8001b3c:	6853      	ldr	r3, [r2, #4]
 8001b3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b46:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b48:	b003      	add	sp, #12
 8001b4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010000 	.word	0x40010000

08001b58 <NMI_Handler>:
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop

08001b5c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001b5c:	e7fe      	b.n	8001b5c <HardFault_Handler>
 8001b5e:	bf00      	nop

08001b60 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001b60:	e7fe      	b.n	8001b60 <MemManage_Handler>
 8001b62:	bf00      	nop

08001b64 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001b64:	e7fe      	b.n	8001b64 <BusFault_Handler>
 8001b66:	bf00      	nop

08001b68 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001b68:	e7fe      	b.n	8001b68 <UsageFault_Handler>
 8001b6a:	bf00      	nop

08001b6c <SVC_Handler>:
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop

08001b70 <DebugMon_Handler>:
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop

08001b78 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001b78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7a:	f7fe fb1d 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001b82:	f7fe bbab 	b.w	80002dc <HAL_SYSTICK_IRQHandler>
 8001b86:	bf00      	nop

08001b88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b88:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b8a:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b8e:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8001b94:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 8001b96:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b98:	480e      	ldr	r0, [pc, #56]	; (8001bd4 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 8001b9a:	f041 0101 	orr.w	r1, r1, #1
 8001b9e:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8001ba0:	6859      	ldr	r1, [r3, #4]
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001bac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bb0:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bb8:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001bc0:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8001bc2:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001bc4:	6084      	str	r4, [r0, #8]
#endif 
}
 8001bc6:	bc30      	pop	{r4, r5}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	f8ff0000 	.word	0xf8ff0000
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001bd8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001bda:	e003      	b.n	8001be4 <LoopCopyDataInit>

08001bdc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bde:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001be0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001be2:	3104      	adds	r1, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001be4:	480a      	ldr	r0, [pc, #40]	; (8001c10 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001be8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bec:	d3f6      	bcc.n	8001bdc <CopyDataInit>
  ldr r2, =_sbss
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bf0:	e002      	b.n	8001bf8 <LoopFillZerobss>

08001bf2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bf4:	f842 3b04 	str.w	r3, [r2], #4

08001bf8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001bfa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001bfc:	d3f9      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bfe:	f7ff ffc3 	bl	8001b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c02:	f000 f80f 	bl	8001c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c06:	f7ff f8af 	bl	8000d68 <main>
  bx lr
 8001c0a:	4770      	bx	lr
  ldr r3, =_sidata
 8001c0c:	08002b1c 	.word	0x08002b1c
  ldr r0, =_sdata
 8001c10:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c14:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8001c18:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8001c1c:	2000063c 	.word	0x2000063c

08001c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <ADC1_2_IRQHandler>
	...

08001c24 <__libc_init_array>:
 8001c24:	b570      	push	{r4, r5, r6, lr}
 8001c26:	2500      	movs	r5, #0
 8001c28:	4e0c      	ldr	r6, [pc, #48]	; (8001c5c <__libc_init_array+0x38>)
 8001c2a:	4c0d      	ldr	r4, [pc, #52]	; (8001c60 <__libc_init_array+0x3c>)
 8001c2c:	1ba4      	subs	r4, r4, r6
 8001c2e:	10a4      	asrs	r4, r4, #2
 8001c30:	42a5      	cmp	r5, r4
 8001c32:	d109      	bne.n	8001c48 <__libc_init_array+0x24>
 8001c34:	f000 f87c 	bl	8001d30 <_init>
 8001c38:	2500      	movs	r5, #0
 8001c3a:	4e0a      	ldr	r6, [pc, #40]	; (8001c64 <__libc_init_array+0x40>)
 8001c3c:	4c0a      	ldr	r4, [pc, #40]	; (8001c68 <__libc_init_array+0x44>)
 8001c3e:	1ba4      	subs	r4, r4, r6
 8001c40:	10a4      	asrs	r4, r4, #2
 8001c42:	42a5      	cmp	r5, r4
 8001c44:	d105      	bne.n	8001c52 <__libc_init_array+0x2e>
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
 8001c48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c4c:	4798      	blx	r3
 8001c4e:	3501      	adds	r5, #1
 8001c50:	e7ee      	b.n	8001c30 <__libc_init_array+0xc>
 8001c52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c56:	4798      	blx	r3
 8001c58:	3501      	adds	r5, #1
 8001c5a:	e7f2      	b.n	8001c42 <__libc_init_array+0x1e>
 8001c5c:	08002b14 	.word	0x08002b14
 8001c60:	08002b14 	.word	0x08002b14
 8001c64:	08002b14 	.word	0x08002b14
 8001c68:	08002b18 	.word	0x08002b18

08001c6c <__itoa>:
 8001c6c:	1e93      	subs	r3, r2, #2
 8001c6e:	2b22      	cmp	r3, #34	; 0x22
 8001c70:	b510      	push	{r4, lr}
 8001c72:	460c      	mov	r4, r1
 8001c74:	d904      	bls.n	8001c80 <__itoa+0x14>
 8001c76:	2300      	movs	r3, #0
 8001c78:	461c      	mov	r4, r3
 8001c7a:	700b      	strb	r3, [r1, #0]
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	bd10      	pop	{r4, pc}
 8001c80:	2a0a      	cmp	r2, #10
 8001c82:	d109      	bne.n	8001c98 <__itoa+0x2c>
 8001c84:	2800      	cmp	r0, #0
 8001c86:	da07      	bge.n	8001c98 <__itoa+0x2c>
 8001c88:	232d      	movs	r3, #45	; 0x2d
 8001c8a:	700b      	strb	r3, [r1, #0]
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	4240      	negs	r0, r0
 8001c90:	4421      	add	r1, r4
 8001c92:	f000 f80d 	bl	8001cb0 <__utoa>
 8001c96:	e7f1      	b.n	8001c7c <__itoa+0x10>
 8001c98:	2100      	movs	r1, #0
 8001c9a:	e7f9      	b.n	8001c90 <__itoa+0x24>

08001c9c <itoa>:
 8001c9c:	f7ff bfe6 	b.w	8001c6c <__itoa>

08001ca0 <memset>:
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4402      	add	r2, r0
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d100      	bne.n	8001caa <memset+0xa>
 8001ca8:	4770      	bx	lr
 8001caa:	f803 1b01 	strb.w	r1, [r3], #1
 8001cae:	e7f9      	b.n	8001ca4 <memset+0x4>

08001cb0 <__utoa>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	b08b      	sub	sp, #44	; 0x2c
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	460f      	mov	r7, r1
 8001cb8:	466d      	mov	r5, sp
 8001cba:	4c1c      	ldr	r4, [pc, #112]	; (8001d2c <__utoa+0x7c>)
 8001cbc:	f104 0e20 	add.w	lr, r4, #32
 8001cc0:	462e      	mov	r6, r5
 8001cc2:	6820      	ldr	r0, [r4, #0]
 8001cc4:	6861      	ldr	r1, [r4, #4]
 8001cc6:	3408      	adds	r4, #8
 8001cc8:	c603      	stmia	r6!, {r0, r1}
 8001cca:	4574      	cmp	r4, lr
 8001ccc:	4635      	mov	r5, r6
 8001cce:	d1f7      	bne.n	8001cc0 <__utoa+0x10>
 8001cd0:	7921      	ldrb	r1, [r4, #4]
 8001cd2:	6820      	ldr	r0, [r4, #0]
 8001cd4:	7131      	strb	r1, [r6, #4]
 8001cd6:	1e91      	subs	r1, r2, #2
 8001cd8:	2922      	cmp	r1, #34	; 0x22
 8001cda:	6030      	str	r0, [r6, #0]
 8001cdc:	f04f 0100 	mov.w	r1, #0
 8001ce0:	d904      	bls.n	8001cec <__utoa+0x3c>
 8001ce2:	7039      	strb	r1, [r7, #0]
 8001ce4:	460f      	mov	r7, r1
 8001ce6:	4638      	mov	r0, r7
 8001ce8:	b00b      	add	sp, #44	; 0x2c
 8001cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cec:	1e78      	subs	r0, r7, #1
 8001cee:	4606      	mov	r6, r0
 8001cf0:	fbb3 f5f2 	udiv	r5, r3, r2
 8001cf4:	fb02 3315 	mls	r3, r2, r5, r3
 8001cf8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8001cfc:	4473      	add	r3, lr
 8001cfe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d02:	1c4c      	adds	r4, r1, #1
 8001d04:	f806 3f01 	strb.w	r3, [r6, #1]!
 8001d08:	462b      	mov	r3, r5
 8001d0a:	b965      	cbnz	r5, 8001d26 <__utoa+0x76>
 8001d0c:	553d      	strb	r5, [r7, r4]
 8001d0e:	187a      	adds	r2, r7, r1
 8001d10:	1acc      	subs	r4, r1, r3
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	dae7      	bge.n	8001ce6 <__utoa+0x36>
 8001d16:	7844      	ldrb	r4, [r0, #1]
 8001d18:	7815      	ldrb	r5, [r2, #0]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f800 5f01 	strb.w	r5, [r0, #1]!
 8001d20:	f802 4901 	strb.w	r4, [r2], #-1
 8001d24:	e7f4      	b.n	8001d10 <__utoa+0x60>
 8001d26:	4621      	mov	r1, r4
 8001d28:	e7e2      	b.n	8001cf0 <__utoa+0x40>
 8001d2a:	bf00      	nop
 8001d2c:	08002aec 	.word	0x08002aec

08001d30 <_init>:
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d32:	bf00      	nop
 8001d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d36:	bc08      	pop	{r3}
 8001d38:	469e      	mov	lr, r3
 8001d3a:	4770      	bx	lr

08001d3c <_fini>:
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3e:	bf00      	nop
 8001d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d42:	bc08      	pop	{r3}
 8001d44:	469e      	mov	lr, r3
 8001d46:	4770      	bx	lr
