
STM32_Soft_I2C_AT24CXX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dbc  08001d2c  08001d2c  00011d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002aec  08002aec  00012aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08002af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000638  20000014  08002b04  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000064c  08002b04  0002064c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f750  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000249f  00000000  00000000  0002f78d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003235  00000000  00000000  00031c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004e0  00000000  00000000  00034e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000df0  00000000  00000000  00035348  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000149f0  00000000  00000000  00036138  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007269  00000000  00000000  0004ab28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000690c5  00000000  00000000  00051d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000f7  00000000  00000000  000bae56  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000c30  00000000  00000000  000baf50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d14 	.word	0x08001d14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001d14 	.word	0x08001d14

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000152:	490d      	ldr	r1, [pc, #52]	; (8000188 <HAL_InitTick+0x3c>)
 8000154:	4a0d      	ldr	r2, [pc, #52]	; (800018c <HAL_InitTick+0x40>)
 8000156:	7809      	ldrb	r1, [r1, #0]
 8000158:	6812      	ldr	r2, [r2, #0]
 800015a:	fbb3 f3f1 	udiv	r3, r3, r1
{
 800015e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000160:	fbb2 f0f3 	udiv	r0, r2, r3
 8000164:	f000 f894 	bl	8000290 <HAL_SYSTICK_Config>
 8000168:	b908      	cbnz	r0, 800016e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2d0f      	cmp	r5, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000170:	bd38      	pop	{r3, r4, r5, pc}
 8000172:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000174:	4602      	mov	r2, r0
 8000176:	4629      	mov	r1, r5
 8000178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800017c:	f000 f852 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <HAL_InitTick+0x44>)
 8000182:	4620      	mov	r0, r4
 8000184:	601d      	str	r5, [r3, #0]
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000010 	.word	0x20000010
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fcac 	bl	8001b08 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000438 	.word	0x20000438
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000438 	.word	0x20000438

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80001e6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80001e8:	d002      	beq.n	80001f0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ea:	4b04      	ldr	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	42a0      	cmp	r0, r4
 80001f8:	d3fa      	bcc.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000200:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	4a06      	ldr	r2, [pc, #24]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000208:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800020a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020e:	400b      	ands	r3, r1
 8000210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000218:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b430      	push	{r4, r5}
 8000228:	68db      	ldr	r3, [r3, #12]
 800022a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c3 0507 	rsb	r5, r3, #7
 8000232:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000234:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000238:	bf28      	it	cs
 800023a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023c:	2c06      	cmp	r4, #6
 800023e:	d919      	bls.n	8000274 <HAL_NVIC_SetPriority+0x50>
 8000240:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000244:	3b03      	subs	r3, #3
 8000246:	409c      	lsls	r4, r3
 8000248:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000250:	40aa      	lsls	r2, r5
 8000252:	ea21 0102 	bic.w	r1, r1, r2
 8000256:	fa01 f203 	lsl.w	r2, r1, r3
 800025a:	4322      	orrs	r2, r4
 800025c:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) < 0)
 800025e:	2800      	cmp	r0, #0
 8000260:	b2d2      	uxtb	r2, r2
 8000262:	db0a      	blt.n	800027a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000264:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000268:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800026c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000270:	bc30      	pop	{r4, r5}
 8000272:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000274:	2400      	movs	r4, #0
 8000276:	4623      	mov	r3, r4
 8000278:	e7e8      	b.n	800024c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <HAL_NVIC_SetPriority+0x68>)
 800027c:	f000 000f 	and.w	r0, r0, #15
 8000280:	4403      	add	r3, r0
 8000282:	761a      	strb	r2, [r3, #24]
 8000284:	bc30      	pop	{r4, r5}
 8000286:	4770      	bx	lr
 8000288:	e000ed00 	.word	0xe000ed00
 800028c:	e000ecfc 	.word	0xe000ecfc

08000290 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000290:	3801      	subs	r0, #1
 8000292:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000296:	d20d      	bcs.n	80002b4 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000298:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029a:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800029c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029e:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	4c06      	ldr	r4, [pc, #24]	; (80002bc <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002aa:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 80002ac:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b0:	6019      	str	r1, [r3, #0]
 80002b2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002b4:	2001      	movs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	e000e010 	.word	0xe000e010
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002c4:	f04f 0800 	mov.w	r8, #0
{
 80002c8:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002ca:	4644      	mov	r4, r8
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80002cc:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8000490 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80002d0:	4e69      	ldr	r6, [pc, #420]	; (8000478 <HAL_GPIO_Init+0x1b8>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80002d2:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8000494 <HAL_GPIO_Init+0x1d4>
 80002d6:	e002      	b.n	80002de <HAL_GPIO_Init+0x1e>
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002d8:	3401      	adds	r4, #1
 80002da:	2c10      	cmp	r4, #16
 80002dc:	d078      	beq.n	80003d0 <HAL_GPIO_Init+0x110>
    ioposition = (0x01U << position);
 80002de:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e0:	680a      	ldr	r2, [r1, #0]
    ioposition = (0x01U << position);
 80002e2:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e4:	401a      	ands	r2, r3
    if (iocurrent == ioposition)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d1f6      	bne.n	80002d8 <HAL_GPIO_Init+0x18>
      switch (GPIO_Init->Mode)
 80002ea:	684d      	ldr	r5, [r1, #4]
 80002ec:	2d12      	cmp	r5, #18
 80002ee:	f000 809c 	beq.w	800042a <HAL_GPIO_Init+0x16a>
 80002f2:	d87e      	bhi.n	80003f2 <HAL_GPIO_Init+0x132>
 80002f4:	2d02      	cmp	r5, #2
 80002f6:	f000 8094 	beq.w	8000422 <HAL_GPIO_Init+0x162>
 80002fa:	d974      	bls.n	80003e6 <HAL_GPIO_Init+0x126>
 80002fc:	2d03      	cmp	r5, #3
 80002fe:	f000 808d 	beq.w	800041c <HAL_GPIO_Init+0x15c>
 8000302:	2d11      	cmp	r5, #17
 8000304:	d102      	bne.n	800030c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000306:	68cb      	ldr	r3, [r1, #12]
 8000308:	f103 0804 	add.w	r8, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800030c:	2aff      	cmp	r2, #255	; 0xff
 800030e:	d862      	bhi.n	80003d6 <HAL_GPIO_Init+0x116>
 8000310:	4682      	mov	sl, r0
 8000312:	6803      	ldr	r3, [r0, #0]
 8000314:	00a5      	lsls	r5, r4, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000316:	f04f 090f 	mov.w	r9, #15
 800031a:	fa09 fb05 	lsl.w	fp, r9, r5
 800031e:	ea23 030b 	bic.w	r3, r3, fp
 8000322:	fa08 f505 	lsl.w	r5, r8, r5
 8000326:	432b      	orrs	r3, r5
 8000328:	f8ca 3000 	str.w	r3, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800032c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000330:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000334:	d0d0      	beq.n	80002d8 <HAL_GPIO_Init+0x18>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000336:	4f51      	ldr	r7, [pc, #324]	; (800047c <HAL_GPIO_Init+0x1bc>)
 8000338:	f024 0503 	bic.w	r5, r4, #3
 800033c:	69bb      	ldr	r3, [r7, #24]
 800033e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	61bb      	str	r3, [r7, #24]
 8000348:	69bb      	ldr	r3, [r7, #24]
 800034a:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000354:	f004 0b03 	and.w	fp, r4, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000358:	9b01      	ldr	r3, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800035a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800035e:	68ab      	ldr	r3, [r5, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000360:	fa09 f90b 	lsl.w	r9, r9, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000364:	4560      	cmp	r0, ip
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000366:	ea23 0309 	bic.w	r3, r3, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800036a:	d00f      	beq.n	800038c <HAL_GPIO_Init+0xcc>
 800036c:	4570      	cmp	r0, lr
 800036e:	d060      	beq.n	8000432 <HAL_GPIO_Init+0x172>
 8000370:	4f43      	ldr	r7, [pc, #268]	; (8000480 <HAL_GPIO_Init+0x1c0>)
 8000372:	42b8      	cmp	r0, r7
 8000374:	d078      	beq.n	8000468 <HAL_GPIO_Init+0x1a8>
 8000376:	4f43      	ldr	r7, [pc, #268]	; (8000484 <HAL_GPIO_Init+0x1c4>)
 8000378:	42b8      	cmp	r0, r7
 800037a:	bf0c      	ite	eq
 800037c:	f04f 0903 	moveq.w	r9, #3
 8000380:	f04f 0904 	movne.w	r9, #4
 8000384:	fa09 fb0b 	lsl.w	fp, r9, fp
 8000388:	ea43 030b 	orr.w	r3, r3, fp
        AFIO->EXTICR[position >> 2U] = temp;
 800038c:	60ab      	str	r3, [r5, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800038e:	6833      	ldr	r3, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000390:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000394:	bf14      	ite	ne
 8000396:	4313      	orrne	r3, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000398:	4393      	biceq	r3, r2
 800039a:	6033      	str	r3, [r6, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800039c:	6873      	ldr	r3, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800039e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003a2:	bf14      	ite	ne
 80003a4:	4313      	orrne	r3, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003a6:	4393      	biceq	r3, r2
 80003a8:	6073      	str	r3, [r6, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003aa:	68b3      	ldr	r3, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003ac:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003b0:	bf14      	ite	ne
 80003b2:	4313      	orrne	r3, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003b4:	4393      	biceq	r3, r2
 80003b6:	60b3      	str	r3, [r6, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003b8:	68f3      	ldr	r3, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ba:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003be:	f104 0401 	add.w	r4, r4, #1
          SET_BIT(EXTI->FTSR, iocurrent);
 80003c2:	bf14      	ite	ne
 80003c4:	431a      	orrne	r2, r3
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003c6:	ea23 0202 	biceq.w	r2, r3, r2
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003ca:	2c10      	cmp	r4, #16
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003cc:	60f2      	str	r2, [r6, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003ce:	d186      	bne.n	80002de <HAL_GPIO_Init+0x1e>
        }
      }
    }
  }
}
 80003d0:	b003      	add	sp, #12
 80003d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003d6:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
 80003da:	3d08      	subs	r5, #8
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003dc:	6843      	ldr	r3, [r0, #4]
 80003de:	00ad      	lsls	r5, r5, #2
 80003e0:	f100 0a04 	add.w	sl, r0, #4
 80003e4:	e797      	b.n	8000316 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 80003e6:	b1a5      	cbz	r5, 8000412 <HAL_GPIO_Init+0x152>
 80003e8:	2d01      	cmp	r5, #1
 80003ea:	d18f      	bne.n	800030c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80003ec:	f8d1 800c 	ldr.w	r8, [r1, #12]
          break;
 80003f0:	e78c      	b.n	800030c <HAL_GPIO_Init+0x4c>
      switch (GPIO_Init->Mode)
 80003f2:	4f25      	ldr	r7, [pc, #148]	; (8000488 <HAL_GPIO_Init+0x1c8>)
 80003f4:	42bd      	cmp	r5, r7
 80003f6:	d00c      	beq.n	8000412 <HAL_GPIO_Init+0x152>
 80003f8:	d929      	bls.n	800044e <HAL_GPIO_Init+0x18e>
 80003fa:	4f24      	ldr	r7, [pc, #144]	; (800048c <HAL_GPIO_Init+0x1cc>)
 80003fc:	42bd      	cmp	r5, r7
 80003fe:	d008      	beq.n	8000412 <HAL_GPIO_Init+0x152>
 8000400:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000404:	42bd      	cmp	r5, r7
 8000406:	d004      	beq.n	8000412 <HAL_GPIO_Init+0x152>
 8000408:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8000498 <HAL_GPIO_Init+0x1d8>
 800040c:	454d      	cmp	r5, r9
 800040e:	f47f af7d 	bne.w	800030c <HAL_GPIO_Init+0x4c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000412:	688d      	ldr	r5, [r1, #8]
 8000414:	b9a5      	cbnz	r5, 8000440 <HAL_GPIO_Init+0x180>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000416:	f04f 0804 	mov.w	r8, #4
 800041a:	e777      	b.n	800030c <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800041c:	f04f 0800 	mov.w	r8, #0
 8000420:	e774      	b.n	800030c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000422:	68cb      	ldr	r3, [r1, #12]
 8000424:	f103 0808 	add.w	r8, r3, #8
          break;
 8000428:	e770      	b.n	800030c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800042a:	68cb      	ldr	r3, [r1, #12]
 800042c:	f103 080c 	add.w	r8, r3, #12
          break;
 8000430:	e76c      	b.n	800030c <HAL_GPIO_Init+0x4c>
 8000432:	f04f 0901 	mov.w	r9, #1
 8000436:	fa09 fb0b 	lsl.w	fp, r9, fp
 800043a:	ea43 030b 	orr.w	r3, r3, fp
 800043e:	e7a5      	b.n	800038c <HAL_GPIO_Init+0xcc>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000440:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 8000442:	bf0c      	ite	eq
 8000444:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 8000446:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000448:	f04f 0808 	mov.w	r8, #8
 800044c:	e75e      	b.n	800030c <HAL_GPIO_Init+0x4c>
      switch (GPIO_Init->Mode)
 800044e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 800049c <HAL_GPIO_Init+0x1dc>
 8000452:	454d      	cmp	r5, r9
 8000454:	d0dd      	beq.n	8000412 <HAL_GPIO_Init+0x152>
 8000456:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800045a:	454d      	cmp	r5, r9
 800045c:	f47f af56 	bne.w	800030c <HAL_GPIO_Init+0x4c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000460:	688d      	ldr	r5, [r1, #8]
 8000462:	2d00      	cmp	r5, #0
 8000464:	d0d7      	beq.n	8000416 <HAL_GPIO_Init+0x156>
 8000466:	e7eb      	b.n	8000440 <HAL_GPIO_Init+0x180>
 8000468:	f04f 0902 	mov.w	r9, #2
 800046c:	fa09 fb0b 	lsl.w	fp, r9, fp
 8000470:	ea43 030b 	orr.w	r3, r3, fp
 8000474:	e78a      	b.n	800038c <HAL_GPIO_Init+0xcc>
 8000476:	bf00      	nop
 8000478:	40010400 	.word	0x40010400
 800047c:	40021000 	.word	0x40021000
 8000480:	40011000 	.word	0x40011000
 8000484:	40011400 	.word	0x40011400
 8000488:	10210000 	.word	0x10210000
 800048c:	10310000 	.word	0x10310000
 8000490:	40010800 	.word	0x40010800
 8000494:	40010c00 	.word	0x40010c00
 8000498:	10220000 	.word	0x10220000
 800049c:	10110000 	.word	0x10110000

080004a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004a0:	6883      	ldr	r3, [r0, #8]
 80004a2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80004a4:	bf14      	ite	ne
 80004a6:	2001      	movne	r0, #1
 80004a8:	2000      	moveq	r0, #0
 80004aa:	4770      	bx	lr

080004ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004ac:	b902      	cbnz	r2, 80004b0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004ae:	0409      	lsls	r1, r1, #16
 80004b0:	6101      	str	r1, [r0, #16]
  }
}
 80004b2:	4770      	bx	lr

080004b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b8:	6803      	ldr	r3, [r0, #0]
{
 80004ba:	b082      	sub	sp, #8
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004bc:	07dd      	lsls	r5, r3, #31
{
 80004be:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c0:	d530      	bpl.n	8000524 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004c2:	49ab      	ldr	r1, [pc, #684]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
 80004c4:	684a      	ldr	r2, [r1, #4]
 80004c6:	f002 020c 	and.w	r2, r2, #12
 80004ca:	2a04      	cmp	r2, #4
 80004cc:	f000 80da 	beq.w	8000684 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004d0:	684a      	ldr	r2, [r1, #4]
 80004d2:	f002 020c 	and.w	r2, r2, #12
 80004d6:	2a08      	cmp	r2, #8
 80004d8:	f000 80d0 	beq.w	800067c <HAL_RCC_OscConfig+0x1c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004dc:	6863      	ldr	r3, [r4, #4]
 80004de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004e2:	f000 810f 	beq.w	8000704 <HAL_RCC_OscConfig+0x250>
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	f000 8127 	beq.w	800073a <HAL_RCC_OscConfig+0x286>
 80004ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80004f0:	f000 81b5 	beq.w	800085e <HAL_RCC_OscConfig+0x3aa>
 80004f4:	4b9e      	ldr	r3, [pc, #632]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000504:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000506:	f7ff fe63 	bl	80001d0 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800050a:	4d99      	ldr	r5, [pc, #612]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 800050c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800050e:	e005      	b.n	800051c <HAL_RCC_OscConfig+0x68>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000510:	f7ff fe5e 	bl	80001d0 <HAL_GetTick>
 8000514:	1b80      	subs	r0, r0, r6
 8000516:	2864      	cmp	r0, #100	; 0x64
 8000518:	f200 810b 	bhi.w	8000732 <HAL_RCC_OscConfig+0x27e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800051c:	682b      	ldr	r3, [r5, #0]
 800051e:	039a      	lsls	r2, r3, #14
 8000520:	d5f6      	bpl.n	8000510 <HAL_RCC_OscConfig+0x5c>
 8000522:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000524:	079f      	lsls	r7, r3, #30
 8000526:	d528      	bpl.n	800057a <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000528:	4a91      	ldr	r2, [pc, #580]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
 800052a:	6851      	ldr	r1, [r2, #4]
 800052c:	f011 0f0c 	tst.w	r1, #12
 8000530:	f000 80b6 	beq.w	80006a0 <HAL_RCC_OscConfig+0x1ec>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000534:	6851      	ldr	r1, [r2, #4]
 8000536:	f001 010c 	and.w	r1, r1, #12
 800053a:	2908      	cmp	r1, #8
 800053c:	f000 80ac 	beq.w	8000698 <HAL_RCC_OscConfig+0x1e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000540:	6923      	ldr	r3, [r4, #16]
 8000542:	2b00      	cmp	r3, #0
 8000544:	f000 8141 	beq.w	80007ca <HAL_RCC_OscConfig+0x316>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000548:	2201      	movs	r2, #1
 800054a:	4b8a      	ldr	r3, [pc, #552]	; (8000774 <HAL_RCC_OscConfig+0x2c0>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800054c:	4d88      	ldr	r5, [pc, #544]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
        __HAL_RCC_HSI_ENABLE();
 800054e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000550:	f7ff fe3e 	bl	80001d0 <HAL_GetTick>
 8000554:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000556:	e005      	b.n	8000564 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000558:	f7ff fe3a 	bl	80001d0 <HAL_GetTick>
 800055c:	1b80      	subs	r0, r0, r6
 800055e:	2802      	cmp	r0, #2
 8000560:	f200 80e7 	bhi.w	8000732 <HAL_RCC_OscConfig+0x27e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000564:	682b      	ldr	r3, [r5, #0]
 8000566:	0798      	lsls	r0, r3, #30
 8000568:	d5f6      	bpl.n	8000558 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800056a:	682b      	ldr	r3, [r5, #0]
 800056c:	6962      	ldr	r2, [r4, #20]
 800056e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000572:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000576:	602b      	str	r3, [r5, #0]
 8000578:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800057a:	071a      	lsls	r2, r3, #28
 800057c:	d522      	bpl.n	80005c4 <HAL_RCC_OscConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800057e:	69a3      	ldr	r3, [r4, #24]
 8000580:	2b00      	cmp	r3, #0
 8000582:	f000 8098 	beq.w	80006b6 <HAL_RCC_OscConfig+0x202>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000586:	2201      	movs	r2, #1
 8000588:	4b7b      	ldr	r3, [pc, #492]	; (8000778 <HAL_RCC_OscConfig+0x2c4>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800058a:	4d79      	ldr	r5, [pc, #484]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
      __HAL_RCC_LSI_ENABLE();
 800058c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800058e:	f7ff fe1f 	bl	80001d0 <HAL_GetTick>
 8000592:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000594:	e005      	b.n	80005a2 <HAL_RCC_OscConfig+0xee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000596:	f7ff fe1b 	bl	80001d0 <HAL_GetTick>
 800059a:	1b80      	subs	r0, r0, r6
 800059c:	2802      	cmp	r0, #2
 800059e:	f200 80c8 	bhi.w	8000732 <HAL_RCC_OscConfig+0x27e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80005a4:	079b      	lsls	r3, r3, #30
 80005a6:	d5f6      	bpl.n	8000596 <HAL_RCC_OscConfig+0xe2>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005a8:	4b74      	ldr	r3, [pc, #464]	; (800077c <HAL_RCC_OscConfig+0x2c8>)
 80005aa:	4a75      	ldr	r2, [pc, #468]	; (8000780 <HAL_RCC_OscConfig+0x2cc>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	fba2 2303 	umull	r2, r3, r2, r3
 80005b2:	0a5b      	lsrs	r3, r3, #9
 80005b4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80005b6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80005b8:	9b01      	ldr	r3, [sp, #4]
 80005ba:	1e5a      	subs	r2, r3, #1
 80005bc:	9201      	str	r2, [sp, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d1f9      	bne.n	80005b6 <HAL_RCC_OscConfig+0x102>
 80005c2:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005c4:	075d      	lsls	r5, r3, #29
 80005c6:	d539      	bpl.n	800063c <HAL_RCC_OscConfig+0x188>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80005c8:	4b69      	ldr	r3, [pc, #420]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
 80005ca:	69da      	ldr	r2, [r3, #28]
 80005cc:	00d0      	lsls	r0, r2, #3
 80005ce:	f140 8082 	bpl.w	80006d6 <HAL_RCC_OscConfig+0x222>
    FlagStatus       pwrclkchanged = RESET;
 80005d2:	2500      	movs	r5, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80005d4:	4b6b      	ldr	r3, [pc, #428]	; (8000784 <HAL_RCC_OscConfig+0x2d0>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	05d1      	lsls	r1, r2, #23
 80005da:	f140 8099 	bpl.w	8000710 <HAL_RCC_OscConfig+0x25c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80005de:	68e3      	ldr	r3, [r4, #12]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d00f      	beq.n	8000604 <HAL_RCC_OscConfig+0x150>
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f000 80d1 	beq.w	800078c <HAL_RCC_OscConfig+0x2d8>
 80005ea:	2b05      	cmp	r3, #5
 80005ec:	4b60      	ldr	r3, [pc, #384]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
 80005ee:	6a1a      	ldr	r2, [r3, #32]
 80005f0:	f000 80fc 	beq.w	80007ec <HAL_RCC_OscConfig+0x338>
 80005f4:	f022 0201 	bic.w	r2, r2, #1
 80005f8:	621a      	str	r2, [r3, #32]
 80005fa:	6a1a      	ldr	r2, [r3, #32]
 80005fc:	f022 0204 	bic.w	r2, r2, #4
 8000600:	621a      	str	r2, [r3, #32]
 8000602:	e004      	b.n	800060e <HAL_RCC_OscConfig+0x15a>
 8000604:	4a5a      	ldr	r2, [pc, #360]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
 8000606:	6a13      	ldr	r3, [r2, #32]
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800060e:	f7ff fddf 	bl	80001d0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000612:	4e57      	ldr	r6, [pc, #348]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 8000614:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000616:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800061a:	e006      	b.n	800062a <HAL_RCC_OscConfig+0x176>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800061c:	f7ff fdd8 	bl	80001d0 <HAL_GetTick>
 8000620:	eba0 0008 	sub.w	r0, r0, r8
 8000624:	42b8      	cmp	r0, r7
 8000626:	f200 8084 	bhi.w	8000732 <HAL_RCC_OscConfig+0x27e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800062a:	6a33      	ldr	r3, [r6, #32]
 800062c:	079b      	lsls	r3, r3, #30
 800062e:	d5f5      	bpl.n	800061c <HAL_RCC_OscConfig+0x168>
    if(pwrclkchanged == SET)
 8000630:	b125      	cbz	r5, 800063c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000632:	4a4f      	ldr	r2, [pc, #316]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
 8000634:	69d3      	ldr	r3, [r2, #28]
 8000636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800063a:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800063c:	69e2      	ldr	r2, [r4, #28]
 800063e:	b1ca      	cbz	r2, 8000674 <HAL_RCC_OscConfig+0x1c0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000640:	4d4b      	ldr	r5, [pc, #300]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
 8000642:	6869      	ldr	r1, [r5, #4]
 8000644:	f001 010c 	and.w	r1, r1, #12
 8000648:	2908      	cmp	r1, #8
 800064a:	d030      	beq.n	80006ae <HAL_RCC_OscConfig+0x1fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800064c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800064e:	f04f 0100 	mov.w	r1, #0
 8000652:	4a4d      	ldr	r2, [pc, #308]	; (8000788 <HAL_RCC_OscConfig+0x2d4>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000654:	f000 80d2 	beq.w	80007fc <HAL_RCC_OscConfig+0x348>
        __HAL_RCC_PLL_DISABLE();
 8000658:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800065a:	f7ff fdb9 	bl	80001d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800065e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8000660:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000662:	e004      	b.n	800066e <HAL_RCC_OscConfig+0x1ba>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000664:	f7ff fdb4 	bl	80001d0 <HAL_GetTick>
 8000668:	1b40      	subs	r0, r0, r5
 800066a:	2802      	cmp	r0, #2
 800066c:	d861      	bhi.n	8000732 <HAL_RCC_OscConfig+0x27e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	019b      	lsls	r3, r3, #6
 8000672:	d4f7      	bmi.n	8000664 <HAL_RCC_OscConfig+0x1b0>
  return HAL_OK;
 8000674:	2000      	movs	r0, #0
}
 8000676:	b002      	add	sp, #8
 8000678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800067c:	684a      	ldr	r2, [r1, #4]
 800067e:	03d0      	lsls	r0, r2, #15
 8000680:	f57f af2c 	bpl.w	80004dc <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000684:	4a3a      	ldr	r2, [pc, #232]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
 8000686:	6812      	ldr	r2, [r2, #0]
 8000688:	0391      	lsls	r1, r2, #14
 800068a:	f57f af4b 	bpl.w	8000524 <HAL_RCC_OscConfig+0x70>
 800068e:	6862      	ldr	r2, [r4, #4]
 8000690:	2a00      	cmp	r2, #0
 8000692:	f47f af47 	bne.w	8000524 <HAL_RCC_OscConfig+0x70>
 8000696:	e00a      	b.n	80006ae <HAL_RCC_OscConfig+0x1fa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000698:	6852      	ldr	r2, [r2, #4]
 800069a:	03d6      	lsls	r6, r2, #15
 800069c:	f53f af50 	bmi.w	8000540 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006a0:	4a33      	ldr	r2, [pc, #204]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
 80006a2:	6812      	ldr	r2, [r2, #0]
 80006a4:	0795      	lsls	r5, r2, #30
 80006a6:	d521      	bpl.n	80006ec <HAL_RCC_OscConfig+0x238>
 80006a8:	6922      	ldr	r2, [r4, #16]
 80006aa:	2a01      	cmp	r2, #1
 80006ac:	d01e      	beq.n	80006ec <HAL_RCC_OscConfig+0x238>
        return HAL_ERROR;
 80006ae:	2001      	movs	r0, #1
}
 80006b0:	b002      	add	sp, #8
 80006b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80006b6:	4a30      	ldr	r2, [pc, #192]	; (8000778 <HAL_RCC_OscConfig+0x2c4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006b8:	4d2d      	ldr	r5, [pc, #180]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
      __HAL_RCC_LSI_DISABLE();
 80006ba:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80006bc:	f7ff fd88 	bl	80001d0 <HAL_GetTick>
 80006c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006c2:	e004      	b.n	80006ce <HAL_RCC_OscConfig+0x21a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006c4:	f7ff fd84 	bl	80001d0 <HAL_GetTick>
 80006c8:	1b80      	subs	r0, r0, r6
 80006ca:	2802      	cmp	r0, #2
 80006cc:	d831      	bhi.n	8000732 <HAL_RCC_OscConfig+0x27e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80006d0:	079f      	lsls	r7, r3, #30
 80006d2:	d4f7      	bmi.n	80006c4 <HAL_RCC_OscConfig+0x210>
 80006d4:	e775      	b.n	80005c2 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80006d8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006de:	61da      	str	r2, [r3, #28]
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	9b00      	ldr	r3, [sp, #0]
 80006ea:	e773      	b.n	80005d4 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006ec:	4920      	ldr	r1, [pc, #128]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
 80006ee:	6960      	ldr	r0, [r4, #20]
 80006f0:	680a      	ldr	r2, [r1, #0]
 80006f2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80006f6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80006fa:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006fc:	071a      	lsls	r2, r3, #28
 80006fe:	f57f af61 	bpl.w	80005c4 <HAL_RCC_OscConfig+0x110>
 8000702:	e73c      	b.n	800057e <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000704:	4a1a      	ldr	r2, [pc, #104]	; (8000770 <HAL_RCC_OscConfig+0x2bc>)
 8000706:	6813      	ldr	r3, [r2, #0]
 8000708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800070c:	6013      	str	r3, [r2, #0]
 800070e:	e6fa      	b.n	8000506 <HAL_RCC_OscConfig+0x52>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000710:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000712:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000718:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800071a:	f7ff fd59 	bl	80001d0 <HAL_GetTick>
 800071e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000720:	6833      	ldr	r3, [r6, #0]
 8000722:	05da      	lsls	r2, r3, #23
 8000724:	f53f af5b 	bmi.w	80005de <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000728:	f7ff fd52 	bl	80001d0 <HAL_GetTick>
 800072c:	1bc0      	subs	r0, r0, r7
 800072e:	2864      	cmp	r0, #100	; 0x64
 8000730:	d9f6      	bls.n	8000720 <HAL_RCC_OscConfig+0x26c>
            return HAL_TIMEOUT;
 8000732:	2003      	movs	r0, #3
}
 8000734:	b002      	add	sp, #8
 8000736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800073a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800073e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000742:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000744:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000746:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000752:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000754:	f7ff fd3c 	bl	80001d0 <HAL_GetTick>
 8000758:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800075a:	e004      	b.n	8000766 <HAL_RCC_OscConfig+0x2b2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800075c:	f7ff fd38 	bl	80001d0 <HAL_GetTick>
 8000760:	1b80      	subs	r0, r0, r6
 8000762:	2864      	cmp	r0, #100	; 0x64
 8000764:	d8e5      	bhi.n	8000732 <HAL_RCC_OscConfig+0x27e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000766:	682b      	ldr	r3, [r5, #0]
 8000768:	039b      	lsls	r3, r3, #14
 800076a:	d4f7      	bmi.n	800075c <HAL_RCC_OscConfig+0x2a8>
 800076c:	e6d9      	b.n	8000522 <HAL_RCC_OscConfig+0x6e>
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	42420000 	.word	0x42420000
 8000778:	42420480 	.word	0x42420480
 800077c:	20000010 	.word	0x20000010
 8000780:	10624dd3 	.word	0x10624dd3
 8000784:	40007000 	.word	0x40007000
 8000788:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800078c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000790:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000794:	6a1a      	ldr	r2, [r3, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000796:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000798:	f022 0201 	bic.w	r2, r2, #1
 800079c:	621a      	str	r2, [r3, #32]
 800079e:	6a1a      	ldr	r2, [r3, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007a0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a4:	f022 0204 	bic.w	r2, r2, #4
 80007a8:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 80007aa:	f7ff fd11 	bl	80001d0 <HAL_GetTick>
 80007ae:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007b0:	e004      	b.n	80007bc <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007b2:	f7ff fd0d 	bl	80001d0 <HAL_GetTick>
 80007b6:	1bc0      	subs	r0, r0, r7
 80007b8:	4540      	cmp	r0, r8
 80007ba:	d8ba      	bhi.n	8000732 <HAL_RCC_OscConfig+0x27e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007bc:	6a33      	ldr	r3, [r6, #32]
 80007be:	0798      	lsls	r0, r3, #30
 80007c0:	d4f7      	bmi.n	80007b2 <HAL_RCC_OscConfig+0x2fe>
    if(pwrclkchanged == SET)
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	f43f af3a 	beq.w	800063c <HAL_RCC_OscConfig+0x188>
 80007c8:	e733      	b.n	8000632 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 80007ca:	4a2b      	ldr	r2, [pc, #172]	; (8000878 <HAL_RCC_OscConfig+0x3c4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007cc:	4d2b      	ldr	r5, [pc, #172]	; (800087c <HAL_RCC_OscConfig+0x3c8>)
        __HAL_RCC_HSI_DISABLE();
 80007ce:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80007d0:	f7ff fcfe 	bl	80001d0 <HAL_GetTick>
 80007d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007d6:	e004      	b.n	80007e2 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007d8:	f7ff fcfa 	bl	80001d0 <HAL_GetTick>
 80007dc:	1b80      	subs	r0, r0, r6
 80007de:	2802      	cmp	r0, #2
 80007e0:	d8a7      	bhi.n	8000732 <HAL_RCC_OscConfig+0x27e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007e2:	682b      	ldr	r3, [r5, #0]
 80007e4:	0799      	lsls	r1, r3, #30
 80007e6:	d4f7      	bmi.n	80007d8 <HAL_RCC_OscConfig+0x324>
 80007e8:	6823      	ldr	r3, [r4, #0]
 80007ea:	e6c6      	b.n	800057a <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007ec:	f042 0204 	orr.w	r2, r2, #4
 80007f0:	621a      	str	r2, [r3, #32]
 80007f2:	6a1a      	ldr	r2, [r3, #32]
 80007f4:	f042 0201 	orr.w	r2, r2, #1
 80007f8:	621a      	str	r2, [r3, #32]
 80007fa:	e708      	b.n	800060e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_PLL_DISABLE();
 80007fc:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80007fe:	f7ff fce7 	bl	80001d0 <HAL_GetTick>
 8000802:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000804:	e004      	b.n	8000810 <HAL_RCC_OscConfig+0x35c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000806:	f7ff fce3 	bl	80001d0 <HAL_GetTick>
 800080a:	1b80      	subs	r0, r0, r6
 800080c:	2802      	cmp	r0, #2
 800080e:	d890      	bhi.n	8000732 <HAL_RCC_OscConfig+0x27e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000810:	682b      	ldr	r3, [r5, #0]
 8000812:	0199      	lsls	r1, r3, #6
 8000814:	d4f7      	bmi.n	8000806 <HAL_RCC_OscConfig+0x352>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000816:	6a22      	ldr	r2, [r4, #32]
 8000818:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800081c:	d105      	bne.n	800082a <HAL_RCC_OscConfig+0x376>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800081e:	686b      	ldr	r3, [r5, #4]
 8000820:	68a1      	ldr	r1, [r4, #8]
 8000822:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000826:	430b      	orrs	r3, r1
 8000828:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800082a:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <HAL_RCC_OscConfig+0x3c8>)
 800082e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000830:	6859      	ldr	r1, [r3, #4]
 8000832:	4302      	orrs	r2, r0
 8000834:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <HAL_RCC_OscConfig+0x3cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800083a:	430a      	orrs	r2, r1
 800083c:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800083e:	6005      	str	r5, [r0, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000840:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8000842:	f7ff fcc5 	bl	80001d0 <HAL_GetTick>
 8000846:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000848:	e005      	b.n	8000856 <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800084a:	f7ff fcc1 	bl	80001d0 <HAL_GetTick>
 800084e:	1b40      	subs	r0, r0, r5
 8000850:	2802      	cmp	r0, #2
 8000852:	f63f af6e 	bhi.w	8000732 <HAL_RCC_OscConfig+0x27e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000856:	6823      	ldr	r3, [r4, #0]
 8000858:	019a      	lsls	r2, r3, #6
 800085a:	d5f6      	bpl.n	800084a <HAL_RCC_OscConfig+0x396>
 800085c:	e70a      	b.n	8000674 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800085e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000862:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	e646      	b.n	8000506 <HAL_RCC_OscConfig+0x52>
 8000878:	42420000 	.word	0x42420000
 800087c:	40021000 	.word	0x40021000
 8000880:	42420060 	.word	0x42420060

08000884 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000884:	4a6a      	ldr	r2, [pc, #424]	; (8000a30 <HAL_RCC_ClockConfig+0x1ac>)
 8000886:	6813      	ldr	r3, [r2, #0]
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	428b      	cmp	r3, r1
 800088e:	d20b      	bcs.n	80008a8 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000890:	6813      	ldr	r3, [r2, #0]
 8000892:	f023 0307 	bic.w	r3, r3, #7
 8000896:	430b      	orrs	r3, r1
 8000898:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800089a:	6813      	ldr	r3, [r2, #0]
 800089c:	f003 0307 	and.w	r3, r3, #7
 80008a0:	428b      	cmp	r3, r1
 80008a2:	d001      	beq.n	80008a8 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 80008a4:	2001      	movs	r0, #1
}
 80008a6:	4770      	bx	lr
{
 80008a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008ac:	6803      	ldr	r3, [r0, #0]
{
 80008ae:	b086      	sub	sp, #24
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008b0:	079d      	lsls	r5, r3, #30
 80008b2:	d514      	bpl.n	80008de <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008b4:	075c      	lsls	r4, r3, #29
 80008b6:	d504      	bpl.n	80008c2 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008b8:	4c5e      	ldr	r4, [pc, #376]	; (8000a34 <HAL_RCC_ClockConfig+0x1b0>)
 80008ba:	6862      	ldr	r2, [r4, #4]
 80008bc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80008c0:	6062      	str	r2, [r4, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008c2:	071a      	lsls	r2, r3, #28
 80008c4:	d504      	bpl.n	80008d0 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008c6:	4c5b      	ldr	r4, [pc, #364]	; (8000a34 <HAL_RCC_ClockConfig+0x1b0>)
 80008c8:	6862      	ldr	r2, [r4, #4]
 80008ca:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80008ce:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008d0:	4c58      	ldr	r4, [pc, #352]	; (8000a34 <HAL_RCC_ClockConfig+0x1b0>)
 80008d2:	6885      	ldr	r5, [r0, #8]
 80008d4:	6862      	ldr	r2, [r4, #4]
 80008d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008da:	432a      	orrs	r2, r5
 80008dc:	6062      	str	r2, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008de:	07db      	lsls	r3, r3, #31
 80008e0:	4604      	mov	r4, r0
 80008e2:	460e      	mov	r6, r1
 80008e4:	d525      	bpl.n	8000932 <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e6:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e8:	4b52      	ldr	r3, [pc, #328]	; (8000a34 <HAL_RCC_ClockConfig+0x1b0>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ea:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ec:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ee:	f000 8099 	beq.w	8000a24 <HAL_RCC_ClockConfig+0x1a0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008f2:	2a02      	cmp	r2, #2
 80008f4:	f000 8092 	beq.w	8000a1c <HAL_RCC_ClockConfig+0x198>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f8:	0798      	lsls	r0, r3, #30
 80008fa:	d52a      	bpl.n	8000952 <HAL_RCC_ClockConfig+0xce>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008fc:	4d4d      	ldr	r5, [pc, #308]	; (8000a34 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008fe:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000902:	686b      	ldr	r3, [r5, #4]
 8000904:	f023 0303 	bic.w	r3, r3, #3
 8000908:	4313      	orrs	r3, r2
 800090a:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800090c:	f7ff fc60 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000910:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000912:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000914:	2b01      	cmp	r3, #1
 8000916:	d064      	beq.n	80009e2 <HAL_RCC_ClockConfig+0x15e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000918:	2b02      	cmp	r3, #2
 800091a:	d106      	bne.n	800092a <HAL_RCC_ClockConfig+0xa6>
 800091c:	e06c      	b.n	80009f8 <HAL_RCC_ClockConfig+0x174>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800091e:	f7ff fc57 	bl	80001d0 <HAL_GetTick>
 8000922:	1bc0      	subs	r0, r0, r7
 8000924:	4540      	cmp	r0, r8
 8000926:	f200 8081 	bhi.w	8000a2c <HAL_RCC_ClockConfig+0x1a8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800092a:	686b      	ldr	r3, [r5, #4]
 800092c:	f013 0f0c 	tst.w	r3, #12
 8000930:	d1f5      	bne.n	800091e <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000932:	4a3f      	ldr	r2, [pc, #252]	; (8000a30 <HAL_RCC_ClockConfig+0x1ac>)
 8000934:	6813      	ldr	r3, [r2, #0]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	42b3      	cmp	r3, r6
 800093c:	d90d      	bls.n	800095a <HAL_RCC_ClockConfig+0xd6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800093e:	6813      	ldr	r3, [r2, #0]
 8000940:	f023 0307 	bic.w	r3, r3, #7
 8000944:	4333      	orrs	r3, r6
 8000946:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000948:	6813      	ldr	r3, [r2, #0]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	42b3      	cmp	r3, r6
 8000950:	d003      	beq.n	800095a <HAL_RCC_ClockConfig+0xd6>
      return HAL_ERROR;
 8000952:	2001      	movs	r0, #1
}
 8000954:	b006      	add	sp, #24
 8000956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800095a:	6823      	ldr	r3, [r4, #0]
 800095c:	0759      	lsls	r1, r3, #29
 800095e:	d506      	bpl.n	800096e <HAL_RCC_ClockConfig+0xea>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000960:	4934      	ldr	r1, [pc, #208]	; (8000a34 <HAL_RCC_ClockConfig+0x1b0>)
 8000962:	68e0      	ldr	r0, [r4, #12]
 8000964:	684a      	ldr	r2, [r1, #4]
 8000966:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800096a:	4302      	orrs	r2, r0
 800096c:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800096e:	071a      	lsls	r2, r3, #28
 8000970:	d507      	bpl.n	8000982 <HAL_RCC_ClockConfig+0xfe>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000972:	4a30      	ldr	r2, [pc, #192]	; (8000a34 <HAL_RCC_ClockConfig+0x1b0>)
 8000974:	6921      	ldr	r1, [r4, #16]
 8000976:	6853      	ldr	r3, [r2, #4]
 8000978:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800097c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000980:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000982:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <HAL_RCC_ClockConfig+0x1b4>)
 8000988:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800098a:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800098e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000990:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8000994:	4927      	ldr	r1, [pc, #156]	; (8000a34 <HAL_RCC_ClockConfig+0x1b0>)
 8000996:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000998:	f002 030c 	and.w	r3, r2, #12
 800099c:	2b08      	cmp	r3, #8
 800099e:	d010      	beq.n	80009c2 <HAL_RCC_ClockConfig+0x13e>
      sysclockfreq = HSE_VALUE;
 80009a0:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <HAL_RCC_ClockConfig+0x1b8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80009a2:	4a24      	ldr	r2, [pc, #144]	; (8000a34 <HAL_RCC_ClockConfig+0x1b0>)
 80009a4:	4826      	ldr	r0, [pc, #152]	; (8000a40 <HAL_RCC_ClockConfig+0x1bc>)
 80009a6:	6852      	ldr	r2, [r2, #4]
 80009a8:	4926      	ldr	r1, [pc, #152]	; (8000a44 <HAL_RCC_ClockConfig+0x1c0>)
 80009aa:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80009ae:	5c82      	ldrb	r2, [r0, r2]
  HAL_InitTick (TICK_INT_PRIORITY);
 80009b0:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80009b2:	40d3      	lsrs	r3, r2
 80009b4:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80009b6:	f7ff fbc9 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80009ba:	2000      	movs	r0, #0
}
 80009bc:	b006      	add	sp, #24
 80009be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80009c2:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80009c6:	4423      	add	r3, r4
 80009c8:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80009cc:	03d3      	lsls	r3, r2, #15
 80009ce:	d419      	bmi.n	8000a04 <HAL_RCC_ClockConfig+0x180>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <HAL_RCC_ClockConfig+0x1c4>)
 80009d2:	fb03 f300 	mul.w	r3, r3, r0
 80009d6:	e7e4      	b.n	80009a2 <HAL_RCC_ClockConfig+0x11e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009d8:	f7ff fbfa 	bl	80001d0 <HAL_GetTick>
 80009dc:	1bc0      	subs	r0, r0, r7
 80009de:	4540      	cmp	r0, r8
 80009e0:	d824      	bhi.n	8000a2c <HAL_RCC_ClockConfig+0x1a8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009e2:	686b      	ldr	r3, [r5, #4]
 80009e4:	f003 030c 	and.w	r3, r3, #12
 80009e8:	2b04      	cmp	r3, #4
 80009ea:	d1f5      	bne.n	80009d8 <HAL_RCC_ClockConfig+0x154>
 80009ec:	e7a1      	b.n	8000932 <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ee:	f7ff fbef 	bl	80001d0 <HAL_GetTick>
 80009f2:	1bc0      	subs	r0, r0, r7
 80009f4:	4540      	cmp	r0, r8
 80009f6:	d819      	bhi.n	8000a2c <HAL_RCC_ClockConfig+0x1a8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009f8:	686b      	ldr	r3, [r5, #4]
 80009fa:	f003 030c 	and.w	r3, r3, #12
 80009fe:	2b08      	cmp	r3, #8
 8000a00:	d1f5      	bne.n	80009ee <HAL_RCC_ClockConfig+0x16a>
 8000a02:	e796      	b.n	8000932 <HAL_RCC_ClockConfig+0xae>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a04:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <HAL_RCC_ClockConfig+0x1b8>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a08:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a0c:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a10:	4422      	add	r2, r4
 8000a12:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a1a:	e7c2      	b.n	80009a2 <HAL_RCC_ClockConfig+0x11e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a1c:	019d      	lsls	r5, r3, #6
 8000a1e:	f53f af6d 	bmi.w	80008fc <HAL_RCC_ClockConfig+0x78>
 8000a22:	e796      	b.n	8000952 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a24:	039f      	lsls	r7, r3, #14
 8000a26:	f53f af69 	bmi.w	80008fc <HAL_RCC_ClockConfig+0x78>
 8000a2a:	e792      	b.n	8000952 <HAL_RCC_ClockConfig+0xce>
          return HAL_TIMEOUT;
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	e791      	b.n	8000954 <HAL_RCC_ClockConfig+0xd0>
 8000a30:	40022000 	.word	0x40022000
 8000a34:	40021000 	.word	0x40021000
 8000a38:	08001d2c 	.word	0x08001d2c
 8000a3c:	007a1200 	.word	0x007a1200
 8000a40:	08002ab0 	.word	0x08002ab0
 8000a44:	20000010 	.word	0x20000010
 8000a48:	003d0900 	.word	0x003d0900

08000a4c <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a4c:	f240 2201 	movw	r2, #513	; 0x201
{
 8000a50:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000a54:	f10d 0c18 	add.w	ip, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a58:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a5e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8000a62:	4912      	ldr	r1, [pc, #72]	; (8000aac <HAL_RCC_GetSysClockFreq+0x60>)
 8000a64:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a66:	f003 020c 	and.w	r2, r3, #12
 8000a6a:	2a08      	cmp	r2, #8
 8000a6c:	d002      	beq.n	8000a74 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8000a6e:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8000a70:	b006      	add	sp, #24
 8000a72:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a74:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000a78:	4462      	add	r2, ip
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a7a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a7c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a80:	d404      	bmi.n	8000a8c <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a82:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000a84:	fb00 f002 	mul.w	r0, r0, r2
}
 8000a88:	b006      	add	sp, #24
 8000a8a:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a8c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a8e:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <HAL_RCC_GetSysClockFreq+0x64>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a90:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a94:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a98:	4463      	add	r3, ip
 8000a9a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a9e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000aa2:	b006      	add	sp, #24
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	08001d2c 	.word	0x08001d2c
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	007a1200 	.word	0x007a1200
 8000ab4:	003d0900 	.word	0x003d0900

08000ab8 <AT24CXX_Read_Buffer>:

    return AT24CXX_OK;
    }

uint8_t AT24CXX_Read_Buffer(uint16_t start_address, uint8_t *buf, uint16_t len)
    {
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	4605      	mov	r5, r0

    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 8000abc:	481e      	ldr	r0, [pc, #120]	; (8000b38 <AT24CXX_Read_Buffer+0x80>)
    {
 8000abe:	460c      	mov	r4, r1
 8000ac0:	4616      	mov	r6, r2
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 8000ac2:	f000 fa85 	bl	8000fd0 <Soft_I2C_Start>
 8000ac6:	2801      	cmp	r0, #1
 8000ac8:	d02d      	beq.n	8000b26 <AT24CXX_Read_Buffer+0x6e>
	{
	Soft_I2C_Stop(&AT24C_I2C_Handle);
	return AT24CXX_ERR;
	}

    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (AT24CXX_EEPROM_ADDR + 0)) == SOFT_I2C_ERR)/*Send device address + write bit */
 8000aca:	21a0      	movs	r1, #160	; 0xa0
 8000acc:	481a      	ldr	r0, [pc, #104]	; (8000b38 <AT24CXX_Read_Buffer+0x80>)
 8000ace:	f000 faef 	bl	80010b0 <Soft_I2C_Send_Byte>
 8000ad2:	2801      	cmp	r0, #1
 8000ad4:	d025      	beq.n	8000b22 <AT24CXX_Read_Buffer+0x6a>
	    {
	    return AT24CXX_ERR;
	    }
	}

    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, start_address) == SOFT_I2C_ERR)/*send register address to write*/
 8000ad6:	b2e9      	uxtb	r1, r5
 8000ad8:	4817      	ldr	r0, [pc, #92]	; (8000b38 <AT24CXX_Read_Buffer+0x80>)
 8000ada:	f000 fae9 	bl	80010b0 <Soft_I2C_Send_Byte>
 8000ade:	2801      	cmp	r0, #1
 8000ae0:	d01f      	beq.n	8000b22 <AT24CXX_Read_Buffer+0x6a>
	{
	return AT24CXX_ERR;
	}

    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR) //repeated start
 8000ae2:	4815      	ldr	r0, [pc, #84]	; (8000b38 <AT24CXX_Read_Buffer+0x80>)
 8000ae4:	f000 fa74 	bl	8000fd0 <Soft_I2C_Start>
 8000ae8:	2801      	cmp	r0, #1
 8000aea:	d01c      	beq.n	8000b26 <AT24CXX_Read_Buffer+0x6e>
	{
	Soft_I2C_Stop(&AT24C_I2C_Handle);
	return AT24CXX_ERR;
	}

    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (AT24CXX_EEPROM_ADDR + 1)) == SOFT_I2C_ERR) //read bit
 8000aec:	21a1      	movs	r1, #161	; 0xa1
 8000aee:	4812      	ldr	r0, [pc, #72]	; (8000b38 <AT24CXX_Read_Buffer+0x80>)
 8000af0:	f000 fade 	bl	80010b0 <Soft_I2C_Send_Byte>
 8000af4:	2801      	cmp	r0, #1
 8000af6:	d014      	beq.n	8000b22 <AT24CXX_Read_Buffer+0x6a>
	{
	return AT24CXX_ERR;
	}

    while (len--)
 8000af8:	1e75      	subs	r5, r6, #1
 8000afa:	b2ad      	uxth	r5, r5
 8000afc:	b166      	cbz	r6, 8000b18 <AT24CXX_Read_Buffer+0x60>
	{
	*buf++ = Soft_I2C_Receive_Byte(&AT24C_I2C_Handle);
 8000afe:	4e0e      	ldr	r6, [pc, #56]	; (8000b38 <AT24CXX_Read_Buffer+0x80>)
 8000b00:	4425      	add	r5, r4
 8000b02:	3c01      	subs	r4, #1
 8000b04:	4630      	mov	r0, r6
 8000b06:	f000 fb3b 	bl	8001180 <Soft_I2C_Receive_Byte>
 8000b0a:	f804 0f01 	strb.w	r0, [r4, #1]!

	if (len == 0)
 8000b0e:	42ac      	cmp	r4, r5
 8000b10:	d10e      	bne.n	8000b30 <AT24CXX_Read_Buffer+0x78>
	    {
	    Soft_I2C_NACK(&AT24C_I2C_Handle);
 8000b12:	4809      	ldr	r0, [pc, #36]	; (8000b38 <AT24CXX_Read_Buffer+0x80>)
 8000b14:	f000 faae 	bl	8001074 <Soft_I2C_NACK>
	    {
	    Soft_I2C_ACK(&AT24C_I2C_Handle);
	    }
	}

    Soft_I2C_Stop(&AT24C_I2C_Handle);
 8000b18:	4807      	ldr	r0, [pc, #28]	; (8000b38 <AT24CXX_Read_Buffer+0x80>)
 8000b1a:	f000 fa71 	bl	8001000 <Soft_I2C_Stop>

    return AT24CXX_OK;
 8000b1e:	2000      	movs	r0, #0

    }
 8000b20:	bd70      	pop	{r4, r5, r6, pc}
	return AT24CXX_ERR;
 8000b22:	2001      	movs	r0, #1
    }
 8000b24:	bd70      	pop	{r4, r5, r6, pc}
	Soft_I2C_Stop(&AT24C_I2C_Handle);
 8000b26:	4804      	ldr	r0, [pc, #16]	; (8000b38 <AT24CXX_Read_Buffer+0x80>)
 8000b28:	f000 fa6a 	bl	8001000 <Soft_I2C_Stop>
	return AT24CXX_ERR;
 8000b2c:	2001      	movs	r0, #1
    }
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}
	    Soft_I2C_ACK(&AT24C_I2C_Handle);
 8000b30:	4630      	mov	r0, r6
 8000b32:	f000 fa81 	bl	8001038 <Soft_I2C_ACK>
 8000b36:	e7e5      	b.n	8000b04 <AT24CXX_Read_Buffer+0x4c>
 8000b38:	2000043c 	.word	0x2000043c

08000b3c <AT24CXX_Write_Buffer>:

/*this function can write any number of bytes from arbitrary location*/
uint8_t AT24CXX_Write_Buffer(uint16_t start_address, uint8_t *buf, uint16_t len)
    {
 8000b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t index;
    uint16_t page_counter, byte_counter;
    uint16_t offset_address = 0;

    byte_counter =
	    (AT24CXX_PAGE_LENGTH - (start_address % AT24CXX_PAGE_LENGTH));
 8000b40:	f000 0807 	and.w	r8, r0, #7
    byte_counter =
 8000b44:	f1c8 0808 	rsb	r8, r8, #8
 8000b48:	fa1f f888 	uxth.w	r8, r8
    {
 8000b4c:	b085      	sub	sp, #20

    if (len < byte_counter)
 8000b4e:	4590      	cmp	r8, r2
    {
 8000b50:	9002      	str	r0, [sp, #8]
 8000b52:	4617      	mov	r7, r2
 8000b54:	9101      	str	r1, [sp, #4]
    if (len < byte_counter)
 8000b56:	d86d      	bhi.n	8000c34 <AT24CXX_Write_Buffer+0xf8>
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 8000b58:	4857      	ldr	r0, [pc, #348]	; (8000cb8 <AT24CXX_Write_Buffer+0x17c>)
 8000b5a:	f000 fa39 	bl	8000fd0 <Soft_I2C_Start>
 8000b5e:	2801      	cmp	r0, #1
 8000b60:	d073      	beq.n	8000c4a <AT24CXX_Write_Buffer+0x10e>
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (AT24CXX_EEPROM_ADDR + 0)) == SOFT_I2C_ERR)/*Send device address + write bit */
 8000b62:	21a0      	movs	r1, #160	; 0xa0
 8000b64:	4854      	ldr	r0, [pc, #336]	; (8000cb8 <AT24CXX_Write_Buffer+0x17c>)
 8000b66:	f000 faa3 	bl	80010b0 <Soft_I2C_Send_Byte>
 8000b6a:	2801      	cmp	r0, #1
 8000b6c:	d07a      	beq.n	8000c64 <AT24CXX_Write_Buffer+0x128>
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, start_address) == SOFT_I2C_ERR)/*send register address to write*/
 8000b6e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8000b72:	4851      	ldr	r0, [pc, #324]	; (8000cb8 <AT24CXX_Write_Buffer+0x17c>)
 8000b74:	f000 fa9c 	bl	80010b0 <Soft_I2C_Send_Byte>
 8000b78:	2801      	cmp	r0, #1
 8000b7a:	d073      	beq.n	8000c64 <AT24CXX_Write_Buffer+0x128>
 8000b7c:	9c01      	ldr	r4, [sp, #4]
	if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, *buf++) == SOFT_I2C_ERR)/*write data to address*/
 8000b7e:	4e4e      	ldr	r6, [pc, #312]	; (8000cb8 <AT24CXX_Write_Buffer+0x17c>)
 8000b80:	eb04 0508 	add.w	r5, r4, r8
 8000b84:	e006      	b.n	8000b94 <AT24CXX_Write_Buffer+0x58>
 8000b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f000 fa90 	bl	80010b0 <Soft_I2C_Send_Byte>
 8000b90:	2801      	cmp	r0, #1
 8000b92:	d067      	beq.n	8000c64 <AT24CXX_Write_Buffer+0x128>
    while (len--)
 8000b94:	42ac      	cmp	r4, r5
 8000b96:	d1f6      	bne.n	8000b86 <AT24CXX_Write_Buffer+0x4a>
    Soft_I2C_Stop(&AT24C_I2C_Handle);
 8000b98:	4847      	ldr	r0, [pc, #284]	; (8000cb8 <AT24CXX_Write_Buffer+0x17c>)
 8000b9a:	f000 fa31 	bl	8001000 <Soft_I2C_Stop>
    HAL_Delay(5);/*Memory Programming Time approx 5ms*//*3ms for BL24CXX */
 8000b9e:	2005      	movs	r0, #5
 8000ba0:	f7ff fb1c 	bl	80001dc <HAL_Delay>
    if (AT24CXX_Write_Page(start_address, buf, byte_counter) == AT24CXX_ERR)
	{
	return AT24CXX_ERR;
	}

    page_counter = ((len - byte_counter) / AT24CXX_PAGE_LENGTH);
 8000ba4:	ebb7 0a08 	subs.w	sl, r7, r8
 8000ba8:	bf48      	it	mi
 8000baa:	f10a 0a07 	addmi.w	sl, sl, #7
 8000bae:	f3ca 0acf 	ubfx	sl, sl, #3, #16

    for (index = 0; index < (page_counter); index++)
 8000bb2:	f1ba 0f00 	cmp.w	sl, #0
 8000bb6:	d07b      	beq.n	8000cb0 <AT24CXX_Write_Buffer+0x174>
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, start_address) == SOFT_I2C_ERR)/*send register address to write*/
 8000bb8:	9b02      	ldr	r3, [sp, #8]
    for (index = 0; index < (page_counter); index++)
 8000bba:	2500      	movs	r5, #0
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, start_address) == SOFT_I2C_ERR)/*send register address to write*/
 8000bbc:	4443      	add	r3, r8
 8000bbe:	469b      	mov	fp, r3
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 8000bc0:	4c3d      	ldr	r4, [pc, #244]	; (8000cb8 <AT24CXX_Write_Buffer+0x17c>)
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, start_address) == SOFT_I2C_ERR)/*send register address to write*/
 8000bc2:	9703      	str	r7, [sp, #12]
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f000 fa03 	bl	8000fd0 <Soft_I2C_Start>
 8000bca:	2801      	cmp	r0, #1
 8000bcc:	d03d      	beq.n	8000c4a <AT24CXX_Write_Buffer+0x10e>
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (AT24CXX_EEPROM_ADDR + 0)) == SOFT_I2C_ERR)/*Send device address + write bit */
 8000bce:	21a0      	movs	r1, #160	; 0xa0
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f000 fa6d 	bl	80010b0 <Soft_I2C_Send_Byte>
 8000bd6:	2801      	cmp	r0, #1
 8000bd8:	d044      	beq.n	8000c64 <AT24CXX_Write_Buffer+0x128>
 8000bda:	00ee      	lsls	r6, r5, #3
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, start_address) == SOFT_I2C_ERR)/*send register address to write*/
 8000bdc:	eb0b 0106 	add.w	r1, fp, r6
 8000be0:	b2c9      	uxtb	r1, r1
 8000be2:	4620      	mov	r0, r4
 8000be4:	f000 fa64 	bl	80010b0 <Soft_I2C_Send_Byte>
 8000be8:	4446      	add	r6, r8
 8000bea:	2801      	cmp	r0, #1
 8000bec:	b2b6      	uxth	r6, r6
 8000bee:	d039      	beq.n	8000c64 <AT24CXX_Write_Buffer+0x128>
	{

	offset_address = byte_counter + (index * AT24CXX_PAGE_LENGTH);

	if (AT24CXX_Write_Page((start_address + offset_address),
 8000bf0:	9b01      	ldr	r3, [sp, #4]
 8000bf2:	199f      	adds	r7, r3, r6
 8000bf4:	f107 0908 	add.w	r9, r7, #8
	if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, *buf++) == SOFT_I2C_ERR)/*write data to address*/
 8000bf8:	f817 1b01 	ldrb.w	r1, [r7], #1
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f000 fa57 	bl	80010b0 <Soft_I2C_Send_Byte>
 8000c02:	2801      	cmp	r0, #1
 8000c04:	d02e      	beq.n	8000c64 <AT24CXX_Write_Buffer+0x128>
    while (len--)
 8000c06:	454f      	cmp	r7, r9
 8000c08:	d1f6      	bne.n	8000bf8 <AT24CXX_Write_Buffer+0xbc>
    Soft_I2C_Stop(&AT24C_I2C_Handle);
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f000 f9f8 	bl	8001000 <Soft_I2C_Stop>
 8000c10:	3501      	adds	r5, #1
    HAL_Delay(5);/*Memory Programming Time approx 5ms*//*3ms for BL24CXX */
 8000c12:	2005      	movs	r0, #5
 8000c14:	f7ff fae2 	bl	80001dc <HAL_Delay>
    for (index = 0; index < (page_counter); index++)
 8000c18:	b2ab      	uxth	r3, r5
 8000c1a:	459a      	cmp	sl, r3
 8000c1c:	d8d2      	bhi.n	8000bc4 <AT24CXX_Write_Buffer+0x88>
 8000c1e:	3608      	adds	r6, #8
 8000c20:	b2b6      	uxth	r6, r6
 8000c22:	4635      	mov	r5, r6
 8000c24:	9f03      	ldr	r7, [sp, #12]
	    }
	}

    offset_address += AT24CXX_PAGE_LENGTH;

    if (AT24CXX_Write_Page((start_address + offset_address),
 8000c26:	1bbf      	subs	r7, r7, r6
 8000c28:	b2bf      	uxth	r7, r7
    if (len == 0)
 8000c2a:	b94f      	cbnz	r7, 8000c40 <AT24CXX_Write_Buffer+0x104>
	    (buf + offset_address), (len - offset_address)) == AT24CXX_ERR)
	{
	return AT24CXX_ERR;
	}

    return AT24CXX_OK;
 8000c2c:	2000      	movs	r0, #0
    }
 8000c2e:	b005      	add	sp, #20
 8000c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (len == 0)
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	d139      	bne.n	8000cac <AT24CXX_Write_Buffer+0x170>
 8000c38:	2608      	movs	r6, #8
    if (AT24CXX_Write_Page((start_address + offset_address),
 8000c3a:	f64f 77f8 	movw	r7, #65528	; 0xfff8
    if (len == 0)
 8000c3e:	4635      	mov	r5, r6
    if (Soft_I2C_Start(&AT24C_I2C_Handle) == SOFT_I2C_ERR)/*generate star condition*/
 8000c40:	481d      	ldr	r0, [pc, #116]	; (8000cb8 <AT24CXX_Write_Buffer+0x17c>)
 8000c42:	f000 f9c5 	bl	8000fd0 <Soft_I2C_Start>
 8000c46:	2801      	cmp	r0, #1
 8000c48:	d106      	bne.n	8000c58 <AT24CXX_Write_Buffer+0x11c>
	Soft_I2C_Stop(&AT24C_I2C_Handle);
 8000c4a:	481b      	ldr	r0, [pc, #108]	; (8000cb8 <AT24CXX_Write_Buffer+0x17c>)
 8000c4c:	f000 f9d8 	bl	8001000 <Soft_I2C_Stop>
	return AT24CXX_ERR;
 8000c50:	2001      	movs	r0, #1
    }
 8000c52:	b005      	add	sp, #20
 8000c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, (AT24CXX_EEPROM_ADDR + 0)) == SOFT_I2C_ERR)/*Send device address + write bit */
 8000c58:	21a0      	movs	r1, #160	; 0xa0
 8000c5a:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <AT24CXX_Write_Buffer+0x17c>)
 8000c5c:	f000 fa28 	bl	80010b0 <Soft_I2C_Send_Byte>
 8000c60:	2801      	cmp	r0, #1
 8000c62:	d103      	bne.n	8000c6c <AT24CXX_Write_Buffer+0x130>
	return AT24CXX_ERR;
 8000c64:	2001      	movs	r0, #1
    }
 8000c66:	b005      	add	sp, #20
 8000c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (AT24CXX_Write_Page((start_address + offset_address),
 8000c6c:	9b02      	ldr	r3, [sp, #8]
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, start_address) == SOFT_I2C_ERR)/*send register address to write*/
 8000c6e:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <AT24CXX_Write_Buffer+0x17c>)
    if (AT24CXX_Write_Page((start_address + offset_address),
 8000c70:	4433      	add	r3, r6
    if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, start_address) == SOFT_I2C_ERR)/*send register address to write*/
 8000c72:	b2d9      	uxtb	r1, r3
 8000c74:	f000 fa1c 	bl	80010b0 <Soft_I2C_Send_Byte>
 8000c78:	2801      	cmp	r0, #1
 8000c7a:	d0f3      	beq.n	8000c64 <AT24CXX_Write_Buffer+0x128>
    if (AT24CXX_Write_Page((start_address + offset_address),
 8000c7c:	9b01      	ldr	r3, [sp, #4]
    while (len--)
 8000c7e:	1e7c      	subs	r4, r7, #1
    if (AT24CXX_Write_Page((start_address + offset_address),
 8000c80:	442b      	add	r3, r5
 8000c82:	461d      	mov	r5, r3
 8000c84:	b2a4      	uxth	r4, r4
 8000c86:	3401      	adds	r4, #1
	if (Soft_I2C_Send_Byte(&AT24C_I2C_Handle, *buf++) == SOFT_I2C_ERR)/*write data to address*/
 8000c88:	4e0b      	ldr	r6, [pc, #44]	; (8000cb8 <AT24CXX_Write_Buffer+0x17c>)
 8000c8a:	441c      	add	r4, r3
 8000c8c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8000c90:	4630      	mov	r0, r6
 8000c92:	f000 fa0d 	bl	80010b0 <Soft_I2C_Send_Byte>
 8000c96:	2801      	cmp	r0, #1
 8000c98:	d0e4      	beq.n	8000c64 <AT24CXX_Write_Buffer+0x128>
    while (len--)
 8000c9a:	42a5      	cmp	r5, r4
 8000c9c:	d1f6      	bne.n	8000c8c <AT24CXX_Write_Buffer+0x150>
    Soft_I2C_Stop(&AT24C_I2C_Handle);
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <AT24CXX_Write_Buffer+0x17c>)
 8000ca0:	f000 f9ae 	bl	8001000 <Soft_I2C_Stop>
    HAL_Delay(5);/*Memory Programming Time approx 5ms*//*3ms for BL24CXX */
 8000ca4:	2005      	movs	r0, #5
 8000ca6:	f7ff fa99 	bl	80001dc <HAL_Delay>
 8000caa:	e7bf      	b.n	8000c2c <AT24CXX_Write_Buffer+0xf0>
    if (len == 0)
 8000cac:	4690      	mov	r8, r2
 8000cae:	e753      	b.n	8000b58 <AT24CXX_Write_Buffer+0x1c>
    for (index = 0; index < (page_counter); index++)
 8000cb0:	2608      	movs	r6, #8
 8000cb2:	4635      	mov	r5, r6
 8000cb4:	e7b7      	b.n	8000c26 <AT24CXX_Write_Buffer+0xea>
 8000cb6:	bf00      	nop
 8000cb8:	2000043c 	.word	0x2000043c

08000cbc <Delay_Micros>:
		cycle_cnt = SysTick->VAL;
	} while (ms != HAL_GetTick());
	return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
}
void Delay_Micros(uint16_t micros)
{
 8000cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cc0:	4681      	mov	r9, r0
	uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000cc2:	f7ff fec3 	bl	8000a4c <HAL_RCC_GetSysClockFreq>
 8000cc6:	4f1c      	ldr	r7, [pc, #112]	; (8000d38 <Delay_Micros+0x7c>)
		cycle_cnt = SysTick->VAL;
 8000cc8:	4d1c      	ldr	r5, [pc, #112]	; (8000d3c <Delay_Micros+0x80>)
	uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000cca:	fba7 3700 	umull	r3, r7, r7, r0
 8000cce:	0cbf      	lsrs	r7, r7, #18
		ms = HAL_GetTick();
 8000cd0:	f7ff fa7e 	bl	80001d0 <HAL_GetTick>
		cycle_cnt = SysTick->VAL;
 8000cd4:	68ac      	ldr	r4, [r5, #8]
		ms = HAL_GetTick();
 8000cd6:	4606      	mov	r6, r0
	} while (ms != HAL_GetTick());
 8000cd8:	f7ff fa7a 	bl	80001d0 <HAL_GetTick>
 8000cdc:	4286      	cmp	r6, r0
 8000cde:	d1f7      	bne.n	8000cd0 <Delay_Micros+0x14>
	return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8000ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ce4:	fb02 f307 	mul.w	r3, r2, r7
 8000ce8:	1b1c      	subs	r4, r3, r4
 8000cea:	fbb4 f4f7 	udiv	r4, r4, r7
 8000cee:	4617      	mov	r7, r2
 8000cf0:	fb02 4b06 	mla	fp, r2, r6, r4
	uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000cf4:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8000d38 <Delay_Micros+0x7c>
		cycle_cnt = SysTick->VAL;
 8000cf8:	4d10      	ldr	r5, [pc, #64]	; (8000d3c <Delay_Micros+0x80>)
	uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8000cfa:	f7ff fea7 	bl	8000a4c <HAL_RCC_GetSysClockFreq>
 8000cfe:	fba8 2300 	umull	r2, r3, r8, r0
 8000d02:	ea4f 4a93 	mov.w	sl, r3, lsr #18
		ms = HAL_GetTick();
 8000d06:	f7ff fa63 	bl	80001d0 <HAL_GetTick>
		cycle_cnt = SysTick->VAL;
 8000d0a:	68ae      	ldr	r6, [r5, #8]
		ms = HAL_GetTick();
 8000d0c:	4604      	mov	r4, r0
	} while (ms != HAL_GetTick());
 8000d0e:	f7ff fa5f 	bl	80001d0 <HAL_GetTick>
 8000d12:	4284      	cmp	r4, r0
 8000d14:	d1f7      	bne.n	8000d06 <Delay_Micros+0x4a>
	return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8000d16:	fb07 f30a 	mul.w	r3, r7, sl
 8000d1a:	1b9b      	subs	r3, r3, r6
 8000d1c:	fbb3 f3fa 	udiv	r3, r3, sl
 8000d20:	fb07 f404 	mul.w	r4, r7, r4
	uint32_t start = Get_Micros();
	while (Get_Micros() - start < (uint32_t) micros)
 8000d24:	eba4 040b 	sub.w	r4, r4, fp
 8000d28:	441c      	add	r4, r3
 8000d2a:	454c      	cmp	r4, r9
 8000d2c:	d201      	bcs.n	8000d32 <Delay_Micros+0x76>
	{
		asm("nop");
 8000d2e:	bf00      	nop
 8000d30:	e7e3      	b.n	8000cfa <Delay_Micros+0x3e>
	}
}
 8000d32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d36:	bf00      	nop
 8000d38:	431bde83 	.word	0x431bde83
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_GPIO_Init+0x40>)
{
 8000d42:	b084      	sub	sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d44:	699a      	ldr	r2, [r3, #24]
 8000d46:	f042 0210 	orr.w	r2, r2, #16
 8000d4a:	619a      	str	r2, [r3, #24]
 8000d4c:	699a      	ldr	r2, [r3, #24]
 8000d4e:	f002 0210 	and.w	r2, r2, #16
 8000d52:	9201      	str	r2, [sp, #4]
 8000d54:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d56:	699a      	ldr	r2, [r3, #24]
 8000d58:	f042 0220 	orr.w	r2, r2, #32
 8000d5c:	619a      	str	r2, [r3, #24]
 8000d5e:	699a      	ldr	r2, [r3, #24]
 8000d60:	f002 0220 	and.w	r2, r2, #32
 8000d64:	9202      	str	r2, [sp, #8]
 8000d66:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	699a      	ldr	r2, [r3, #24]
 8000d6a:	f042 0204 	orr.w	r2, r2, #4
 8000d6e:	619a      	str	r2, [r3, #24]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	9303      	str	r3, [sp, #12]
 8000d78:	9b03      	ldr	r3, [sp, #12]

}
 8000d7a:	b004      	add	sp, #16
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d88:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d90:	f44f 15e0 	mov.w	r5, #1835008	; 0x1c0000
{
 8000d94:	b091      	sub	sp, #68	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d96:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d98:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9a:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8000d9e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000da6:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000daa:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dac:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dae:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000db4:	950f      	str	r5, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f7ff fb7d 	bl	80004b4 <HAL_RCC_OscConfig>
 8000dba:	b100      	cbz	r0, 8000dbe <SystemClock_Config+0x3a>
 8000dbc:	e7fe      	b.n	8000dbc <SystemClock_Config+0x38>
 8000dbe:	4603      	mov	r3, r0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc0:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc6:	a801      	add	r0, sp, #4
 8000dc8:	4621      	mov	r1, r4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dca:	e9cd 4302 	strd	r4, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dce:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd2:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dd4:	f7ff fd56 	bl	8000884 <HAL_RCC_ClockConfig>
 8000dd8:	b100      	cbz	r0, 8000ddc <SystemClock_Config+0x58>
 8000dda:	e7fe      	b.n	8000dda <SystemClock_Config+0x56>
  {
    Error_Handler();
  }
}
 8000ddc:	b011      	add	sp, #68	; 0x44
 8000dde:	bd30      	pop	{r4, r5, pc}

08000de0 <main>:
{
 8000de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de4:	b082      	sub	sp, #8
  HAL_Init();
 8000de6:	f7ff f9d5 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8000dea:	f7ff ffcb 	bl	8000d84 <SystemClock_Config>
  MX_GPIO_Init();
 8000dee:	f7ff ffa7 	bl	8000d40 <MX_GPIO_Init>
    Soft_I2C1.GPIO_SCL_Pin = SOFT_I2C_SCL_PIN;
 8000df2:	2140      	movs	r1, #64	; 0x40
    Soft_I2C1.GPIO_SDA_Pin = SOFT_I2C_SDA_PIN;
 8000df4:	2280      	movs	r2, #128	; 0x80
    Soft_I2C1.GPIO_SCL_Pin = SOFT_I2C_SCL_PIN;
 8000df6:	4845      	ldr	r0, [pc, #276]	; (8000f0c <main+0x12c>)
    Soft_I2C1.GPIO_SCL_Port = SOFT_I2C_SCL_PORT;
 8000df8:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <main+0x130>)
    Soft_I2C1.GPIO_SCL_Pin = SOFT_I2C_SCL_PIN;
 8000dfa:	8081      	strh	r1, [r0, #4]
    Soft_I2C1.GPIO_SDA_Pin = SOFT_I2C_SDA_PIN;
 8000dfc:	8182      	strh	r2, [r0, #12]
    Soft_I2C1.GPIO_SCL_Port = SOFT_I2C_SCL_PORT;
 8000dfe:	6003      	str	r3, [r0, #0]
    Soft_I2C1.GPIO_SDA_Port = SOFT_I2C_SDA_PORT;
 8000e00:	6083      	str	r3, [r0, #8]
		if(Soft_I2C_Scan(&Soft_I2C1, i<<1)==SOFT_I2C_OK)
 8000e02:	4606      	mov	r6, r0
    ssd1306_Init();
 8000e04:	2500      	movs	r5, #0
    Soft_I2C_Init(&Soft_I2C1);
 8000e06:	f000 f899 	bl	8000f3c <Soft_I2C_Init>
 8000e0a:	4c42      	ldr	r4, [pc, #264]	; (8000f14 <main+0x134>)
    ssd1306_Init();
 8000e0c:	f000 fb06 	bl	800141c <ssd1306_Init>
			ssd1306_WriteString("NO:", Font_11x18, White);
 8000e10:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8000f2c <main+0x14c>
			ssd1306_WriteString("0x", Font_11x18, White);
 8000e14:	4f40      	ldr	r7, [pc, #256]	; (8000f18 <main+0x138>)
 8000e16:	e01d      	b.n	8000e54 <main+0x74>
			ssd1306_SetCursor(0, 30);
 8000e18:	211e      	movs	r1, #30
 8000e1a:	f000 fe6f 	bl	8001afc <ssd1306_SetCursor>
			ssd1306_WriteString("At:", Font_11x18, White);
 8000e1e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000e22:	2301      	movs	r3, #1
 8000e24:	483d      	ldr	r0, [pc, #244]	; (8000f1c <main+0x13c>)
			ssd1306_WriteString("NO:", Font_11x18, White);
 8000e26:	f000 fd57 	bl	80018d8 <ssd1306_WriteString>
			ssd1306_WriteString("0x", Font_11x18, White);
 8000e2a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000e2e:	2301      	movs	r3, #1
 8000e30:	4638      	mov	r0, r7
 8000e32:	f000 fd51 	bl	80018d8 <ssd1306_WriteString>
			ssd1306_WriteString(temp, Font_11x18, White);
 8000e36:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	4668      	mov	r0, sp
 8000e3e:	f000 fd4b 	bl	80018d8 <ssd1306_WriteString>
 8000e42:	3502      	adds	r5, #2
			ssd1306_UpdateScreen();
 8000e44:	f000 fcf6 	bl	8001834 <ssd1306_UpdateScreen>
			HAL_Delay(10);
 8000e48:	200a      	movs	r0, #10
 8000e4a:	f7ff f9c7 	bl	80001dc <HAL_Delay>
	for (uint16_t i = 0; i < 128; i++)
 8000e4e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000e52:	d013      	beq.n	8000e7c <main+0x9c>
		itoa(i<<1 ,temp, 16);//int string base 16 (hex)
 8000e54:	4669      	mov	r1, sp
 8000e56:	2210      	movs	r2, #16
 8000e58:	4628      	mov	r0, r5
 8000e5a:	f000 ff13 	bl	8001c84 <itoa>
		if(Soft_I2C_Scan(&Soft_I2C1, i<<1)==SOFT_I2C_OK)
 8000e5e:	b2e9      	uxtb	r1, r5
 8000e60:	4630      	mov	r0, r6
 8000e62:	f000 fa8d 	bl	8001380 <Soft_I2C_Scan>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d0d6      	beq.n	8000e18 <main+0x38>
			ssd1306_SetCursor(0, 0);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	f000 fe45 	bl	8001afc <ssd1306_SetCursor>
			ssd1306_WriteString("NO:", Font_11x18, White);
 8000e72:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000e76:	2301      	movs	r3, #1
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d4      	b.n	8000e26 <main+0x46>
 8000e7c:	4e28      	ldr	r6, [pc, #160]	; (8000f20 <main+0x140>)
	for (uint16_t i = 0; i < 128; i++)
 8000e7e:	2500      	movs	r5, #0
 8000e80:	4633      	mov	r3, r6
		write_buffer[i]=i;
 8000e82:	f803 5f01 	strb.w	r5, [r3, #1]!
 8000e86:	3501      	adds	r5, #1
	for (uint16_t i = 0; i <= 255; i++)
 8000e88:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000e8c:	d1f9      	bne.n	8000e82 <main+0xa2>
	AT24CXX_Write_Buffer(0x00,write_buffer,256);
 8000e8e:	462a      	mov	r2, r5
 8000e90:	4924      	ldr	r1, [pc, #144]	; (8000f24 <main+0x144>)
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff fe52 	bl	8000b3c <AT24CXX_Write_Buffer>
	AT24CXX_Read_Buffer(0x00,compare_buffer,256);
 8000e98:	4923      	ldr	r1, [pc, #140]	; (8000f28 <main+0x148>)
 8000e9a:	462a      	mov	r2, r5
 8000e9c:	460f      	mov	r7, r1
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fe0a 	bl	8000ab8 <AT24CXX_Read_Buffer>
	ssd1306_Fill(Black);
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	463d      	mov	r5, r7
 8000ea8:	f000 fcb8 	bl	800181c <ssd1306_Fill>
			ssd1306_WriteString("OK:", Font_11x18, White);
 8000eac:	f8df a080 	ldr.w	sl, [pc, #128]	; 8000f30 <main+0x150>
			ssd1306_WriteString("Error:", Font_11x18, White);
 8000eb0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8000f34 <main+0x154>
 8000eb4:	f507 7880 	add.w	r8, r7, #256	; 0x100
 8000eb8:	e011      	b.n	8000ede <main+0xfe>
			ssd1306_SetCursor(0, 30);
 8000eba:	f000 fe1f 	bl	8001afc <ssd1306_SetCursor>
			ssd1306_WriteString("Error:", Font_11x18, White);
 8000ebe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	4648      	mov	r0, r9
			ssd1306_WriteString("OK:", Font_11x18, White);
 8000ec6:	f000 fd07 	bl	80018d8 <ssd1306_WriteString>
			ssd1306_WriteString(temp, Font_11x18, White);
 8000eca:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000ece:	2301      	movs	r3, #1
 8000ed0:	4668      	mov	r0, sp
 8000ed2:	f000 fd01 	bl	80018d8 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000ed6:	f000 fcad 	bl	8001834 <ssd1306_UpdateScreen>
	for(uint16_t i=0;i<=255;i++)
 8000eda:	4545      	cmp	r5, r8
 8000edc:	d014      	beq.n	8000f08 <main+0x128>
		itoa(i, temp, 10);//int string base 10
 8000ede:	220a      	movs	r2, #10
 8000ee0:	4669      	mov	r1, sp
 8000ee2:	1be8      	subs	r0, r5, r7
 8000ee4:	f000 fece 	bl	8001c84 <itoa>
		if(write_buffer[i]!=compare_buffer[i])
 8000ee8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000eec:	f816 2f01 	ldrb.w	r2, [r6, #1]!
			ssd1306_SetCursor(0, 30);
 8000ef0:	211e      	movs	r1, #30
		if(write_buffer[i]!=compare_buffer[i])
 8000ef2:	429a      	cmp	r2, r3
			ssd1306_SetCursor(0, 30);
 8000ef4:	f04f 0000 	mov.w	r0, #0
		if(write_buffer[i]!=compare_buffer[i])
 8000ef8:	d1df      	bne.n	8000eba <main+0xda>
			ssd1306_SetCursor(0, 30);
 8000efa:	f000 fdff 	bl	8001afc <ssd1306_SetCursor>
			ssd1306_WriteString("OK:", Font_11x18, White);
 8000efe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000f02:	2301      	movs	r3, #1
 8000f04:	4650      	mov	r0, sl
 8000f06:	e7de      	b.n	8000ec6 <main+0xe6>
 8000f08:	e7fe      	b.n	8000f08 <main+0x128>
 8000f0a:	bf00      	nop
 8000f0c:	2000043c 	.word	0x2000043c
 8000f10:	40010c00 	.word	0x40010c00
 8000f14:	20000008 	.word	0x20000008
 8000f18:	08002a9c 	.word	0x08002a9c
 8000f1c:	08002a98 	.word	0x08002a98
 8000f20:	2000044b 	.word	0x2000044b
 8000f24:	2000044c 	.word	0x2000044c
 8000f28:	2000054c 	.word	0x2000054c
 8000f2c:	08002aa0 	.word	0x08002aa0
 8000f30:	08002aac 	.word	0x08002aac
 8000f34:	08002aa4 	.word	0x08002aa4

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	e7fe      	b.n	8000f38 <Error_Handler>
 8000f3a:	bf00      	nop

08000f3c <Soft_I2C_Init>:
    {

    GPIO_InitTypeDef GPIO_Init;

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE()
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <Soft_I2C_Init+0x90>)
    {
 8000f3e:	b530      	push	{r4, r5, lr}
    __HAL_RCC_GPIOC_CLK_ENABLE()
 8000f40:	699a      	ldr	r2, [r3, #24]
    {
 8000f42:	4604      	mov	r4, r0
    __HAL_RCC_GPIOC_CLK_ENABLE()
 8000f44:	f042 0210 	orr.w	r2, r2, #16
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8000f48:	8981      	ldrh	r1, [r0, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE()
 8000f4a:	619a      	str	r2, [r3, #24]
 8000f4c:	699a      	ldr	r2, [r3, #24]
    {
 8000f4e:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE()
 8000f50:	f002 0210 	and.w	r2, r2, #16
 8000f54:	9200      	str	r2, [sp, #0]
 8000f56:	9a00      	ldr	r2, [sp, #0]
    ;
    __HAL_RCC_GPIOD_CLK_ENABLE()
 8000f58:	699d      	ldr	r5, [r3, #24]
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8000f5a:	6880      	ldr	r0, [r0, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE()
 8000f5c:	f045 0520 	orr.w	r5, r5, #32
 8000f60:	619d      	str	r5, [r3, #24]
 8000f62:	699d      	ldr	r5, [r3, #24]
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8000f64:	2201      	movs	r2, #1
    __HAL_RCC_GPIOD_CLK_ENABLE()
 8000f66:	f005 0520 	and.w	r5, r5, #32
 8000f6a:	9501      	str	r5, [sp, #4]
 8000f6c:	9d01      	ldr	r5, [sp, #4]
    ;
    __HAL_RCC_GPIOA_CLK_ENABLE()
 8000f6e:	699d      	ldr	r5, [r3, #24]
 8000f70:	f045 0504 	orr.w	r5, r5, #4
 8000f74:	619d      	str	r5, [r3, #24]
 8000f76:	699d      	ldr	r5, [r3, #24]
 8000f78:	f005 0504 	and.w	r5, r5, #4
 8000f7c:	9502      	str	r5, [sp, #8]
 8000f7e:	9d02      	ldr	r5, [sp, #8]
    ;
    __HAL_RCC_GPIOB_CLK_ENABLE()
 8000f80:	699d      	ldr	r5, [r3, #24]
 8000f82:	f045 0508 	orr.w	r5, r5, #8
 8000f86:	619d      	str	r5, [r3, #24]
 8000f88:	699b      	ldr	r3, [r3, #24]

    GPIO_Init.Mode  = GPIO_MODE_OUTPUT_OD;
    GPIO_Init.Pull  = GPIO_PULLUP;
    GPIO_Init.Speed = GPIO_SPEED_FREQ_MEDIUM;

    GPIO_Init.Pin = i2c_handle->GPIO_SDA_Pin;
 8000f8a:	ad08      	add	r5, sp, #32
    __HAL_RCC_GPIOB_CLK_ENABLE()
 8000f8c:	f003 0308 	and.w	r3, r3, #8
 8000f90:	9303      	str	r3, [sp, #12]
 8000f92:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8000f94:	f7ff fa8a 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8000f98:	88a1      	ldrh	r1, [r4, #4]
 8000f9a:	6820      	ldr	r0, [r4, #0]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f7ff fa85 	bl	80004ac <HAL_GPIO_WritePin>
    GPIO_Init.Mode  = GPIO_MODE_OUTPUT_OD;
 8000fa2:	2211      	movs	r2, #17
    GPIO_Init.Pull  = GPIO_PULLUP;
 8000fa4:	2301      	movs	r3, #1
    GPIO_Init.Pin = i2c_handle->GPIO_SDA_Pin;
 8000fa6:	89a1      	ldrh	r1, [r4, #12]
    HAL_GPIO_Init(i2c_handle->GPIO_SDA_Port, &GPIO_Init);
 8000fa8:	68a0      	ldr	r0, [r4, #8]
    GPIO_Init.Pin = i2c_handle->GPIO_SDA_Pin;
 8000faa:	f845 1d10 	str.w	r1, [r5, #-16]!
    HAL_GPIO_Init(i2c_handle->GPIO_SDA_Port, &GPIO_Init);
 8000fae:	4629      	mov	r1, r5
    GPIO_Init.Pull  = GPIO_PULLUP;
 8000fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000fb4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(i2c_handle->GPIO_SDA_Port, &GPIO_Init);
 8000fb6:	f7ff f983 	bl	80002c0 <HAL_GPIO_Init>

    GPIO_Init.Pin = i2c_handle->GPIO_SCL_Pin;
 8000fba:	88a3      	ldrh	r3, [r4, #4]
    HAL_GPIO_Init(i2c_handle->GPIO_SCL_Port, &GPIO_Init);
 8000fbc:	4629      	mov	r1, r5
 8000fbe:	6820      	ldr	r0, [r4, #0]
    GPIO_Init.Pin = i2c_handle->GPIO_SCL_Pin;
 8000fc0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(i2c_handle->GPIO_SCL_Port, &GPIO_Init);
 8000fc2:	f7ff f97d 	bl	80002c0 <HAL_GPIO_Init>
    }
 8000fc6:	b009      	add	sp, #36	; 0x24
 8000fc8:	bd30      	pop	{r4, r5, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <Soft_I2C_Start>:


/*generate start condition */

uint8_t Soft_I2C_Start(Soft_I2C_t* i2c_handle)
    {
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8000fd4:	8881      	ldrh	r1, [r0, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	6800      	ldr	r0, [r0, #0]
 8000fda:	f7ff fa67 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8000fde:	89a1      	ldrh	r1, [r4, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	68a0      	ldr	r0, [r4, #8]
 8000fe4:	f7ff fa62 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 8000fe8:	2005      	movs	r0, #5
 8000fea:	f7ff fe67 	bl	8000cbc <Delay_Micros>
    return HAL_GPIO_ReadPin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin);
 8000fee:	89a1      	ldrh	r1, [r4, #12]
 8000ff0:	68a0      	ldr	r0, [r4, #8]
 8000ff2:	f7ff fa55 	bl	80004a0 <HAL_GPIO_ReadPin>
	{
	return SOFT_I2C_ERR;
	}

    return SOFT_I2C_OK;
    }
 8000ff6:	3000      	adds	r0, #0
 8000ff8:	bf18      	it	ne
 8000ffa:	2001      	movne	r0, #1
 8000ffc:	bd10      	pop	{r4, pc}
 8000ffe:	bf00      	nop

08001000 <Soft_I2C_Stop>:

/*generate stop condition */

void Soft_I2C_Stop(Soft_I2C_t* i2c_handle)
    {
 8001000:	b510      	push	{r4, lr}
 8001002:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001004:	8881      	ldrh	r1, [r0, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	6800      	ldr	r0, [r0, #0]
 800100a:	f7ff fa4f 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 800100e:	89a1      	ldrh	r1, [r4, #12]
 8001010:	68a0      	ldr	r0, [r4, #8]
 8001012:	2200      	movs	r2, #0
 8001014:	f7ff fa4a 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001018:	88a1      	ldrh	r1, [r4, #4]
 800101a:	6820      	ldr	r0, [r4, #0]
 800101c:	2201      	movs	r2, #1
 800101e:	f7ff fa45 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 8001022:	2005      	movs	r0, #5
 8001024:	f7ff fe4a 	bl	8000cbc <Delay_Micros>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001028:	89a1      	ldrh	r1, [r4, #12]
 800102a:	68a0      	ldr	r0, [r4, #8]
 800102c:	2201      	movs	r2, #1
    Soft_I2C_SCL_Low(i2c_handle);
    Soft_I2C_SDA_Low(i2c_handle);
    Soft_I2C_SCL_High(i2c_handle);
    Soft_I2C_Delay();
    Soft_I2C_SDA_High(i2c_handle);
    }
 800102e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001032:	f7ff ba3b 	b.w	80004ac <HAL_GPIO_WritePin>
 8001036:	bf00      	nop

08001038 <Soft_I2C_ACK>:
    return SOFT_I2C_OK;

    }

void Soft_I2C_ACK(Soft_I2C_t* i2c_handle)
    {
 8001038:	b510      	push	{r4, lr}
 800103a:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 800103c:	8881      	ldrh	r1, [r0, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	6800      	ldr	r0, [r0, #0]
 8001042:	f7ff fa33 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001046:	89a1      	ldrh	r1, [r4, #12]
 8001048:	68a0      	ldr	r0, [r4, #8]
 800104a:	2200      	movs	r2, #0
 800104c:	f7ff fa2e 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001050:	88a1      	ldrh	r1, [r4, #4]
 8001052:	6820      	ldr	r0, [r4, #0]
 8001054:	2201      	movs	r2, #1
 8001056:	f7ff fa29 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 800105a:	2005      	movs	r0, #5
 800105c:	f7ff fe2e 	bl	8000cbc <Delay_Micros>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001060:	6820      	ldr	r0, [r4, #0]
 8001062:	88a1      	ldrh	r1, [r4, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f7ff fa21 	bl	80004ac <HAL_GPIO_WritePin>
    Soft_I2C_SCL_High(i2c_handle);
    Soft_I2C_Delay();
    Soft_I2C_SCL_Low(i2c_handle);
    Soft_I2C_Delay();

    }
 800106a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Delay_Micros(5);
 800106e:	2005      	movs	r0, #5
 8001070:	f7ff be24 	b.w	8000cbc <Delay_Micros>

08001074 <Soft_I2C_NACK>:

void Soft_I2C_NACK(Soft_I2C_t* i2c_handle)
    {
 8001074:	b510      	push	{r4, lr}
 8001076:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001078:	8881      	ldrh	r1, [r0, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	6800      	ldr	r0, [r0, #0]
 800107e:	f7ff fa15 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001082:	89a1      	ldrh	r1, [r4, #12]
 8001084:	68a0      	ldr	r0, [r4, #8]
 8001086:	2201      	movs	r2, #1
 8001088:	f7ff fa10 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 800108c:	88a1      	ldrh	r1, [r4, #4]
 800108e:	6820      	ldr	r0, [r4, #0]
 8001090:	2201      	movs	r2, #1
 8001092:	f7ff fa0b 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 8001096:	2005      	movs	r0, #5
 8001098:	f7ff fe10 	bl	8000cbc <Delay_Micros>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 800109c:	6820      	ldr	r0, [r4, #0]
 800109e:	88a1      	ldrh	r1, [r4, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f7ff fa03 	bl	80004ac <HAL_GPIO_WritePin>
    Soft_I2C_SCL_High(i2c_handle);
    Soft_I2C_Delay();
    Soft_I2C_SCL_Low(i2c_handle);
    Soft_I2C_Delay();

    }
 80010a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Delay_Micros(5);
 80010aa:	2005      	movs	r0, #5
 80010ac:	f7ff be06 	b.w	8000cbc <Delay_Micros>

080010b0 <Soft_I2C_Send_Byte>:

uint8_t Soft_I2C_Send_Byte(Soft_I2C_t* i2c_handle, uint8_t byte)
    {
 80010b0:	b570      	push	{r4, r5, r6, lr}
 80010b2:	4604      	mov	r4, r0
 80010b4:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80010b6:	6800      	ldr	r0, [r0, #0]
 80010b8:	88a1      	ldrh	r1, [r4, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f7ff f9f6 	bl	80004ac <HAL_GPIO_WritePin>
 80010c0:	2608      	movs	r6, #8

    Soft_I2C_SCL_Low(i2c_handle);

    while (count--)
	{
	if (byte & 0x80)
 80010c2:	062b      	lsls	r3, r5, #24
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 80010c4:	bf4c      	ite	mi
 80010c6:	2201      	movmi	r2, #1
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 80010c8:	2200      	movpl	r2, #0
 80010ca:	68a0      	ldr	r0, [r4, #8]
 80010cc:	89a1      	ldrh	r1, [r4, #12]
 80010ce:	f7ff f9ed 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80010d2:	2201      	movs	r2, #1
 80010d4:	88a1      	ldrh	r1, [r4, #4]
 80010d6:	6820      	ldr	r0, [r4, #0]
 80010d8:	f7ff f9e8 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 80010dc:	2005      	movs	r0, #5
 80010de:	f7ff fded 	bl	8000cbc <Delay_Micros>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80010e2:	2200      	movs	r2, #0
 80010e4:	88a1      	ldrh	r1, [r4, #4]
 80010e6:	6820      	ldr	r0, [r4, #0]
 80010e8:	f7ff f9e0 	bl	80004ac <HAL_GPIO_WritePin>
 80010ec:	3e01      	subs	r6, #1
    Delay_Micros(5);
 80010ee:	2005      	movs	r0, #5
	else
	    {
	    Soft_I2C_SDA_Low(i2c_handle);
	    }

	byte <<= 1;
 80010f0:	006d      	lsls	r5, r5, #1
    Delay_Micros(5);
 80010f2:	f7ff fde3 	bl	8000cbc <Delay_Micros>
    while (count--)
 80010f6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	byte <<= 1;
 80010fa:	b2ed      	uxtb	r5, r5
    while (count--)
 80010fc:	d1e1      	bne.n	80010c2 <Soft_I2C_Send_Byte+0x12>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80010fe:	2200      	movs	r2, #0
 8001100:	88a1      	ldrh	r1, [r4, #4]
 8001102:	6820      	ldr	r0, [r4, #0]
 8001104:	f7ff f9d2 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001108:	2201      	movs	r2, #1
 800110a:	89a1      	ldrh	r1, [r4, #12]
 800110c:	68a0      	ldr	r0, [r4, #8]
 800110e:	f7ff f9cd 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001112:	2201      	movs	r2, #1
 8001114:	88a1      	ldrh	r1, [r4, #4]
 8001116:	6820      	ldr	r0, [r4, #0]
 8001118:	f7ff f9c8 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 800111c:	2005      	movs	r0, #5
 800111e:	f7ff fdcd 	bl	8000cbc <Delay_Micros>
 8001122:	f241 3588 	movw	r5, #5000	; 0x1388
 8001126:	e000      	b.n	800112a <Soft_I2C_Send_Byte+0x7a>
	if (timeOut == 0)
 8001128:	b17d      	cbz	r5, 800114a <Soft_I2C_Send_Byte+0x9a>
    return HAL_GPIO_ReadPin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin);
 800112a:	89a1      	ldrh	r1, [r4, #12]
 800112c:	68a0      	ldr	r0, [r4, #8]
 800112e:	f7ff f9b7 	bl	80004a0 <HAL_GPIO_ReadPin>
 8001132:	3d01      	subs	r5, #1
    while (Soft_I2C_SDA_Read(i2c_handle))
 8001134:	4606      	mov	r6, r0
 8001136:	b2ad      	uxth	r5, r5
 8001138:	2800      	cmp	r0, #0
 800113a:	d1f5      	bne.n	8001128 <Soft_I2C_Send_Byte+0x78>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 800113c:	4602      	mov	r2, r0
 800113e:	88a1      	ldrh	r1, [r4, #4]
 8001140:	6820      	ldr	r0, [r4, #0]
 8001142:	f7ff f9b3 	bl	80004ac <HAL_GPIO_WritePin>
    if (Soft_I2C_Wait_ACK(i2c_handle) == SOFT_I2C_ERR)
	{
	return SOFT_I2C_ERR;
	}
    return SOFT_I2C_OK;
    }
 8001146:	4630      	mov	r0, r6
 8001148:	bd70      	pop	{r4, r5, r6, pc}
	return SOFT_I2C_ERR;
 800114a:	2601      	movs	r6, #1
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 800114c:	462a      	mov	r2, r5
 800114e:	88a1      	ldrh	r1, [r4, #4]
 8001150:	6820      	ldr	r0, [r4, #0]
 8001152:	f7ff f9ab 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001156:	462a      	mov	r2, r5
 8001158:	89a1      	ldrh	r1, [r4, #12]
 800115a:	68a0      	ldr	r0, [r4, #8]
 800115c:	f7ff f9a6 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001160:	88a1      	ldrh	r1, [r4, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	6820      	ldr	r0, [r4, #0]
 8001166:	f7ff f9a1 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 800116a:	2005      	movs	r0, #5
 800116c:	f7ff fda6 	bl	8000cbc <Delay_Micros>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001170:	68a0      	ldr	r0, [r4, #8]
 8001172:	2201      	movs	r2, #1
 8001174:	89a1      	ldrh	r1, [r4, #12]
 8001176:	f7ff f999 	bl	80004ac <HAL_GPIO_WritePin>
    }
 800117a:	4630      	mov	r0, r6
 800117c:	bd70      	pop	{r4, r5, r6, pc}
 800117e:	bf00      	nop

08001180 <Soft_I2C_Receive_Byte>:

uint8_t Soft_I2C_Receive_Byte(Soft_I2C_t* i2c_handle)
    {
 8001180:	b570      	push	{r4, r5, r6, lr}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001182:	8981      	ldrh	r1, [r0, #12]
    {
 8001184:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001186:	2201      	movs	r2, #1
 8001188:	6880      	ldr	r0, [r0, #8]
 800118a:	f7ff f98f 	bl	80004ac <HAL_GPIO_WritePin>
 800118e:	2508      	movs	r5, #8

    uint8_t i = 8;
    uint8_t ReceivedByte = 0;
 8001190:	2600      	movs	r6, #0
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001192:	2200      	movs	r2, #0
 8001194:	88a1      	ldrh	r1, [r4, #4]
 8001196:	6820      	ldr	r0, [r4, #0]
 8001198:	f7ff f988 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 800119c:	2005      	movs	r0, #5
 800119e:	f7ff fd8d 	bl	8000cbc <Delay_Micros>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80011a2:	2201      	movs	r2, #1
 80011a4:	88a1      	ldrh	r1, [r4, #4]
 80011a6:	6820      	ldr	r0, [r4, #0]
 80011a8:	f7ff f980 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 80011ac:	2005      	movs	r0, #5
 80011ae:	f7ff fd85 	bl	8000cbc <Delay_Micros>
    return HAL_GPIO_ReadPin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin);
 80011b2:	89a1      	ldrh	r1, [r4, #12]
 80011b4:	68a0      	ldr	r0, [r4, #8]
 80011b6:	f7ff f973 	bl	80004a0 <HAL_GPIO_ReadPin>

    Soft_I2C_SDA_High(i2c_handle);
    while (i--)
	{
	ReceivedByte <<= 1;
 80011ba:	0076      	lsls	r6, r6, #1
 80011bc:	b2f6      	uxtb	r6, r6
 80011be:	1e6a      	subs	r2, r5, #1
	Soft_I2C_SCL_Low(i2c_handle);
	Soft_I2C_Delay();
	Soft_I2C_SCL_High(i2c_handle);
	Soft_I2C_Delay();
	if (Soft_I2C_SDA_Read(i2c_handle))
 80011c0:	b108      	cbz	r0, 80011c6 <Soft_I2C_Receive_Byte+0x46>
	    {
	    ReceivedByte |= 0x01;
 80011c2:	f046 0601 	orr.w	r6, r6, #1
    while (i--)
 80011c6:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 80011ca:	d1e2      	bne.n	8001192 <Soft_I2C_Receive_Byte+0x12>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80011cc:	6820      	ldr	r0, [r4, #0]
 80011ce:	462a      	mov	r2, r5
 80011d0:	88a1      	ldrh	r1, [r4, #4]
 80011d2:	f7ff f96b 	bl	80004ac <HAL_GPIO_WritePin>
	    }
	}
    Soft_I2C_SCL_Low(i2c_handle);
    return ReceivedByte;

    }
 80011d6:	4630      	mov	r0, r6
 80011d8:	bd70      	pop	{r4, r5, r6, pc}
 80011da:	bf00      	nop

080011dc <Soft_I2C_Write_Byte>:

uint8_t Soft_I2C_Write_Byte(Soft_I2C_t* i2c_handle,
	                    uint8_t     slave_address,
	                    uint8_t     register_address,
			    uint8_t     *byte)
    {
 80011dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011e0:	4604      	mov	r4, r0
 80011e2:	460e      	mov	r6, r1
 80011e4:	4690      	mov	r8, r2
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80011e6:	8881      	ldrh	r1, [r0, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	6800      	ldr	r0, [r0, #0]
    {
 80011ec:	461f      	mov	r7, r3
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80011ee:	f7ff f95d 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 80011f2:	89a1      	ldrh	r1, [r4, #12]
 80011f4:	68a0      	ldr	r0, [r4, #8]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f7ff f958 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 80011fc:	2005      	movs	r0, #5
 80011fe:	f7ff fd5d 	bl	8000cbc <Delay_Micros>
    return HAL_GPIO_ReadPin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin);
 8001202:	89a1      	ldrh	r1, [r4, #12]
 8001204:	68a0      	ldr	r0, [r4, #8]
 8001206:	f7ff f94b 	bl	80004a0 <HAL_GPIO_ReadPin>
    if (Soft_I2C_SDA_Read(i2c_handle))
 800120a:	bb88      	cbnz	r0, 8001270 <Soft_I2C_Write_Byte+0x94>
 800120c:	4605      	mov	r5, r0
	{
	Soft_I2C_Stop(i2c_handle);
	return SOFT_I2C_ERR;
	}

    if (Soft_I2C_Send_Byte(i2c_handle, slave_address) == SOFT_I2C_ERR)
 800120e:	4631      	mov	r1, r6
 8001210:	4620      	mov	r0, r4
 8001212:	f7ff ff4d 	bl	80010b0 <Soft_I2C_Send_Byte>
 8001216:	2801      	cmp	r0, #1
 8001218:	d026      	beq.n	8001268 <Soft_I2C_Write_Byte+0x8c>
	{
	return SOFT_I2C_ERR;
	}
    if (Soft_I2C_Send_Byte(i2c_handle, register_address) == SOFT_I2C_ERR)
 800121a:	4641      	mov	r1, r8
 800121c:	4620      	mov	r0, r4
 800121e:	f7ff ff47 	bl	80010b0 <Soft_I2C_Send_Byte>
 8001222:	2801      	cmp	r0, #1
 8001224:	d020      	beq.n	8001268 <Soft_I2C_Write_Byte+0x8c>
	{
	return SOFT_I2C_ERR;
	}

    if (byte)
 8001226:	b12f      	cbz	r7, 8001234 <Soft_I2C_Write_Byte+0x58>
	{
	if (Soft_I2C_Send_Byte(i2c_handle, *byte) == SOFT_I2C_ERR)
 8001228:	7839      	ldrb	r1, [r7, #0]
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff ff40 	bl	80010b0 <Soft_I2C_Send_Byte>
 8001230:	2801      	cmp	r0, #1
 8001232:	d019      	beq.n	8001268 <Soft_I2C_Write_Byte+0x8c>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001234:	88a1      	ldrh	r1, [r4, #4]
 8001236:	6820      	ldr	r0, [r4, #0]
 8001238:	2200      	movs	r2, #0
 800123a:	f7ff f937 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 800123e:	89a1      	ldrh	r1, [r4, #12]
 8001240:	68a0      	ldr	r0, [r4, #8]
 8001242:	2200      	movs	r2, #0
 8001244:	f7ff f932 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001248:	88a1      	ldrh	r1, [r4, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	6820      	ldr	r0, [r4, #0]
 800124e:	f7ff f92d 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 8001252:	2005      	movs	r0, #5
 8001254:	f7ff fd32 	bl	8000cbc <Delay_Micros>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001258:	68a0      	ldr	r0, [r4, #8]
 800125a:	2201      	movs	r2, #1
 800125c:	89a1      	ldrh	r1, [r4, #12]
 800125e:	f7ff f925 	bl	80004ac <HAL_GPIO_WritePin>

    Soft_I2C_Stop(i2c_handle);

    return SOFT_I2C_OK;

    }
 8001262:	4628      	mov	r0, r5
 8001264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return SOFT_I2C_ERR;
 8001268:	2501      	movs	r5, #1
    }
 800126a:	4628      	mov	r0, r5
 800126c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return SOFT_I2C_ERR;
 8001270:	2501      	movs	r5, #1
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001272:	88a1      	ldrh	r1, [r4, #4]
 8001274:	6820      	ldr	r0, [r4, #0]
 8001276:	2200      	movs	r2, #0
 8001278:	f7ff f918 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 800127c:	89a1      	ldrh	r1, [r4, #12]
 800127e:	68a0      	ldr	r0, [r4, #8]
 8001280:	2200      	movs	r2, #0
 8001282:	f7ff f913 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001286:	88a1      	ldrh	r1, [r4, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	6820      	ldr	r0, [r4, #0]
 800128c:	f7ff f90e 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 8001290:	2005      	movs	r0, #5
 8001292:	f7ff fd13 	bl	8000cbc <Delay_Micros>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001296:	68a0      	ldr	r0, [r4, #8]
 8001298:	2201      	movs	r2, #1
 800129a:	89a1      	ldrh	r1, [r4, #12]
 800129c:	f7ff f906 	bl	80004ac <HAL_GPIO_WritePin>
    }
 80012a0:	4628      	mov	r0, r5
 80012a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012a6:	bf00      	nop

080012a8 <Soft_I2C_Write_Bytes>:
uint8_t Soft_I2C_Write_Bytes(Soft_I2C_t* i2c_handle,
	                     uint8_t     slave_address,
	                     uint8_t     register_address,
			     uint8_t     *buf,
			     uint8_t     num)
    {
 80012a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012ac:	4604      	mov	r4, r0
 80012ae:	4688      	mov	r8, r1
 80012b0:	4691      	mov	r9, r2
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80012b2:	8881      	ldrh	r1, [r0, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	6800      	ldr	r0, [r0, #0]
    {
 80012b8:	461d      	mov	r5, r3
 80012ba:	f89d 7020 	ldrb.w	r7, [sp, #32]
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80012be:	f7ff f8f5 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 80012c2:	89a1      	ldrh	r1, [r4, #12]
 80012c4:	68a0      	ldr	r0, [r4, #8]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f7ff f8f0 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 80012cc:	2005      	movs	r0, #5
 80012ce:	f7ff fcf5 	bl	8000cbc <Delay_Micros>
    return HAL_GPIO_ReadPin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin);
 80012d2:	89a1      	ldrh	r1, [r4, #12]
 80012d4:	68a0      	ldr	r0, [r4, #8]
 80012d6:	f7ff f8e3 	bl	80004a0 <HAL_GPIO_ReadPin>
    if (Soft_I2C_SDA_Read(i2c_handle))
 80012da:	bba8      	cbnz	r0, 8001348 <Soft_I2C_Write_Bytes+0xa0>
 80012dc:	4606      	mov	r6, r0
	{
	Soft_I2C_Stop(i2c_handle);
	return SOFT_I2C_ERR;
	}

    if (Soft_I2C_Send_Byte(i2c_handle, slave_address) == SOFT_I2C_ERR)
 80012de:	4641      	mov	r1, r8
 80012e0:	4620      	mov	r0, r4
 80012e2:	f7ff fee5 	bl	80010b0 <Soft_I2C_Send_Byte>
 80012e6:	2801      	cmp	r0, #1
 80012e8:	d02a      	beq.n	8001340 <Soft_I2C_Write_Bytes+0x98>
	{
	return SOFT_I2C_ERR;
	}

    if (Soft_I2C_Send_Byte(i2c_handle, register_address) == SOFT_I2C_ERR)
 80012ea:	4649      	mov	r1, r9
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff fedf 	bl	80010b0 <Soft_I2C_Send_Byte>
 80012f2:	2801      	cmp	r0, #1
 80012f4:	d024      	beq.n	8001340 <Soft_I2C_Write_Bytes+0x98>
 80012f6:	442f      	add	r7, r5
 80012f8:	e006      	b.n	8001308 <Soft_I2C_Write_Bytes+0x60>
	return SOFT_I2C_ERR;
	}

    while (num--)
	{
	if (Soft_I2C_Send_Byte(i2c_handle, *buf++) == SOFT_I2C_ERR)
 80012fa:	f815 1b01 	ldrb.w	r1, [r5], #1
 80012fe:	4620      	mov	r0, r4
 8001300:	f7ff fed6 	bl	80010b0 <Soft_I2C_Send_Byte>
 8001304:	2801      	cmp	r0, #1
 8001306:	d01b      	beq.n	8001340 <Soft_I2C_Write_Bytes+0x98>
    while (num--)
 8001308:	42bd      	cmp	r5, r7
 800130a:	d1f6      	bne.n	80012fa <Soft_I2C_Write_Bytes+0x52>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 800130c:	88a1      	ldrh	r1, [r4, #4]
 800130e:	6820      	ldr	r0, [r4, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	f7ff f8cb 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001316:	89a1      	ldrh	r1, [r4, #12]
 8001318:	68a0      	ldr	r0, [r4, #8]
 800131a:	2200      	movs	r2, #0
 800131c:	f7ff f8c6 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001320:	88a1      	ldrh	r1, [r4, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	6820      	ldr	r0, [r4, #0]
 8001326:	f7ff f8c1 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 800132a:	2005      	movs	r0, #5
 800132c:	f7ff fcc6 	bl	8000cbc <Delay_Micros>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001330:	68a0      	ldr	r0, [r4, #8]
 8001332:	2201      	movs	r2, #1
 8001334:	89a1      	ldrh	r1, [r4, #12]
 8001336:	f7ff f8b9 	bl	80004ac <HAL_GPIO_WritePin>

    Soft_I2C_Stop(i2c_handle);

    return SOFT_I2C_OK;

    }
 800133a:	4630      	mov	r0, r6
 800133c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return SOFT_I2C_ERR;
 8001340:	2601      	movs	r6, #1
    }
 8001342:	4630      	mov	r0, r6
 8001344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return SOFT_I2C_ERR;
 8001348:	2601      	movs	r6, #1
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 800134a:	88a1      	ldrh	r1, [r4, #4]
 800134c:	6820      	ldr	r0, [r4, #0]
 800134e:	2200      	movs	r2, #0
 8001350:	f7ff f8ac 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001354:	89a1      	ldrh	r1, [r4, #12]
 8001356:	68a0      	ldr	r0, [r4, #8]
 8001358:	2200      	movs	r2, #0
 800135a:	f7ff f8a7 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 800135e:	88a1      	ldrh	r1, [r4, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	6820      	ldr	r0, [r4, #0]
 8001364:	f7ff f8a2 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 8001368:	2005      	movs	r0, #5
 800136a:	f7ff fca7 	bl	8000cbc <Delay_Micros>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 800136e:	68a0      	ldr	r0, [r4, #8]
 8001370:	2201      	movs	r2, #1
 8001372:	89a1      	ldrh	r1, [r4, #12]
 8001374:	f7ff f89a 	bl	80004ac <HAL_GPIO_WritePin>
    }
 8001378:	4630      	mov	r0, r6
 800137a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800137e:	bf00      	nop

08001380 <Soft_I2C_Scan>:
    return SOFT_I2C_OK;

    }

uint8_t Soft_I2C_Scan(Soft_I2C_t* i2c_handle, uint8_t slave_address)
    {
 8001380:	b570      	push	{r4, r5, r6, lr}
 8001382:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 8001384:	2201      	movs	r2, #1
 8001386:	6800      	ldr	r0, [r0, #0]
    {
 8001388:	460e      	mov	r6, r1
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 800138a:	88a1      	ldrh	r1, [r4, #4]
 800138c:	f7ff f88e 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 8001390:	89a1      	ldrh	r1, [r4, #12]
 8001392:	68a0      	ldr	r0, [r4, #8]
 8001394:	2200      	movs	r2, #0
 8001396:	f7ff f889 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 800139a:	2005      	movs	r0, #5
 800139c:	f7ff fc8e 	bl	8000cbc <Delay_Micros>
    return HAL_GPIO_ReadPin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin);
 80013a0:	89a1      	ldrh	r1, [r4, #12]
 80013a2:	68a0      	ldr	r0, [r4, #8]
 80013a4:	f7ff f87c 	bl	80004a0 <HAL_GPIO_ReadPin>
    if (Soft_I2C_SDA_Read(i2c_handle))
 80013a8:	b9f8      	cbnz	r0, 80013ea <Soft_I2C_Scan+0x6a>
 80013aa:	4605      	mov	r5, r0
	{
	Soft_I2C_Stop(i2c_handle);
	return SOFT_I2C_ERR;
	}

    if (Soft_I2C_Send_Byte(i2c_handle, slave_address) == SOFT_I2C_ERR)
 80013ac:	4631      	mov	r1, r6
 80013ae:	4620      	mov	r0, r4
 80013b0:	f7ff fe7e 	bl	80010b0 <Soft_I2C_Send_Byte>
 80013b4:	2801      	cmp	r0, #1
 80013b6:	d017      	beq.n	80013e8 <Soft_I2C_Scan+0x68>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80013b8:	462a      	mov	r2, r5
 80013ba:	88a1      	ldrh	r1, [r4, #4]
 80013bc:	6820      	ldr	r0, [r4, #0]
 80013be:	f7ff f875 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 80013c2:	462a      	mov	r2, r5
 80013c4:	89a1      	ldrh	r1, [r4, #12]
 80013c6:	68a0      	ldr	r0, [r4, #8]
 80013c8:	f7ff f870 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80013cc:	2201      	movs	r2, #1
 80013ce:	88a1      	ldrh	r1, [r4, #4]
 80013d0:	6820      	ldr	r0, [r4, #0]
 80013d2:	f7ff f86b 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 80013d6:	2005      	movs	r0, #5
 80013d8:	f7ff fc70 	bl	8000cbc <Delay_Micros>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 80013dc:	68a0      	ldr	r0, [r4, #8]
 80013de:	2201      	movs	r2, #1
 80013e0:	89a1      	ldrh	r1, [r4, #12]
 80013e2:	f7ff f863 	bl	80004ac <HAL_GPIO_WritePin>
	return SOFT_I2C_ERR;
	}

    Soft_I2C_Stop(i2c_handle);

    return SOFT_I2C_OK;
 80013e6:	4628      	mov	r0, r5

    }
 80013e8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80013ea:	88a1      	ldrh	r1, [r4, #4]
 80013ec:	6820      	ldr	r0, [r4, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f7ff f85c 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 80013f4:	89a1      	ldrh	r1, [r4, #12]
 80013f6:	68a0      	ldr	r0, [r4, #8]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f7ff f857 	bl	80004ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SCL_Port, i2c_handle->GPIO_SCL_Pin,
 80013fe:	88a1      	ldrh	r1, [r4, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	6820      	ldr	r0, [r4, #0]
 8001404:	f7ff f852 	bl	80004ac <HAL_GPIO_WritePin>
    Delay_Micros(5);
 8001408:	2005      	movs	r0, #5
 800140a:	f7ff fc57 	bl	8000cbc <Delay_Micros>
    HAL_GPIO_WritePin(i2c_handle->GPIO_SDA_Port, i2c_handle->GPIO_SDA_Pin,
 800140e:	68a0      	ldr	r0, [r4, #8]
 8001410:	2201      	movs	r2, #1
 8001412:	89a1      	ldrh	r1, [r4, #12]
 8001414:	f7ff f84a 	bl	80004ac <HAL_GPIO_WritePin>
	return SOFT_I2C_ERR;
 8001418:	2001      	movs	r0, #1
    }
 800141a:	bd70      	pop	{r4, r5, r6, pc}

0800141c <ssd1306_Init>:

//
//	Het scherm initialiseren voor gebruik
//
uint8_t ssd1306_Init(void)
{	
 800141c:	22ae      	movs	r2, #174	; 0xae
 800141e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	ab0a      	add	r3, sp, #40	; 0x28
 8001426:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if(Soft_I2C_Write_Byte(&Soft_I2C1, SSD1306_I2C_ADDR,0x00, &command)==SOFT_I2C_ERR)
 800142a:	2178      	movs	r1, #120	; 0x78
 800142c:	2200      	movs	r2, #0
 800142e:	48d5      	ldr	r0, [pc, #852]	; (8001784 <ssd1306_Init+0x368>)
 8001430:	f7ff fed4 	bl	80011dc <Soft_I2C_Write_Byte>
 8001434:	2801      	cmp	r0, #1
 8001436:	f000 8195 	beq.w	8001764 <ssd1306_Init+0x348>
 800143a:	2220      	movs	r2, #32
 800143c:	ab0a      	add	r3, sp, #40	; 0x28
 800143e:	f803 2d05 	strb.w	r2, [r3, #-5]!
 8001442:	2178      	movs	r1, #120	; 0x78
 8001444:	2200      	movs	r2, #0
 8001446:	48cf      	ldr	r0, [pc, #828]	; (8001784 <ssd1306_Init+0x368>)
 8001448:	f7ff fec8 	bl	80011dc <Soft_I2C_Write_Byte>
 800144c:	2801      	cmp	r0, #1
 800144e:	f000 81e1 	beq.w	8001814 <ssd1306_Init+0x3f8>
 8001452:	2210      	movs	r2, #16
 8001454:	ab0a      	add	r3, sp, #40	; 0x28
 8001456:	f803 2d06 	strb.w	r2, [r3, #-6]!
 800145a:	2178      	movs	r1, #120	; 0x78
 800145c:	2200      	movs	r2, #0
 800145e:	48c9      	ldr	r0, [pc, #804]	; (8001784 <ssd1306_Init+0x368>)
 8001460:	f7ff febc 	bl	80011dc <Soft_I2C_Write_Byte>
 8001464:	2801      	cmp	r0, #1
 8001466:	f000 81d2 	beq.w	800180e <ssd1306_Init+0x3f2>
 800146a:	22b0      	movs	r2, #176	; 0xb0
 800146c:	ab0a      	add	r3, sp, #40	; 0x28
 800146e:	f803 2d07 	strb.w	r2, [r3, #-7]!
 8001472:	2178      	movs	r1, #120	; 0x78
 8001474:	2200      	movs	r2, #0
 8001476:	48c3      	ldr	r0, [pc, #780]	; (8001784 <ssd1306_Init+0x368>)
 8001478:	f7ff feb0 	bl	80011dc <Soft_I2C_Write_Byte>
 800147c:	2801      	cmp	r0, #1
 800147e:	f000 81c3 	beq.w	8001808 <ssd1306_Init+0x3ec>
 8001482:	22c8      	movs	r2, #200	; 0xc8
 8001484:	ab0a      	add	r3, sp, #40	; 0x28
 8001486:	f803 2d08 	strb.w	r2, [r3, #-8]!
 800148a:	2178      	movs	r1, #120	; 0x78
 800148c:	2200      	movs	r2, #0
 800148e:	48bd      	ldr	r0, [pc, #756]	; (8001784 <ssd1306_Init+0x368>)
 8001490:	f7ff fea4 	bl	80011dc <Soft_I2C_Write_Byte>
 8001494:	2801      	cmp	r0, #1
 8001496:	f000 81b4 	beq.w	8001802 <ssd1306_Init+0x3e6>
 800149a:	2200      	movs	r2, #0
 800149c:	ab0a      	add	r3, sp, #40	; 0x28
 800149e:	f803 2d09 	strb.w	r2, [r3, #-9]!
 80014a2:	2178      	movs	r1, #120	; 0x78
 80014a4:	48b7      	ldr	r0, [pc, #732]	; (8001784 <ssd1306_Init+0x368>)
 80014a6:	f7ff fe99 	bl	80011dc <Soft_I2C_Write_Byte>
 80014aa:	2801      	cmp	r0, #1
 80014ac:	f000 81a6 	beq.w	80017fc <ssd1306_Init+0x3e0>
 80014b0:	2210      	movs	r2, #16
 80014b2:	ab0a      	add	r3, sp, #40	; 0x28
 80014b4:	f803 2d0a 	strb.w	r2, [r3, #-10]!
 80014b8:	2178      	movs	r1, #120	; 0x78
 80014ba:	2200      	movs	r2, #0
 80014bc:	48b1      	ldr	r0, [pc, #708]	; (8001784 <ssd1306_Init+0x368>)
 80014be:	f7ff fe8d 	bl	80011dc <Soft_I2C_Write_Byte>
 80014c2:	2801      	cmp	r0, #1
 80014c4:	f000 8197 	beq.w	80017f6 <ssd1306_Init+0x3da>
 80014c8:	2240      	movs	r2, #64	; 0x40
 80014ca:	ab0a      	add	r3, sp, #40	; 0x28
 80014cc:	f803 2d0b 	strb.w	r2, [r3, #-11]!
 80014d0:	2178      	movs	r1, #120	; 0x78
 80014d2:	2200      	movs	r2, #0
 80014d4:	48ab      	ldr	r0, [pc, #684]	; (8001784 <ssd1306_Init+0x368>)
 80014d6:	f7ff fe81 	bl	80011dc <Soft_I2C_Write_Byte>
 80014da:	2801      	cmp	r0, #1
 80014dc:	f000 8188 	beq.w	80017f0 <ssd1306_Init+0x3d4>
 80014e0:	2281      	movs	r2, #129	; 0x81
 80014e2:	ab0a      	add	r3, sp, #40	; 0x28
 80014e4:	f803 2d0c 	strb.w	r2, [r3, #-12]!
 80014e8:	2178      	movs	r1, #120	; 0x78
 80014ea:	2200      	movs	r2, #0
 80014ec:	48a5      	ldr	r0, [pc, #660]	; (8001784 <ssd1306_Init+0x368>)
 80014ee:	f7ff fe75 	bl	80011dc <Soft_I2C_Write_Byte>
 80014f2:	2801      	cmp	r0, #1
 80014f4:	f000 8179 	beq.w	80017ea <ssd1306_Init+0x3ce>
 80014f8:	22ff      	movs	r2, #255	; 0xff
 80014fa:	ab0a      	add	r3, sp, #40	; 0x28
 80014fc:	f803 2d0d 	strb.w	r2, [r3, #-13]!
 8001500:	2178      	movs	r1, #120	; 0x78
 8001502:	2200      	movs	r2, #0
 8001504:	489f      	ldr	r0, [pc, #636]	; (8001784 <ssd1306_Init+0x368>)
 8001506:	f7ff fe69 	bl	80011dc <Soft_I2C_Write_Byte>
 800150a:	2801      	cmp	r0, #1
 800150c:	f000 816a 	beq.w	80017e4 <ssd1306_Init+0x3c8>
 8001510:	22a1      	movs	r2, #161	; 0xa1
 8001512:	ab0a      	add	r3, sp, #40	; 0x28
 8001514:	f803 2d0e 	strb.w	r2, [r3, #-14]!
 8001518:	2178      	movs	r1, #120	; 0x78
 800151a:	2200      	movs	r2, #0
 800151c:	4899      	ldr	r0, [pc, #612]	; (8001784 <ssd1306_Init+0x368>)
 800151e:	f7ff fe5d 	bl	80011dc <Soft_I2C_Write_Byte>
 8001522:	2801      	cmp	r0, #1
 8001524:	f000 815b 	beq.w	80017de <ssd1306_Init+0x3c2>
 8001528:	22a6      	movs	r2, #166	; 0xa6
 800152a:	ab0a      	add	r3, sp, #40	; 0x28
 800152c:	f803 2d0f 	strb.w	r2, [r3, #-15]!
 8001530:	2178      	movs	r1, #120	; 0x78
 8001532:	2200      	movs	r2, #0
 8001534:	4893      	ldr	r0, [pc, #588]	; (8001784 <ssd1306_Init+0x368>)
 8001536:	f7ff fe51 	bl	80011dc <Soft_I2C_Write_Byte>
 800153a:	2801      	cmp	r0, #1
 800153c:	f000 814c 	beq.w	80017d8 <ssd1306_Init+0x3bc>
 8001540:	22a8      	movs	r2, #168	; 0xa8
 8001542:	ab0a      	add	r3, sp, #40	; 0x28
 8001544:	f803 2d10 	strb.w	r2, [r3, #-16]!
 8001548:	2178      	movs	r1, #120	; 0x78
 800154a:	2200      	movs	r2, #0
 800154c:	488d      	ldr	r0, [pc, #564]	; (8001784 <ssd1306_Init+0x368>)
 800154e:	f7ff fe45 	bl	80011dc <Soft_I2C_Write_Byte>
 8001552:	2801      	cmp	r0, #1
 8001554:	f000 813d 	beq.w	80017d2 <ssd1306_Init+0x3b6>
 8001558:	223f      	movs	r2, #63	; 0x3f
 800155a:	ab0a      	add	r3, sp, #40	; 0x28
 800155c:	f803 2d11 	strb.w	r2, [r3, #-17]!
 8001560:	2178      	movs	r1, #120	; 0x78
 8001562:	2200      	movs	r2, #0
 8001564:	4887      	ldr	r0, [pc, #540]	; (8001784 <ssd1306_Init+0x368>)
 8001566:	f7ff fe39 	bl	80011dc <Soft_I2C_Write_Byte>
 800156a:	2801      	cmp	r0, #1
 800156c:	f000 812e 	beq.w	80017cc <ssd1306_Init+0x3b0>
 8001570:	22a4      	movs	r2, #164	; 0xa4
 8001572:	ab0a      	add	r3, sp, #40	; 0x28
 8001574:	f803 2d12 	strb.w	r2, [r3, #-18]!
 8001578:	2178      	movs	r1, #120	; 0x78
 800157a:	2200      	movs	r2, #0
 800157c:	4881      	ldr	r0, [pc, #516]	; (8001784 <ssd1306_Init+0x368>)
 800157e:	f7ff fe2d 	bl	80011dc <Soft_I2C_Write_Byte>
 8001582:	2801      	cmp	r0, #1
 8001584:	f000 811f 	beq.w	80017c6 <ssd1306_Init+0x3aa>
 8001588:	22d3      	movs	r2, #211	; 0xd3
 800158a:	ab0a      	add	r3, sp, #40	; 0x28
 800158c:	f803 2d13 	strb.w	r2, [r3, #-19]!
 8001590:	2178      	movs	r1, #120	; 0x78
 8001592:	2200      	movs	r2, #0
 8001594:	487b      	ldr	r0, [pc, #492]	; (8001784 <ssd1306_Init+0x368>)
 8001596:	f7ff fe21 	bl	80011dc <Soft_I2C_Write_Byte>
 800159a:	2801      	cmp	r0, #1
 800159c:	f000 8110 	beq.w	80017c0 <ssd1306_Init+0x3a4>
 80015a0:	2200      	movs	r2, #0
 80015a2:	ab0a      	add	r3, sp, #40	; 0x28
 80015a4:	f803 2d14 	strb.w	r2, [r3, #-20]!
 80015a8:	2178      	movs	r1, #120	; 0x78
 80015aa:	4876      	ldr	r0, [pc, #472]	; (8001784 <ssd1306_Init+0x368>)
 80015ac:	f7ff fe16 	bl	80011dc <Soft_I2C_Write_Byte>
 80015b0:	2801      	cmp	r0, #1
 80015b2:	f000 8102 	beq.w	80017ba <ssd1306_Init+0x39e>
 80015b6:	22d5      	movs	r2, #213	; 0xd5
 80015b8:	ab0a      	add	r3, sp, #40	; 0x28
 80015ba:	f803 2d15 	strb.w	r2, [r3, #-21]!
 80015be:	2178      	movs	r1, #120	; 0x78
 80015c0:	2200      	movs	r2, #0
 80015c2:	4870      	ldr	r0, [pc, #448]	; (8001784 <ssd1306_Init+0x368>)
 80015c4:	f7ff fe0a 	bl	80011dc <Soft_I2C_Write_Byte>
 80015c8:	2801      	cmp	r0, #1
 80015ca:	f000 80f3 	beq.w	80017b4 <ssd1306_Init+0x398>
 80015ce:	22f0      	movs	r2, #240	; 0xf0
 80015d0:	ab0a      	add	r3, sp, #40	; 0x28
 80015d2:	f803 2d16 	strb.w	r2, [r3, #-22]!
 80015d6:	2178      	movs	r1, #120	; 0x78
 80015d8:	2200      	movs	r2, #0
 80015da:	486a      	ldr	r0, [pc, #424]	; (8001784 <ssd1306_Init+0x368>)
 80015dc:	f7ff fdfe 	bl	80011dc <Soft_I2C_Write_Byte>
 80015e0:	2801      	cmp	r0, #1
 80015e2:	f000 80e4 	beq.w	80017ae <ssd1306_Init+0x392>
 80015e6:	22d9      	movs	r2, #217	; 0xd9
 80015e8:	ab0a      	add	r3, sp, #40	; 0x28
 80015ea:	f803 2d17 	strb.w	r2, [r3, #-23]!
 80015ee:	2178      	movs	r1, #120	; 0x78
 80015f0:	2200      	movs	r2, #0
 80015f2:	4864      	ldr	r0, [pc, #400]	; (8001784 <ssd1306_Init+0x368>)
 80015f4:	f7ff fdf2 	bl	80011dc <Soft_I2C_Write_Byte>
 80015f8:	2801      	cmp	r0, #1
 80015fa:	f000 80d5 	beq.w	80017a8 <ssd1306_Init+0x38c>
 80015fe:	2222      	movs	r2, #34	; 0x22
 8001600:	ab0a      	add	r3, sp, #40	; 0x28
 8001602:	f803 2d18 	strb.w	r2, [r3, #-24]!
 8001606:	2178      	movs	r1, #120	; 0x78
 8001608:	2200      	movs	r2, #0
 800160a:	485e      	ldr	r0, [pc, #376]	; (8001784 <ssd1306_Init+0x368>)
 800160c:	f7ff fde6 	bl	80011dc <Soft_I2C_Write_Byte>
 8001610:	2801      	cmp	r0, #1
 8001612:	f000 80c6 	beq.w	80017a2 <ssd1306_Init+0x386>
 8001616:	22da      	movs	r2, #218	; 0xda
 8001618:	ab0a      	add	r3, sp, #40	; 0x28
 800161a:	f803 2d19 	strb.w	r2, [r3, #-25]!
 800161e:	2178      	movs	r1, #120	; 0x78
 8001620:	2200      	movs	r2, #0
 8001622:	4858      	ldr	r0, [pc, #352]	; (8001784 <ssd1306_Init+0x368>)
 8001624:	f7ff fdda 	bl	80011dc <Soft_I2C_Write_Byte>
 8001628:	2801      	cmp	r0, #1
 800162a:	f000 80b7 	beq.w	800179c <ssd1306_Init+0x380>
 800162e:	2212      	movs	r2, #18
 8001630:	ab0a      	add	r3, sp, #40	; 0x28
 8001632:	f803 2d1a 	strb.w	r2, [r3, #-26]!
 8001636:	2178      	movs	r1, #120	; 0x78
 8001638:	2200      	movs	r2, #0
 800163a:	4852      	ldr	r0, [pc, #328]	; (8001784 <ssd1306_Init+0x368>)
 800163c:	f7ff fdce 	bl	80011dc <Soft_I2C_Write_Byte>
 8001640:	2801      	cmp	r0, #1
 8001642:	f000 80a8 	beq.w	8001796 <ssd1306_Init+0x37a>
 8001646:	22db      	movs	r2, #219	; 0xdb
 8001648:	ab0a      	add	r3, sp, #40	; 0x28
 800164a:	f803 2d1b 	strb.w	r2, [r3, #-27]!
 800164e:	2178      	movs	r1, #120	; 0x78
 8001650:	2200      	movs	r2, #0
 8001652:	484c      	ldr	r0, [pc, #304]	; (8001784 <ssd1306_Init+0x368>)
 8001654:	f7ff fdc2 	bl	80011dc <Soft_I2C_Write_Byte>
 8001658:	2801      	cmp	r0, #1
 800165a:	f000 8099 	beq.w	8001790 <ssd1306_Init+0x374>
 800165e:	2220      	movs	r2, #32
 8001660:	ab0a      	add	r3, sp, #40	; 0x28
 8001662:	f803 2d1c 	strb.w	r2, [r3, #-28]!
 8001666:	2178      	movs	r1, #120	; 0x78
 8001668:	2200      	movs	r2, #0
 800166a:	4846      	ldr	r0, [pc, #280]	; (8001784 <ssd1306_Init+0x368>)
 800166c:	f7ff fdb6 	bl	80011dc <Soft_I2C_Write_Byte>
 8001670:	2801      	cmp	r0, #1
 8001672:	f000 8083 	beq.w	800177c <ssd1306_Init+0x360>
 8001676:	228d      	movs	r2, #141	; 0x8d
 8001678:	ab0a      	add	r3, sp, #40	; 0x28
 800167a:	f803 2d1d 	strb.w	r2, [r3, #-29]!
 800167e:	2178      	movs	r1, #120	; 0x78
 8001680:	2200      	movs	r2, #0
 8001682:	4840      	ldr	r0, [pc, #256]	; (8001784 <ssd1306_Init+0x368>)
 8001684:	f7ff fdaa 	bl	80011dc <Soft_I2C_Write_Byte>
 8001688:	2801      	cmp	r0, #1
 800168a:	d074      	beq.n	8001776 <ssd1306_Init+0x35a>
 800168c:	2214      	movs	r2, #20
 800168e:	ab0a      	add	r3, sp, #40	; 0x28
 8001690:	f803 2d1e 	strb.w	r2, [r3, #-30]!
 8001694:	2178      	movs	r1, #120	; 0x78
 8001696:	2200      	movs	r2, #0
 8001698:	483a      	ldr	r0, [pc, #232]	; (8001784 <ssd1306_Init+0x368>)
 800169a:	f7ff fd9f 	bl	80011dc <Soft_I2C_Write_Byte>
 800169e:	2801      	cmp	r0, #1
 80016a0:	d066      	beq.n	8001770 <ssd1306_Init+0x354>
 80016a2:	22af      	movs	r2, #175	; 0xaf
 80016a4:	ab0a      	add	r3, sp, #40	; 0x28
 80016a6:	f803 2d1f 	strb.w	r2, [r3, #-31]!
 80016aa:	2178      	movs	r1, #120	; 0x78
 80016ac:	2200      	movs	r2, #0
 80016ae:	4835      	ldr	r0, [pc, #212]	; (8001784 <ssd1306_Init+0x368>)
 80016b0:	f7ff fd94 	bl	80011dc <Soft_I2C_Write_Byte>
 80016b4:	2801      	cmp	r0, #1
 80016b6:	d058      	beq.n	800176a <ssd1306_Init+0x34e>
 80016b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016bc:	2100      	movs	r1, #0
 80016be:	4832      	ldr	r0, [pc, #200]	; (8001788 <ssd1306_Init+0x36c>)
 80016c0:	f000 fae2 	bl	8001c88 <memset>
{	
 80016c4:	24b0      	movs	r4, #176	; 0xb0
    if(Soft_I2C_Write_Byte(&Soft_I2C1, SSD1306_I2C_ADDR,0x00, &command)==SOFT_I2C_ERR)
 80016c6:	f04f 0800 	mov.w	r8, #0
 80016ca:	4e2f      	ldr	r6, [pc, #188]	; (8001788 <ssd1306_Init+0x36c>)
 80016cc:	4d2d      	ldr	r5, [pc, #180]	; (8001784 <ssd1306_Init+0x368>)
 80016ce:	e026      	b.n	800171e <ssd1306_Init+0x302>
 80016d0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80016d4:	2200      	movs	r2, #0
 80016d6:	2178      	movs	r1, #120	; 0x78
 80016d8:	4628      	mov	r0, r5
 80016da:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 80016de:	f7ff fd7d 	bl	80011dc <Soft_I2C_Write_Byte>
 80016e2:	2801      	cmp	r0, #1
 80016e4:	d02c      	beq.n	8001740 <ssd1306_Init+0x324>
 80016e6:	2710      	movs	r7, #16
 80016e8:	f10d 0325 	add.w	r3, sp, #37	; 0x25
 80016ec:	2200      	movs	r2, #0
 80016ee:	2178      	movs	r1, #120	; 0x78
 80016f0:	4628      	mov	r0, r5
 80016f2:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
 80016f6:	f7ff fd71 	bl	80011dc <Soft_I2C_Write_Byte>
 80016fa:	2801      	cmp	r0, #1
 80016fc:	d01d      	beq.n	800173a <ssd1306_Init+0x31e>
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		// We schrijven alles map per map weg
	    if(Soft_I2C_Write_Bytes(&Soft_I2C1,SSD1306_I2C_ADDR,0x40,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH)==SOFT_I2C_ERR)
 80016fe:	2280      	movs	r2, #128	; 0x80
 8001700:	4633      	mov	r3, r6
 8001702:	9200      	str	r2, [sp, #0]
 8001704:	2178      	movs	r1, #120	; 0x78
 8001706:	2240      	movs	r2, #64	; 0x40
 8001708:	4628      	mov	r0, r5
 800170a:	f7ff fdcd 	bl	80012a8 <Soft_I2C_Write_Bytes>
 800170e:	2801      	cmp	r0, #1
 8001710:	f106 0680 	add.w	r6, r6, #128	; 0x80
 8001714:	d017      	beq.n	8001746 <ssd1306_Init+0x32a>
 8001716:	3401      	adds	r4, #1
 8001718:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 8; i++) {
 800171a:	2cb8      	cmp	r4, #184	; 0xb8
 800171c:	d019      	beq.n	8001752 <ssd1306_Init+0x336>
    if(Soft_I2C_Write_Byte(&Soft_I2C1, SSD1306_I2C_ADDR,0x00, &command)==SOFT_I2C_ERR)
 800171e:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 8001722:	2200      	movs	r2, #0
 8001724:	2178      	movs	r1, #120	; 0x78
 8001726:	4628      	mov	r0, r5
 8001728:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
 800172c:	f7ff fd56 	bl	80011dc <Soft_I2C_Write_Byte>
 8001730:	2801      	cmp	r0, #1
 8001732:	d1cd      	bne.n	80016d0 <ssd1306_Init+0x2b4>
    	Error_Handler();
 8001734:	f7ff fc00 	bl	8000f38 <Error_Handler>
 8001738:	e7ca      	b.n	80016d0 <ssd1306_Init+0x2b4>
 800173a:	f7ff fbfd 	bl	8000f38 <Error_Handler>
 800173e:	e7de      	b.n	80016fe <ssd1306_Init+0x2e2>
 8001740:	f7ff fbfa 	bl	8000f38 <Error_Handler>
 8001744:	e7cf      	b.n	80016e6 <ssd1306_Init+0x2ca>
 8001746:	3401      	adds	r4, #1
 8001748:	b2e4      	uxtb	r4, r4
	    {
	    	Error_Handler();
 800174a:	f7ff fbf5 	bl	8000f38 <Error_Handler>
	for (i = 0; i < 8; i++) {
 800174e:	2cb8      	cmp	r4, #184	; 0xb8
 8001750:	d1e5      	bne.n	800171e <ssd1306_Init+0x302>
	SSD1306.Initialized = 1;
 8001752:	2201      	movs	r2, #1
	SSD1306.CurrentX = 0;
 8001754:	2100      	movs	r1, #0
}
 8001756:	4610      	mov	r0, r2
	SSD1306.CurrentX = 0;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <ssd1306_Init+0x370>)
 800175a:	6019      	str	r1, [r3, #0]
	SSD1306.Initialized = 1;
 800175c:	715a      	strb	r2, [r3, #5]
}
 800175e:	b00a      	add	sp, #40	; 0x28
 8001760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	Error_Handler();
 8001764:	f7ff fbe8 	bl	8000f38 <Error_Handler>
 8001768:	e667      	b.n	800143a <ssd1306_Init+0x1e>
 800176a:	f7ff fbe5 	bl	8000f38 <Error_Handler>
 800176e:	e7a3      	b.n	80016b8 <ssd1306_Init+0x29c>
 8001770:	f7ff fbe2 	bl	8000f38 <Error_Handler>
 8001774:	e795      	b.n	80016a2 <ssd1306_Init+0x286>
 8001776:	f7ff fbdf 	bl	8000f38 <Error_Handler>
 800177a:	e787      	b.n	800168c <ssd1306_Init+0x270>
 800177c:	f7ff fbdc 	bl	8000f38 <Error_Handler>
 8001780:	e779      	b.n	8001676 <ssd1306_Init+0x25a>
 8001782:	bf00      	nop
 8001784:	2000043c 	.word	0x2000043c
 8001788:	20000038 	.word	0x20000038
 800178c:	20000030 	.word	0x20000030
 8001790:	f7ff fbd2 	bl	8000f38 <Error_Handler>
 8001794:	e763      	b.n	800165e <ssd1306_Init+0x242>
 8001796:	f7ff fbcf 	bl	8000f38 <Error_Handler>
 800179a:	e754      	b.n	8001646 <ssd1306_Init+0x22a>
 800179c:	f7ff fbcc 	bl	8000f38 <Error_Handler>
 80017a0:	e745      	b.n	800162e <ssd1306_Init+0x212>
 80017a2:	f7ff fbc9 	bl	8000f38 <Error_Handler>
 80017a6:	e736      	b.n	8001616 <ssd1306_Init+0x1fa>
 80017a8:	f7ff fbc6 	bl	8000f38 <Error_Handler>
 80017ac:	e727      	b.n	80015fe <ssd1306_Init+0x1e2>
 80017ae:	f7ff fbc3 	bl	8000f38 <Error_Handler>
 80017b2:	e718      	b.n	80015e6 <ssd1306_Init+0x1ca>
 80017b4:	f7ff fbc0 	bl	8000f38 <Error_Handler>
 80017b8:	e709      	b.n	80015ce <ssd1306_Init+0x1b2>
 80017ba:	f7ff fbbd 	bl	8000f38 <Error_Handler>
 80017be:	e6fa      	b.n	80015b6 <ssd1306_Init+0x19a>
 80017c0:	f7ff fbba 	bl	8000f38 <Error_Handler>
 80017c4:	e6ec      	b.n	80015a0 <ssd1306_Init+0x184>
 80017c6:	f7ff fbb7 	bl	8000f38 <Error_Handler>
 80017ca:	e6dd      	b.n	8001588 <ssd1306_Init+0x16c>
 80017cc:	f7ff fbb4 	bl	8000f38 <Error_Handler>
 80017d0:	e6ce      	b.n	8001570 <ssd1306_Init+0x154>
 80017d2:	f7ff fbb1 	bl	8000f38 <Error_Handler>
 80017d6:	e6bf      	b.n	8001558 <ssd1306_Init+0x13c>
 80017d8:	f7ff fbae 	bl	8000f38 <Error_Handler>
 80017dc:	e6b0      	b.n	8001540 <ssd1306_Init+0x124>
 80017de:	f7ff fbab 	bl	8000f38 <Error_Handler>
 80017e2:	e6a1      	b.n	8001528 <ssd1306_Init+0x10c>
 80017e4:	f7ff fba8 	bl	8000f38 <Error_Handler>
 80017e8:	e692      	b.n	8001510 <ssd1306_Init+0xf4>
 80017ea:	f7ff fba5 	bl	8000f38 <Error_Handler>
 80017ee:	e683      	b.n	80014f8 <ssd1306_Init+0xdc>
 80017f0:	f7ff fba2 	bl	8000f38 <Error_Handler>
 80017f4:	e674      	b.n	80014e0 <ssd1306_Init+0xc4>
 80017f6:	f7ff fb9f 	bl	8000f38 <Error_Handler>
 80017fa:	e665      	b.n	80014c8 <ssd1306_Init+0xac>
 80017fc:	f7ff fb9c 	bl	8000f38 <Error_Handler>
 8001800:	e656      	b.n	80014b0 <ssd1306_Init+0x94>
 8001802:	f7ff fb99 	bl	8000f38 <Error_Handler>
 8001806:	e648      	b.n	800149a <ssd1306_Init+0x7e>
 8001808:	f7ff fb96 	bl	8000f38 <Error_Handler>
 800180c:	e639      	b.n	8001482 <ssd1306_Init+0x66>
 800180e:	f7ff fb93 	bl	8000f38 <Error_Handler>
 8001812:	e62a      	b.n	800146a <ssd1306_Init+0x4e>
 8001814:	f7ff fb90 	bl	8000f38 <Error_Handler>
 8001818:	e61b      	b.n	8001452 <ssd1306_Init+0x36>
 800181a:	bf00      	nop

0800181c <ssd1306_Fill>:
{
 800181c:	2800      	cmp	r0, #0
 800181e:	bf14      	ite	ne
 8001820:	21ff      	movne	r1, #255	; 0xff
 8001822:	2100      	moveq	r1, #0
 8001824:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001828:	4801      	ldr	r0, [pc, #4]	; (8001830 <ssd1306_Fill+0x14>)
 800182a:	f000 ba2d 	b.w	8001c88 <memset>
 800182e:	bf00      	nop
 8001830:	20000038 	.word	0x20000038

08001834 <ssd1306_UpdateScreen>:
{
 8001834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001838:	24b0      	movs	r4, #176	; 0xb0
 800183a:	b084      	sub	sp, #16
    if(Soft_I2C_Write_Byte(&Soft_I2C1, SSD1306_I2C_ADDR,0x00, &command)==SOFT_I2C_ERR)
 800183c:	f04f 0800 	mov.w	r8, #0
 8001840:	4e23      	ldr	r6, [pc, #140]	; (80018d0 <ssd1306_UpdateScreen+0x9c>)
 8001842:	4d24      	ldr	r5, [pc, #144]	; (80018d4 <ssd1306_UpdateScreen+0xa0>)
 8001844:	e026      	b.n	8001894 <ssd1306_UpdateScreen+0x60>
 8001846:	f10d 030e 	add.w	r3, sp, #14
 800184a:	2200      	movs	r2, #0
 800184c:	2178      	movs	r1, #120	; 0x78
 800184e:	4628      	mov	r0, r5
 8001850:	f88d 800e 	strb.w	r8, [sp, #14]
 8001854:	f7ff fcc2 	bl	80011dc <Soft_I2C_Write_Byte>
 8001858:	2801      	cmp	r0, #1
 800185a:	d02c      	beq.n	80018b6 <ssd1306_UpdateScreen+0x82>
 800185c:	2710      	movs	r7, #16
 800185e:	f10d 030d 	add.w	r3, sp, #13
 8001862:	2200      	movs	r2, #0
 8001864:	2178      	movs	r1, #120	; 0x78
 8001866:	4628      	mov	r0, r5
 8001868:	f88d 700d 	strb.w	r7, [sp, #13]
 800186c:	f7ff fcb6 	bl	80011dc <Soft_I2C_Write_Byte>
 8001870:	2801      	cmp	r0, #1
 8001872:	d01d      	beq.n	80018b0 <ssd1306_UpdateScreen+0x7c>
	    if(Soft_I2C_Write_Bytes(&Soft_I2C1,SSD1306_I2C_ADDR,0x40,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH)==SOFT_I2C_ERR)
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	4633      	mov	r3, r6
 8001878:	9200      	str	r2, [sp, #0]
 800187a:	2178      	movs	r1, #120	; 0x78
 800187c:	2240      	movs	r2, #64	; 0x40
 800187e:	4628      	mov	r0, r5
 8001880:	f7ff fd12 	bl	80012a8 <Soft_I2C_Write_Bytes>
 8001884:	2801      	cmp	r0, #1
 8001886:	f106 0680 	add.w	r6, r6, #128	; 0x80
 800188a:	d017      	beq.n	80018bc <ssd1306_UpdateScreen+0x88>
 800188c:	3401      	adds	r4, #1
 800188e:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 8; i++) {
 8001890:	2cb8      	cmp	r4, #184	; 0xb8
 8001892:	d019      	beq.n	80018c8 <ssd1306_UpdateScreen+0x94>
    if(Soft_I2C_Write_Byte(&Soft_I2C1, SSD1306_I2C_ADDR,0x00, &command)==SOFT_I2C_ERR)
 8001894:	f10d 030f 	add.w	r3, sp, #15
 8001898:	2200      	movs	r2, #0
 800189a:	2178      	movs	r1, #120	; 0x78
 800189c:	4628      	mov	r0, r5
 800189e:	f88d 400f 	strb.w	r4, [sp, #15]
 80018a2:	f7ff fc9b 	bl	80011dc <Soft_I2C_Write_Byte>
 80018a6:	2801      	cmp	r0, #1
 80018a8:	d1cd      	bne.n	8001846 <ssd1306_UpdateScreen+0x12>
    	Error_Handler();
 80018aa:	f7ff fb45 	bl	8000f38 <Error_Handler>
 80018ae:	e7ca      	b.n	8001846 <ssd1306_UpdateScreen+0x12>
 80018b0:	f7ff fb42 	bl	8000f38 <Error_Handler>
 80018b4:	e7de      	b.n	8001874 <ssd1306_UpdateScreen+0x40>
 80018b6:	f7ff fb3f 	bl	8000f38 <Error_Handler>
 80018ba:	e7cf      	b.n	800185c <ssd1306_UpdateScreen+0x28>
 80018bc:	3401      	adds	r4, #1
 80018be:	b2e4      	uxtb	r4, r4
	    	Error_Handler();
 80018c0:	f7ff fb3a 	bl	8000f38 <Error_Handler>
	for (i = 0; i < 8; i++) {
 80018c4:	2cb8      	cmp	r4, #184	; 0xb8
 80018c6:	d1e5      	bne.n	8001894 <ssd1306_UpdateScreen+0x60>
	    }
	}
}
 80018c8:	b004      	add	sp, #16
 80018ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018ce:	bf00      	nop
 80018d0:	20000038 	.word	0x20000038
 80018d4:	2000043c 	.word	0x2000043c

080018d8 <ssd1306_WriteString>:
// 	str => string om op het scherm te schrijven
//	Font => Het font dat gebruikt moet worden
//	color => Black or White
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80018d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018dc:	b08f      	sub	sp, #60	; 0x3c
 80018de:	9001      	str	r0, [sp, #4]
	// We schrijven alle char tot een nulbyte
	while (*str) 
 80018e0:	7800      	ldrb	r0, [r0, #0]
{
 80018e2:	ac0e      	add	r4, sp, #56	; 0x38
 80018e4:	e904 0006 	stmdb	r4, {r1, r2}
	while (*str) 
 80018e8:	2800      	cmp	r0, #0
 80018ea:	f000 8091 	beq.w	8001a10 <ssd1306_WriteString+0x138>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf18      	it	ne
 80018f2:	2200      	movne	r2, #0
	if (SSD1306.Inverted) 
 80018f4:	4d7f      	ldr	r5, [pc, #508]	; (8001af4 <ssd1306_WriteString+0x21c>)
		color = (SSD1306_COLOR)!color;
 80018f6:	bf08      	it	eq
 80018f8:	2100      	moveq	r1, #0
	if (SSD1306.Inverted) 
 80018fa:	792c      	ldrb	r4, [r5, #4]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80018fc:	bf0c      	ite	eq
 80018fe:	2201      	moveq	r2, #1
		color = (SSD1306_COLOR)!color;
 8001900:	2101      	movne	r1, #1
 8001902:	2c00      	cmp	r4, #0
 8001904:	bf14      	ite	ne
 8001906:	4613      	movne	r3, r2
 8001908:	4611      	moveq	r1, r2
 800190a:	9303      	str	r3, [sp, #12]
 800190c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001910:	886b      	ldrh	r3, [r5, #2]
 8001912:	882d      	ldrh	r5, [r5, #0]
 8001914:	9206      	str	r2, [sp, #24]
 8001916:	189a      	adds	r2, r3, r2
 8001918:	9204      	str	r2, [sp, #16]
 800191a:	462a      	mov	r2, r5
 800191c:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8001920:	b2db      	uxtb	r3, r3
 8001922:	9108      	str	r1, [sp, #32]
 8001924:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001926:	930a      	str	r3, [sp, #40]	; 0x28
	SSD1306.CurrentX += Font.FontWidth;
 8001928:	b2a3      	uxth	r3, r4
 800192a:	9307      	str	r3, [sp, #28]
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800192c:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8001af8 <ssd1306_WriteString+0x220>
 8001930:	1e8b      	subs	r3, r1, #2
 8001932:	9109      	str	r1, [sp, #36]	; 0x24
 8001934:	9502      	str	r5, [sp, #8]
 8001936:	930b      	str	r3, [sp, #44]	; 0x2c
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001938:	1913      	adds	r3, r2, r4
 800193a:	2b7f      	cmp	r3, #127	; 0x7f
 800193c:	dc66      	bgt.n	8001a0c <ssd1306_WriteString+0x134>
 800193e:	9b04      	ldr	r3, [sp, #16]
 8001940:	2b3f      	cmp	r3, #63	; 0x3f
 8001942:	d863      	bhi.n	8001a0c <ssd1306_WriteString+0x134>
	for (i = 0; i < Font.FontHeight; i++)
 8001944:	9906      	ldr	r1, [sp, #24]
 8001946:	2900      	cmp	r1, #0
 8001948:	f000 80d0 	beq.w	8001aec <ssd1306_WriteString+0x214>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800194c:	f1a0 0920 	sub.w	r9, r0, #32
 8001950:	fb01 f909 	mul.w	r9, r1, r9
 8001954:	f109 4700 	add.w	r7, r9, #2147483648	; 0x80000000
 8001958:	4489      	add	r9, r1
 800195a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800195c:	3f01      	subs	r7, #1
 800195e:	eb01 0747 	add.w	r7, r1, r7, lsl #1
 8001962:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001964:	9005      	str	r0, [sp, #20]
 8001966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001968:	9808      	ldr	r0, [sp, #32]
 800196a:	eb01 0949 	add.w	r9, r1, r9, lsl #1
 800196e:	fa5f fe82 	uxtb.w	lr, r2
 8001972:	f837 6f02 	ldrh.w	r6, [r7, #2]!
		for (j = 0; j < Font.FontWidth; j++)
 8001976:	b3ac      	cbz	r4, 80019e4 <ssd1306_WriteString+0x10c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001978:	2201      	movs	r2, #1
 800197a:	f003 0107 	and.w	r1, r3, #7
 800197e:	fa02 f101 	lsl.w	r1, r2, r1
 8001982:	b249      	sxtb	r1, r1
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	2b3f      	cmp	r3, #63	; 0x3f
 8001988:	ea6f 0a01 	mvn.w	sl, r1
 800198c:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 8001990:	d828      	bhi.n	80019e4 <ssd1306_WriteString+0x10c>
 8001992:	9d03      	ldr	r5, [sp, #12]
 8001994:	2d01      	cmp	r5, #1
 8001996:	d03e      	beq.n	8001a16 <ssd1306_WriteString+0x13e>
 8001998:	2800      	cmp	r0, #0
 800199a:	d160      	bne.n	8001a5e <ssd1306_WriteString+0x186>
		for (j = 0; j < Font.FontWidth; j++)
 800199c:	4605      	mov	r5, r0
 800199e:	e00c      	b.n	80019ba <ssd1306_WriteString+0xe2>
 80019a0:	eb01 0c02 	add.w	ip, r1, r2
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80019a4:	0609      	lsls	r1, r1, #24
 80019a6:	d405      	bmi.n	80019b4 <ssd1306_WriteString+0xdc>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019a8:	f818 100c 	ldrb.w	r1, [r8, ip]
 80019ac:	ea0a 0101 	and.w	r1, sl, r1
 80019b0:	f808 100c 	strb.w	r1, [r8, ip]
		for (j = 0; j < Font.FontWidth; j++)
 80019b4:	3501      	adds	r5, #1
 80019b6:	42ac      	cmp	r4, r5
 80019b8:	d014      	beq.n	80019e4 <ssd1306_WriteString+0x10c>
			if ((b << j) & 0x8000) 
 80019ba:	fa06 fc05 	lsl.w	ip, r6, r5
 80019be:	eb0e 0105 	add.w	r1, lr, r5
 80019c2:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 80019c6:	b2c9      	uxtb	r1, r1
 80019c8:	d0ea      	beq.n	80019a0 <ssd1306_WriteString+0xc8>
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80019ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 80019ce:	d1f1      	bne.n	80019b4 <ssd1306_WriteString+0xdc>
 80019d0:	4411      	add	r1, r2
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019d2:	f818 c001 	ldrb.w	ip, [r8, r1]
		for (j = 0; j < Font.FontWidth; j++)
 80019d6:	3501      	adds	r5, #1
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019d8:	ea0a 0c0c 	and.w	ip, sl, ip
		for (j = 0; j < Font.FontWidth; j++)
 80019dc:	42ac      	cmp	r4, r5
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019de:	f808 c001 	strb.w	ip, [r8, r1]
		for (j = 0; j < Font.FontWidth; j++)
 80019e2:	d1ea      	bne.n	80019ba <ssd1306_WriteString+0xe2>
 80019e4:	3301      	adds	r3, #1
	for (i = 0; i < Font.FontHeight; i++)
 80019e6:	454f      	cmp	r7, r9
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	d1c2      	bne.n	8001972 <ssd1306_WriteString+0x9a>
 80019ec:	9b01      	ldr	r3, [sp, #4]
 80019ee:	9805      	ldr	r0, [sp, #20]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	9a02      	ldr	r2, [sp, #8]
	SSD1306.CurrentX += Font.FontWidth;
 80019f4:	9907      	ldr	r1, [sp, #28]
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80019f6:	4298      	cmp	r0, r3
	SSD1306.CurrentX += Font.FontWidth;
 80019f8:	440a      	add	r2, r1
 80019fa:	b292      	uxth	r2, r2
 80019fc:	9202      	str	r2, [sp, #8]
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80019fe:	d177      	bne.n	8001af0 <ssd1306_WriteString+0x218>
	while (*str) 
 8001a00:	9b01      	ldr	r3, [sp, #4]
 8001a02:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	d195      	bne.n	8001938 <ssd1306_WriteString+0x60>
 8001a0c:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <ssd1306_WriteString+0x21c>)
 8001a0e:	801a      	strh	r2, [r3, #0]
		str++;
	}
	
	// Alles gelukt, we sturen dus 0 terug
	return *str;
}
 8001a10:	b00f      	add	sp, #60	; 0x3c
 8001a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a16:	2800      	cmp	r0, #0
 8001a18:	d145      	bne.n	8001aa6 <ssd1306_WriteString+0x1ce>
		for (j = 0; j < Font.FontWidth; j++)
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	e00c      	b.n	8001a38 <ssd1306_WriteString+0x160>
 8001a1e:	eb05 0b02 	add.w	fp, r5, r2
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001a22:	062d      	lsls	r5, r5, #24
 8001a24:	d404      	bmi.n	8001a30 <ssd1306_WriteString+0x158>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a26:	f818 500b 	ldrb.w	r5, [r8, fp]
 8001a2a:	430d      	orrs	r5, r1
 8001a2c:	f808 500b 	strb.w	r5, [r8, fp]
		for (j = 0; j < Font.FontWidth; j++)
 8001a30:	f10c 0c01 	add.w	ip, ip, #1
 8001a34:	4564      	cmp	r4, ip
 8001a36:	d0d5      	beq.n	80019e4 <ssd1306_WriteString+0x10c>
			if ((b << j) & 0x8000) 
 8001a38:	fa06 fb0c 	lsl.w	fp, r6, ip
 8001a3c:	eb0e 050c 	add.w	r5, lr, ip
 8001a40:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
 8001a44:	b2ed      	uxtb	r5, r5
 8001a46:	d1ea      	bne.n	8001a1e <ssd1306_WriteString+0x146>
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001a48:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001a4c:	d1f0      	bne.n	8001a30 <ssd1306_WriteString+0x158>
 8001a4e:	4415      	add	r5, r2
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a50:	f818 b005 	ldrb.w	fp, [r8, r5]
 8001a54:	ea0a 0b0b 	and.w	fp, sl, fp
 8001a58:	f808 b005 	strb.w	fp, [r8, r5]
 8001a5c:	e7e8      	b.n	8001a30 <ssd1306_WriteString+0x158>
		for (j = 0; j < Font.FontWidth; j++)
 8001a5e:	f04f 0c00 	mov.w	ip, #0
 8001a62:	e00d      	b.n	8001a80 <ssd1306_WriteString+0x1a8>
 8001a64:	eb05 0b02 	add.w	fp, r5, r2
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001a68:	062d      	lsls	r5, r5, #24
 8001a6a:	d405      	bmi.n	8001a78 <ssd1306_WriteString+0x1a0>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a6c:	f818 500b 	ldrb.w	r5, [r8, fp]
 8001a70:	ea0a 0505 	and.w	r5, sl, r5
 8001a74:	f808 500b 	strb.w	r5, [r8, fp]
		for (j = 0; j < Font.FontWidth; j++)
 8001a78:	f10c 0c01 	add.w	ip, ip, #1
 8001a7c:	45a4      	cmp	ip, r4
 8001a7e:	d0b1      	beq.n	80019e4 <ssd1306_WriteString+0x10c>
			if ((b << j) & 0x8000) 
 8001a80:	fa06 fb0c 	lsl.w	fp, r6, ip
 8001a84:	eb0e 050c 	add.w	r5, lr, ip
 8001a88:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
 8001a8c:	b2ed      	uxtb	r5, r5
 8001a8e:	d1e9      	bne.n	8001a64 <ssd1306_WriteString+0x18c>
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001a90:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001a94:	d1f0      	bne.n	8001a78 <ssd1306_WriteString+0x1a0>
 8001a96:	4415      	add	r5, r2
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a98:	f818 b005 	ldrb.w	fp, [r8, r5]
 8001a9c:	ea41 0b0b 	orr.w	fp, r1, fp
 8001aa0:	f808 b005 	strb.w	fp, [r8, r5]
 8001aa4:	e7e8      	b.n	8001a78 <ssd1306_WriteString+0x1a0>
		for (j = 0; j < Font.FontWidth; j++)
 8001aa6:	f04f 0c00 	mov.w	ip, #0
 8001aaa:	e00c      	b.n	8001ac6 <ssd1306_WriteString+0x1ee>
 8001aac:	eb05 0a02 	add.w	sl, r5, r2
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001ab0:	062d      	lsls	r5, r5, #24
 8001ab2:	d404      	bmi.n	8001abe <ssd1306_WriteString+0x1e6>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ab4:	f818 500a 	ldrb.w	r5, [r8, sl]
 8001ab8:	430d      	orrs	r5, r1
 8001aba:	f808 500a 	strb.w	r5, [r8, sl]
		for (j = 0; j < Font.FontWidth; j++)
 8001abe:	f10c 0c01 	add.w	ip, ip, #1
 8001ac2:	4564      	cmp	r4, ip
 8001ac4:	d08e      	beq.n	80019e4 <ssd1306_WriteString+0x10c>
			if ((b << j) & 0x8000) 
 8001ac6:	fa06 fa0c 	lsl.w	sl, r6, ip
 8001aca:	eb0e 050c 	add.w	r5, lr, ip
 8001ace:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
 8001ad2:	b2ed      	uxtb	r5, r5
 8001ad4:	d0ea      	beq.n	8001aac <ssd1306_WriteString+0x1d4>
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001ad6:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001ada:	d1f0      	bne.n	8001abe <ssd1306_WriteString+0x1e6>
 8001adc:	4415      	add	r5, r2
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ade:	f818 a005 	ldrb.w	sl, [r8, r5]
 8001ae2:	ea41 0a0a 	orr.w	sl, r1, sl
 8001ae6:	f808 a005 	strb.w	sl, [r8, r5]
 8001aea:	e7e8      	b.n	8001abe <ssd1306_WriteString+0x1e6>
	for (i = 0; i < Font.FontHeight; i++)
 8001aec:	4603      	mov	r3, r0
 8001aee:	e781      	b.n	80019f4 <ssd1306_WriteString+0x11c>
 8001af0:	4618      	mov	r0, r3
 8001af2:	e78b      	b.n	8001a0c <ssd1306_WriteString+0x134>
 8001af4:	20000030 	.word	0x20000030
 8001af8:	20000038 	.word	0x20000038

08001afc <ssd1306_SetCursor>:
//	Zet de cursor op een coordinaat
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001afc:	4b01      	ldr	r3, [pc, #4]	; (8001b04 <ssd1306_SetCursor+0x8>)
 8001afe:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001b00:	8059      	strh	r1, [r3, #2]
}
 8001b02:	4770      	bx	lr
 8001b04:	20000030 	.word	0x20000030

08001b08 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_MspInit+0x3c>)
{
 8001b0a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b0c:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b0e:	490e      	ldr	r1, [pc, #56]	; (8001b48 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b10:	f042 0201 	orr.w	r2, r2, #1
 8001b14:	619a      	str	r2, [r3, #24]
 8001b16:	699a      	ldr	r2, [r3, #24]
 8001b18:	f002 0201 	and.w	r2, r2, #1
 8001b1c:	9200      	str	r2, [sp, #0]
 8001b1e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b26:	61da      	str	r2, [r3, #28]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b32:	684b      	ldr	r3, [r1, #4]
 8001b34:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3e:	b002      	add	sp, #8
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010000 	.word	0x40010000

08001b4c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b50:	e7fe      	b.n	8001b50 <HardFault_Handler>
 8001b52:	bf00      	nop

08001b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b54:	e7fe      	b.n	8001b54 <MemManage_Handler>
 8001b56:	bf00      	nop

08001b58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b58:	e7fe      	b.n	8001b58 <BusFault_Handler>
 8001b5a:	bf00      	nop

08001b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b5c:	e7fe      	b.n	8001b5c <UsageFault_Handler>
 8001b5e:	bf00      	nop

08001b60 <SVC_Handler>:
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop

08001b64 <DebugMon_Handler>:
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop

08001b68 <PendSV_Handler>:
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop

08001b6c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f7fe bb24 	b.w	80001b8 <HAL_IncTick>

08001b70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b70:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b72:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b76:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 8001b7e:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b80:	480e      	ldr	r0, [pc, #56]	; (8001bbc <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 8001b82:	f041 0101 	orr.w	r1, r1, #1
 8001b86:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8001b88:	6859      	ldr	r1, [r3, #4]
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b98:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ba0:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001ba8:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8001baa:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001bac:	6084      	str	r4, [r0, #8]
#endif 
}
 8001bae:	bc30      	pop	{r4, r5}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	f8ff0000 	.word	0xf8ff0000
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001bc0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001bc2:	e003      	b.n	8001bcc <LoopCopyDataInit>

08001bc4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bc6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bc8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bca:	3104      	adds	r1, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bcc:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bd0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bd2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bd4:	d3f6      	bcc.n	8001bc4 <CopyDataInit>
  ldr r2, =_sbss
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bd8:	e002      	b.n	8001be0 <LoopFillZerobss>

08001bda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bdc:	f842 3b04 	str.w	r3, [r2], #4

08001be0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001be2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001be4:	d3f9      	bcc.n	8001bda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001be6:	f7ff ffc3 	bl	8001b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bea:	f000 f80f 	bl	8001c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bee:	f7ff f8f7 	bl	8000de0 <main>
  bx lr
 8001bf2:	4770      	bx	lr
  ldr r3, =_sidata
 8001bf4:	08002af0 	.word	0x08002af0
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bfc:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8001c00:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8001c04:	2000064c 	.word	0x2000064c

08001c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC1_2_IRQHandler>
	...

08001c0c <__libc_init_array>:
 8001c0c:	b570      	push	{r4, r5, r6, lr}
 8001c0e:	2500      	movs	r5, #0
 8001c10:	4e0c      	ldr	r6, [pc, #48]	; (8001c44 <__libc_init_array+0x38>)
 8001c12:	4c0d      	ldr	r4, [pc, #52]	; (8001c48 <__libc_init_array+0x3c>)
 8001c14:	1ba4      	subs	r4, r4, r6
 8001c16:	10a4      	asrs	r4, r4, #2
 8001c18:	42a5      	cmp	r5, r4
 8001c1a:	d109      	bne.n	8001c30 <__libc_init_array+0x24>
 8001c1c:	f000 f87a 	bl	8001d14 <_init>
 8001c20:	2500      	movs	r5, #0
 8001c22:	4e0a      	ldr	r6, [pc, #40]	; (8001c4c <__libc_init_array+0x40>)
 8001c24:	4c0a      	ldr	r4, [pc, #40]	; (8001c50 <__libc_init_array+0x44>)
 8001c26:	1ba4      	subs	r4, r4, r6
 8001c28:	10a4      	asrs	r4, r4, #2
 8001c2a:	42a5      	cmp	r5, r4
 8001c2c:	d105      	bne.n	8001c3a <__libc_init_array+0x2e>
 8001c2e:	bd70      	pop	{r4, r5, r6, pc}
 8001c30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c34:	4798      	blx	r3
 8001c36:	3501      	adds	r5, #1
 8001c38:	e7ee      	b.n	8001c18 <__libc_init_array+0xc>
 8001c3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c3e:	4798      	blx	r3
 8001c40:	3501      	adds	r5, #1
 8001c42:	e7f2      	b.n	8001c2a <__libc_init_array+0x1e>
 8001c44:	08002ae8 	.word	0x08002ae8
 8001c48:	08002ae8 	.word	0x08002ae8
 8001c4c:	08002ae8 	.word	0x08002ae8
 8001c50:	08002aec 	.word	0x08002aec

08001c54 <__itoa>:
 8001c54:	1e93      	subs	r3, r2, #2
 8001c56:	2b22      	cmp	r3, #34	; 0x22
 8001c58:	b510      	push	{r4, lr}
 8001c5a:	460c      	mov	r4, r1
 8001c5c:	d904      	bls.n	8001c68 <__itoa+0x14>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	461c      	mov	r4, r3
 8001c62:	700b      	strb	r3, [r1, #0]
 8001c64:	4620      	mov	r0, r4
 8001c66:	bd10      	pop	{r4, pc}
 8001c68:	2a0a      	cmp	r2, #10
 8001c6a:	d109      	bne.n	8001c80 <__itoa+0x2c>
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	da07      	bge.n	8001c80 <__itoa+0x2c>
 8001c70:	232d      	movs	r3, #45	; 0x2d
 8001c72:	700b      	strb	r3, [r1, #0]
 8001c74:	2101      	movs	r1, #1
 8001c76:	4240      	negs	r0, r0
 8001c78:	4421      	add	r1, r4
 8001c7a:	f000 f80d 	bl	8001c98 <__utoa>
 8001c7e:	e7f1      	b.n	8001c64 <__itoa+0x10>
 8001c80:	2100      	movs	r1, #0
 8001c82:	e7f9      	b.n	8001c78 <__itoa+0x24>

08001c84 <itoa>:
 8001c84:	f7ff bfe6 	b.w	8001c54 <__itoa>

08001c88 <memset>:
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4402      	add	r2, r0
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d100      	bne.n	8001c92 <memset+0xa>
 8001c90:	4770      	bx	lr
 8001c92:	f803 1b01 	strb.w	r1, [r3], #1
 8001c96:	e7f9      	b.n	8001c8c <memset+0x4>

08001c98 <__utoa>:
 8001c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9a:	b08b      	sub	sp, #44	; 0x2c
 8001c9c:	4605      	mov	r5, r0
 8001c9e:	460c      	mov	r4, r1
 8001ca0:	466e      	mov	r6, sp
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <__utoa+0x78>)
 8001ca4:	f103 0c20 	add.w	ip, r3, #32
 8001ca8:	4637      	mov	r7, r6
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	6859      	ldr	r1, [r3, #4]
 8001cae:	3308      	adds	r3, #8
 8001cb0:	c703      	stmia	r7!, {r0, r1}
 8001cb2:	4563      	cmp	r3, ip
 8001cb4:	463e      	mov	r6, r7
 8001cb6:	d1f7      	bne.n	8001ca8 <__utoa+0x10>
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	791b      	ldrb	r3, [r3, #4]
 8001cbc:	6038      	str	r0, [r7, #0]
 8001cbe:	713b      	strb	r3, [r7, #4]
 8001cc0:	1e93      	subs	r3, r2, #2
 8001cc2:	2b22      	cmp	r3, #34	; 0x22
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	d904      	bls.n	8001cd4 <__utoa+0x3c>
 8001cca:	7023      	strb	r3, [r4, #0]
 8001ccc:	461c      	mov	r4, r3
 8001cce:	4620      	mov	r0, r4
 8001cd0:	b00b      	add	sp, #44	; 0x2c
 8001cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd4:	1e66      	subs	r6, r4, #1
 8001cd6:	fbb5 f0f2 	udiv	r0, r5, r2
 8001cda:	fb02 5510 	mls	r5, r2, r0, r5
 8001cde:	af0a      	add	r7, sp, #40	; 0x28
 8001ce0:	443d      	add	r5, r7
 8001ce2:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8001ce6:	1c59      	adds	r1, r3, #1
 8001ce8:	f806 5f01 	strb.w	r5, [r6, #1]!
 8001cec:	4605      	mov	r5, r0
 8001cee:	b968      	cbnz	r0, 8001d0c <__utoa+0x74>
 8001cf0:	4622      	mov	r2, r4
 8001cf2:	5460      	strb	r0, [r4, r1]
 8001cf4:	4423      	add	r3, r4
 8001cf6:	1b19      	subs	r1, r3, r4
 8001cf8:	1b10      	subs	r0, r2, r4
 8001cfa:	4281      	cmp	r1, r0
 8001cfc:	dde7      	ble.n	8001cce <__utoa+0x36>
 8001cfe:	7811      	ldrb	r1, [r2, #0]
 8001d00:	7818      	ldrb	r0, [r3, #0]
 8001d02:	f802 0b01 	strb.w	r0, [r2], #1
 8001d06:	f803 1901 	strb.w	r1, [r3], #-1
 8001d0a:	e7f4      	b.n	8001cf6 <__utoa+0x5e>
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	e7e2      	b.n	8001cd6 <__utoa+0x3e>
 8001d10:	08002ac0 	.word	0x08002ac0

08001d14 <_init>:
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	bf00      	nop
 8001d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d1a:	bc08      	pop	{r3}
 8001d1c:	469e      	mov	lr, r3
 8001d1e:	4770      	bx	lr

08001d20 <_fini>:
 8001d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d22:	bf00      	nop
 8001d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d26:	bc08      	pop	{r3}
 8001d28:	469e      	mov	lr, r3
 8001d2a:	4770      	bx	lr
